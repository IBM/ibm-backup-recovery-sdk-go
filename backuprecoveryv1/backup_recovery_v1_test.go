/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package backuprecoveryv1_test

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/IBM/ibm-backup-recovery-sdk-go/backuprecoveryv1"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`BackupRecoveryV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(backupRecoveryService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(backupRecoveryService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
				URL: "https://backuprecoveryv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(backupRecoveryService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"BACKUP_RECOVERY_URL":       "https://backuprecoveryv1/api",
				"BACKUP_RECOVERY_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1UsingExternalConfig(&backuprecoveryv1.BackupRecoveryV1Options{})
				Expect(backupRecoveryService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := backupRecoveryService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != backupRecoveryService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(backupRecoveryService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(backupRecoveryService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1UsingExternalConfig(&backuprecoveryv1.BackupRecoveryV1Options{
					URL: "https://testService/api",
				})
				Expect(backupRecoveryService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := backupRecoveryService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != backupRecoveryService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(backupRecoveryService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(backupRecoveryService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1UsingExternalConfig(&backuprecoveryv1.BackupRecoveryV1Options{})
				err := backupRecoveryService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := backupRecoveryService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != backupRecoveryService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(backupRecoveryService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(backupRecoveryService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"BACKUP_RECOVERY_URL":       "https://backuprecoveryv1/api",
				"BACKUP_RECOVERY_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1UsingExternalConfig(&backuprecoveryv1.BackupRecoveryV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(backupRecoveryService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"BACKUP_RECOVERY_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1UsingExternalConfig(&backuprecoveryv1.BackupRecoveryV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(backupRecoveryService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = backuprecoveryv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`DownloadAgent(downloadAgentOptions *DownloadAgentOptions)`, func() {
		downloadAgentPath := "/data-protect/agents/download"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(downloadAgentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/octet-stream")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `This is a mock binary response.`)
				}))
			})
			It(`Invoke DownloadAgent successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the LinuxAgentParams model
				linuxAgentParamsModel := new(backuprecoveryv1.LinuxAgentParams)
				linuxAgentParamsModel.PackageType = core.StringPtr("kScript")

				// Construct an instance of the DownloadAgentOptions model
				downloadAgentOptionsModel := new(backuprecoveryv1.DownloadAgentOptions)
				downloadAgentOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				downloadAgentOptionsModel.Platform = core.StringPtr("kWindows")
				downloadAgentOptionsModel.LinuxParams = linuxAgentParamsModel
				downloadAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.DownloadAgentWithContext(ctx, downloadAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.DownloadAgent(downloadAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.DownloadAgentWithContext(ctx, downloadAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(downloadAgentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/octet-stream")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `This is a mock binary response.`)
				}))
			})
			It(`Invoke DownloadAgent successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.DownloadAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LinuxAgentParams model
				linuxAgentParamsModel := new(backuprecoveryv1.LinuxAgentParams)
				linuxAgentParamsModel.PackageType = core.StringPtr("kScript")

				// Construct an instance of the DownloadAgentOptions model
				downloadAgentOptionsModel := new(backuprecoveryv1.DownloadAgentOptions)
				downloadAgentOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				downloadAgentOptionsModel.Platform = core.StringPtr("kWindows")
				downloadAgentOptionsModel.LinuxParams = linuxAgentParamsModel
				downloadAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.DownloadAgent(downloadAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DownloadAgent with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the LinuxAgentParams model
				linuxAgentParamsModel := new(backuprecoveryv1.LinuxAgentParams)
				linuxAgentParamsModel.PackageType = core.StringPtr("kScript")

				// Construct an instance of the DownloadAgentOptions model
				downloadAgentOptionsModel := new(backuprecoveryv1.DownloadAgentOptions)
				downloadAgentOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				downloadAgentOptionsModel.Platform = core.StringPtr("kWindows")
				downloadAgentOptionsModel.LinuxParams = linuxAgentParamsModel
				downloadAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.DownloadAgent(downloadAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DownloadAgentOptions model with no property values
				downloadAgentOptionsModelNew := new(backuprecoveryv1.DownloadAgentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.DownloadAgent(downloadAgentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DownloadAgent successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the LinuxAgentParams model
				linuxAgentParamsModel := new(backuprecoveryv1.LinuxAgentParams)
				linuxAgentParamsModel.PackageType = core.StringPtr("kScript")

				// Construct an instance of the DownloadAgentOptions model
				downloadAgentOptionsModel := new(backuprecoveryv1.DownloadAgentOptions)
				downloadAgentOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				downloadAgentOptionsModel.Platform = core.StringPtr("kWindows")
				downloadAgentOptionsModel.LinuxParams = linuxAgentParamsModel
				downloadAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.DownloadAgent(downloadAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify empty byte buffer.
				Expect(result).ToNot(BeNil())
				buffer, operationErr := io.ReadAll(result)
				Expect(operationErr).To(BeNil())
				Expect(buffer).ToNot(BeNil())
				Expect(len(buffer)).To(Equal(0))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUpgradeTasks(getUpgradeTasksOptions *GetUpgradeTasksOptions) - Operation response error`, func() {
		getUpgradeTasksPath := "/data-protect/agents/upgrade-tasks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUpgradeTasksPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetUpgradeTasks with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetUpgradeTasksOptions model
				getUpgradeTasksOptionsModel := new(backuprecoveryv1.GetUpgradeTasksOptions)
				getUpgradeTasksOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getUpgradeTasksOptionsModel.Ids = []int64{int64(26)}
				getUpgradeTasksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetUpgradeTasks(getUpgradeTasksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetUpgradeTasks(getUpgradeTasksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUpgradeTasks(getUpgradeTasksOptions *GetUpgradeTasksOptions)`, func() {
		getUpgradeTasksPath := "/data-protect/agents/upgrade-tasks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUpgradeTasksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"tasks": [{"agentIDs": [8], "agents": [{"id": 2, "info": {"endTimeUsecs": 12, "error": {"errorCode": "ErrorCode", "message": "Message", "taskLogId": "TaskLogID"}, "name": "Name", "previousSoftwareVersion": "PreviousSoftwareVersion", "startTimeUsecs": 14, "status": "Scheduled"}}], "clusterVersion": "ClusterVersion", "description": "Description", "endTimeUsecs": 12, "error": {"errorCode": "ErrorCode", "message": "Message", "taskLogId": "TaskLogID"}, "id": 2, "isRetryable": false, "name": "Name", "retriedTaskID": 13, "scheduleEndTimeUsecs": 20, "scheduleTimeUsecs": 17, "startTimeUsecs": 14, "status": "Scheduled", "type": "Auto"}]}`)
				}))
			})
			It(`Invoke GetUpgradeTasks successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetUpgradeTasksOptions model
				getUpgradeTasksOptionsModel := new(backuprecoveryv1.GetUpgradeTasksOptions)
				getUpgradeTasksOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getUpgradeTasksOptionsModel.Ids = []int64{int64(26)}
				getUpgradeTasksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetUpgradeTasksWithContext(ctx, getUpgradeTasksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetUpgradeTasks(getUpgradeTasksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetUpgradeTasksWithContext(ctx, getUpgradeTasksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUpgradeTasksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"tasks": [{"agentIDs": [8], "agents": [{"id": 2, "info": {"endTimeUsecs": 12, "error": {"errorCode": "ErrorCode", "message": "Message", "taskLogId": "TaskLogID"}, "name": "Name", "previousSoftwareVersion": "PreviousSoftwareVersion", "startTimeUsecs": 14, "status": "Scheduled"}}], "clusterVersion": "ClusterVersion", "description": "Description", "endTimeUsecs": 12, "error": {"errorCode": "ErrorCode", "message": "Message", "taskLogId": "TaskLogID"}, "id": 2, "isRetryable": false, "name": "Name", "retriedTaskID": 13, "scheduleEndTimeUsecs": 20, "scheduleTimeUsecs": 17, "startTimeUsecs": 14, "status": "Scheduled", "type": "Auto"}]}`)
				}))
			})
			It(`Invoke GetUpgradeTasks successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetUpgradeTasks(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetUpgradeTasksOptions model
				getUpgradeTasksOptionsModel := new(backuprecoveryv1.GetUpgradeTasksOptions)
				getUpgradeTasksOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getUpgradeTasksOptionsModel.Ids = []int64{int64(26)}
				getUpgradeTasksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetUpgradeTasks(getUpgradeTasksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetUpgradeTasks with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetUpgradeTasksOptions model
				getUpgradeTasksOptionsModel := new(backuprecoveryv1.GetUpgradeTasksOptions)
				getUpgradeTasksOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getUpgradeTasksOptionsModel.Ids = []int64{int64(26)}
				getUpgradeTasksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetUpgradeTasks(getUpgradeTasksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetUpgradeTasksOptions model with no property values
				getUpgradeTasksOptionsModelNew := new(backuprecoveryv1.GetUpgradeTasksOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetUpgradeTasks(getUpgradeTasksOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetUpgradeTasks successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetUpgradeTasksOptions model
				getUpgradeTasksOptionsModel := new(backuprecoveryv1.GetUpgradeTasksOptions)
				getUpgradeTasksOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getUpgradeTasksOptionsModel.Ids = []int64{int64(26)}
				getUpgradeTasksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetUpgradeTasks(getUpgradeTasksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateUpgradeTask(createUpgradeTaskOptions *CreateUpgradeTaskOptions) - Operation response error`, func() {
		createUpgradeTaskPath := "/data-protect/agents/upgrade-tasks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createUpgradeTaskPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateUpgradeTask with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CreateUpgradeTaskOptions model
				createUpgradeTaskOptionsModel := new(backuprecoveryv1.CreateUpgradeTaskOptions)
				createUpgradeTaskOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createUpgradeTaskOptionsModel.AgentIDs = []int64{int64(26)}
				createUpgradeTaskOptionsModel.Description = core.StringPtr("Upgrade task")
				createUpgradeTaskOptionsModel.Name = core.StringPtr("create-upgrade-task")
				createUpgradeTaskOptionsModel.RetryTaskID = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleEndTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.CreateUpgradeTask(createUpgradeTaskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.CreateUpgradeTask(createUpgradeTaskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateUpgradeTask(createUpgradeTaskOptions *CreateUpgradeTaskOptions)`, func() {
		createUpgradeTaskPath := "/data-protect/agents/upgrade-tasks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createUpgradeTaskPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentIDs": [8], "agents": [{"id": 2, "info": {"endTimeUsecs": 12, "error": {"errorCode": "ErrorCode", "message": "Message", "taskLogId": "TaskLogID"}, "name": "Name", "previousSoftwareVersion": "PreviousSoftwareVersion", "startTimeUsecs": 14, "status": "Scheduled"}}], "clusterVersion": "ClusterVersion", "description": "Description", "endTimeUsecs": 12, "error": {"errorCode": "ErrorCode", "message": "Message", "taskLogId": "TaskLogID"}, "id": 2, "isRetryable": false, "name": "Name", "retriedTaskID": 13, "scheduleEndTimeUsecs": 20, "scheduleTimeUsecs": 17, "startTimeUsecs": 14, "status": "Scheduled", "type": "Auto"}`)
				}))
			})
			It(`Invoke CreateUpgradeTask successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the CreateUpgradeTaskOptions model
				createUpgradeTaskOptionsModel := new(backuprecoveryv1.CreateUpgradeTaskOptions)
				createUpgradeTaskOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createUpgradeTaskOptionsModel.AgentIDs = []int64{int64(26)}
				createUpgradeTaskOptionsModel.Description = core.StringPtr("Upgrade task")
				createUpgradeTaskOptionsModel.Name = core.StringPtr("create-upgrade-task")
				createUpgradeTaskOptionsModel.RetryTaskID = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleEndTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.CreateUpgradeTaskWithContext(ctx, createUpgradeTaskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.CreateUpgradeTask(createUpgradeTaskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.CreateUpgradeTaskWithContext(ctx, createUpgradeTaskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createUpgradeTaskPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentIDs": [8], "agents": [{"id": 2, "info": {"endTimeUsecs": 12, "error": {"errorCode": "ErrorCode", "message": "Message", "taskLogId": "TaskLogID"}, "name": "Name", "previousSoftwareVersion": "PreviousSoftwareVersion", "startTimeUsecs": 14, "status": "Scheduled"}}], "clusterVersion": "ClusterVersion", "description": "Description", "endTimeUsecs": 12, "error": {"errorCode": "ErrorCode", "message": "Message", "taskLogId": "TaskLogID"}, "id": 2, "isRetryable": false, "name": "Name", "retriedTaskID": 13, "scheduleEndTimeUsecs": 20, "scheduleTimeUsecs": 17, "startTimeUsecs": 14, "status": "Scheduled", "type": "Auto"}`)
				}))
			})
			It(`Invoke CreateUpgradeTask successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.CreateUpgradeTask(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateUpgradeTaskOptions model
				createUpgradeTaskOptionsModel := new(backuprecoveryv1.CreateUpgradeTaskOptions)
				createUpgradeTaskOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createUpgradeTaskOptionsModel.AgentIDs = []int64{int64(26)}
				createUpgradeTaskOptionsModel.Description = core.StringPtr("Upgrade task")
				createUpgradeTaskOptionsModel.Name = core.StringPtr("create-upgrade-task")
				createUpgradeTaskOptionsModel.RetryTaskID = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleEndTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.CreateUpgradeTask(createUpgradeTaskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateUpgradeTask with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CreateUpgradeTaskOptions model
				createUpgradeTaskOptionsModel := new(backuprecoveryv1.CreateUpgradeTaskOptions)
				createUpgradeTaskOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createUpgradeTaskOptionsModel.AgentIDs = []int64{int64(26)}
				createUpgradeTaskOptionsModel.Description = core.StringPtr("Upgrade task")
				createUpgradeTaskOptionsModel.Name = core.StringPtr("create-upgrade-task")
				createUpgradeTaskOptionsModel.RetryTaskID = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleEndTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.CreateUpgradeTask(createUpgradeTaskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateUpgradeTaskOptions model with no property values
				createUpgradeTaskOptionsModelNew := new(backuprecoveryv1.CreateUpgradeTaskOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.CreateUpgradeTask(createUpgradeTaskOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateUpgradeTask successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CreateUpgradeTaskOptions model
				createUpgradeTaskOptionsModel := new(backuprecoveryv1.CreateUpgradeTaskOptions)
				createUpgradeTaskOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createUpgradeTaskOptionsModel.AgentIDs = []int64{int64(26)}
				createUpgradeTaskOptionsModel.Description = core.StringPtr("Upgrade task")
				createUpgradeTaskOptionsModel.Name = core.StringPtr("create-upgrade-task")
				createUpgradeTaskOptionsModel.RetryTaskID = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleEndTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.ScheduleTimeUsecs = core.Int64Ptr(int64(26))
				createUpgradeTaskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.CreateUpgradeTask(createUpgradeTaskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProtectionSources(listProtectionSourcesOptions *ListProtectionSourcesOptions) - Operation response error`, func() {
		listProtectionSourcesPath := "/irisservices/api/v1/public/protectionSources"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProtectionSourcesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for getTeamsChannels query parameter
					// TODO: Add check for afterCursorEntityId query parameter
					// TODO: Add check for beforeCursorEntityId query parameter
					// TODO: Add check for nodeId query parameter
					// TODO: Add check for pageSize query parameter
					// TODO: Add check for hasValidMailbox query parameter
					// TODO: Add check for hasValidOnedrive query parameter
					// TODO: Add check for isSecurityGroup query parameter
					// TODO: Add check for id query parameter
					// TODO: Add check for numLevels query parameter
					// TODO: Add check for includeDatastores query parameter
					// TODO: Add check for includeNetworks query parameter
					// TODO: Add check for includeVMFolders query parameter
					// TODO: Add check for includeSfdcFields query parameter
					// TODO: Add check for includeSystemVApps query parameter
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"kPhysical"}))
					// TODO: Add check for includeEntityPermissionInfo query parameter
					// TODO: Add check for includeSourceCredentials query parameter
					Expect(req.URL.Query()["encryptionKey"]).To(Equal([]string{"encryptionKey"}))
					// TODO: Add check for includeObjectProtectionInfo query parameter
					// TODO: Add check for pruneNonCriticalInfo query parameter
					// TODO: Add check for pruneAggregationInfo query parameter
					Expect(req.URL.Query()["requestInitiatorType"]).To(Equal([]string{"requestInitiatorType"}))
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for allUnderHierarchy query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListProtectionSources with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ListProtectionSourcesOptions model
				listProtectionSourcesOptionsModel := new(backuprecoveryv1.ListProtectionSourcesOptions)
				listProtectionSourcesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				listProtectionSourcesOptionsModel.ExcludeOffice365Types = []string{"kDomain"}
				listProtectionSourcesOptionsModel.GetTeamsChannels = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AfterCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.BeforeCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NodeID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.PageSize = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.HasValidMailbox = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.HasValidOnedrive = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IsSecurityGroup = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.ID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NumLevels = core.Float64Ptr(float64(72.5))
				listProtectionSourcesOptionsModel.ExcludeTypes = []string{"kVCenter"}
				listProtectionSourcesOptionsModel.ExcludeAwsTypes = []string{"kEC2Instance"}
				listProtectionSourcesOptionsModel.ExcludeKubernetesTypes = []string{"kService"}
				listProtectionSourcesOptionsModel.IncludeDatastores = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeNetworks = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeVMFolders = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSfdcFields = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSystemVApps = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Environments = []string{"kVMware"}
				listProtectionSourcesOptionsModel.Environment = core.StringPtr("kPhysical")
				listProtectionSourcesOptionsModel.IncludeEntityPermissionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Sids = []string{"sid1"}
				listProtectionSourcesOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				listProtectionSourcesOptionsModel.IncludeObjectProtectionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneNonCriticalInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneAggregationInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.RequestInitiatorType = core.StringPtr("requestInitiatorType")
				listProtectionSourcesOptionsModel.UseCachedData = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AllUnderHierarchy = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.ListProtectionSources(listProtectionSourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.ListProtectionSources(listProtectionSourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProtectionSources(listProtectionSourcesOptions *ListProtectionSourcesOptions)`, func() {
		listProtectionSourcesPath := "/irisservices/api/v1/public/protectionSources"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProtectionSourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for getTeamsChannels query parameter
					// TODO: Add check for afterCursorEntityId query parameter
					// TODO: Add check for beforeCursorEntityId query parameter
					// TODO: Add check for nodeId query parameter
					// TODO: Add check for pageSize query parameter
					// TODO: Add check for hasValidMailbox query parameter
					// TODO: Add check for hasValidOnedrive query parameter
					// TODO: Add check for isSecurityGroup query parameter
					// TODO: Add check for id query parameter
					// TODO: Add check for numLevels query parameter
					// TODO: Add check for includeDatastores query parameter
					// TODO: Add check for includeNetworks query parameter
					// TODO: Add check for includeVMFolders query parameter
					// TODO: Add check for includeSfdcFields query parameter
					// TODO: Add check for includeSystemVApps query parameter
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"kPhysical"}))
					// TODO: Add check for includeEntityPermissionInfo query parameter
					// TODO: Add check for includeSourceCredentials query parameter
					Expect(req.URL.Query()["encryptionKey"]).To(Equal([]string{"encryptionKey"}))
					// TODO: Add check for includeObjectProtectionInfo query parameter
					// TODO: Add check for pruneNonCriticalInfo query parameter
					// TODO: Add check for pruneAggregationInfo query parameter
					Expect(req.URL.Query()["requestInitiatorType"]).To(Equal([]string{"requestInitiatorType"}))
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for allUnderHierarchy query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"entityPaginationParameters": {"afterCursorEntityId": 19, "beforeCursorEntityId": 20, "nodeId": 6, "pageSize": 8}, "entityPermissionInfo": {"entityId": 8, "groups": [{"domain": "Domain", "groupName": "GroupName", "sid": "Sid", "tenantIds": ["TenantIds"]}], "isInferred": true, "isRegisteredBySp": true, "registeringTenantId": "RegisteringTenantID", "tenant": {"bifrostEnabled": true, "isManagedOnHelios": false, "name": true, "tenantId": true}, "users": [{"domain": "Domain", "sid": "Sid", "tenantId": "TenantID", "userName": "UserName"}]}, "logicalSize": 11, "objectProtectionInfo": {"autoProtectParentId": 19, "entityId": 8, "hasActiveObjectProtectionSpec": 29}, "protectedSourcesSummary": [{"environment": "kVMware", "leavesCount": 11, "totalLogicalSize": 16}], "protectionSource": {"connectionId": 12, "connectorGroupId": 16, "customName": "CustomName", "environment": "kPhysical", "id": 2, "name": "Name", "parentId": 8, "physicalProtectionSource": {"agents": [{"cbmrVersion": "CbmrVersion", "fileCbtInfo": {"fileVersion": {"buildVer": 8, "majorVer": 8, "minorVer": 8, "revisionNum": 11}, "isInstalled": false, "rebootStatus": "kRebooted", "serviceState": {"name": "Name", "state": "State"}}, "hostType": "kLinux", "id": 2, "name": "Name", "oracleMultiNodeChannelSupported": false, "registrationInfo": {"accessInfo": {"connectionId": 12, "connectorGroupId": 16, "endpoint": "Endpoint", "environment": "kPhysical", "id": 2, "version": 7}, "allowedIpAddresses": ["AllowedIpAddresses"], "authenticationErrorMessage": "AuthenticationErrorMessage", "authenticationStatus": "kPending", "blacklistedIpAddresses": ["BlacklistedIpAddresses"], "deniedIpAddresses": ["DeniedIpAddresses"], "environments": ["kPhysical"], "isDbAuthenticated": false, "isStorageArraySnapshotEnabled": false, "linkVmsAcrossVcenter": true, "minimumFreeSpaceGB": 18, "minimumFreeSpacePercent": 23, "password": "Password", "physicalParams": {"applications": ["kSQL"], "password": "Password", "throttlingConfig": {"cpuThrottlingConfig": {"fixedThreshold": 14, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}, "startTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}}, "threshold": 9}]}, "networkThrottlingConfig": {"fixedThreshold": 14, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}, "startTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}}, "threshold": 9}]}}, "username": "Username"}, "progressMonitorPath": "ProgressMonitorPath", "refreshErrorMessage": "RefreshErrorMessage", "refreshTimeUsecs": 16, "registeredAppsInfo": [{"authenticationErrorMessage": "AuthenticationErrorMessage", "authenticationStatus": "kPending", "environment": "kPhysical", "hostSettingsCheckResults": [{"checkType": "kIsAgentPortAccessible", "resultType": "kPass", "userMessage": "UserMessage"}], "refreshErrorMessage": "RefreshErrorMessage"}], "registrationTimeUsecs": 21, "subnets": [{"component": "Component", "description": "Description", "id": 2, "ip": "Ip", "netmaskBits": 11, "netmaskIp4": "NetmaskIp4", "nfsAccess": "kDisabled", "nfsAllSquash": true, "nfsRootSquash": false, "s3Access": "kDisabled", "smbAccess": "kDisabled", "tenantId": "TenantID"}], "throttlingPolicy": {"enforceMaxStreams": false, "enforceRegisteredSourceMaxBackups": false, "isEnabled": false, "latencyThresholds": {"activeTaskMsecs": 15, "newTaskMsecs": 12}, "maxConcurrentStreams": 20, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 38, "maxParallelMetadataFetchIncrementalPercentage": 45, "maxParallelReadWriteFullPercentage": 34, "maxParallelReadWriteIncrementalPercentage": 41}, "registeredSourceMaxConcurrentBackups": 36, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 26}, "storageArraySnapshotThrottlingPolicies": [{"id": 2, "isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "maxSnapshotConfig": {"maxSnapshots": 12}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 26}}]}}, "throttlingPolicyOverrides": [{"datastoreId": 11, "datastoreName": "DatastoreName", "throttlingPolicy": {"enforceMaxStreams": false, "enforceRegisteredSourceMaxBackups": false, "isEnabled": false, "latencyThresholds": {"activeTaskMsecs": 15, "newTaskMsecs": 12}, "maxConcurrentStreams": 20, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 38, "maxParallelMetadataFetchIncrementalPercentage": 45, "maxParallelReadWriteFullPercentage": 34, "maxParallelReadWriteIncrementalPercentage": 41}, "registeredSourceMaxConcurrentBackups": 36, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 26}, "storageArraySnapshotThrottlingPolicies": [{"id": 2, "isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "maxSnapshotConfig": {"maxSnapshots": 12}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 26}}]}}}], "useOAuthForExchangeOnline": false, "useVmBiosUuid": false, "userMessages": ["UserMessages"], "username": "Username", "vlanParams": {"vlan": 4, "disableVlan": false, "interfaceName": "InterfaceName"}, "warningMessages": ["WarningMessages"]}, "sourceSideDedupEnabled": true, "status": "kUnknown", "statusMessage": "StatusMessage", "upgradability": "kUpgradable", "upgradeStatus": "kIdle", "upgradeStatusMessage": "UpgradeStatusMessage", "version": "Version", "volCbtInfo": {"fileVersion": {"buildVer": 8, "majorVer": 8, "minorVer": 8, "revisionNum": 11}, "isInstalled": false, "rebootStatus": "kRebooted", "serviceState": {"name": "Name", "state": "State"}}}], "clusterSourceType": "ClusterSourceType", "hostName": "HostName", "hostType": "kLinux", "id": {"clusterId": 9, "clusterIncarnationId": 20, "id": 2}, "isProxyHost": false, "memorySizeBytes": 15, "name": "Name", "networkingInfo": {"resourceVec": [{"endpoints": [{"fqdn": "Fqdn", "ipv4Addr": "Ipv4Addr", "ipv6Addr": "Ipv6Addr"}], "type": "Type"}]}, "numProcessors": 13, "osName": "OsName", "type": "kGroup", "vcsVersion": "VcsVersion", "volumes": [{"devicePath": "DevicePath", "guid": "Guid", "isBootVolume": true, "isExtendedAttributesSupported": false, "isProtected": false, "isSharedVolume": true, "label": "Label", "logicalSizeBytes": 16, "mountPoints": ["MountPoints"], "mountType": "MountType", "networkPath": "NetworkPath", "usedSizeBytes": 13}], "vsswriters": [{"isWriterExcluded": true, "writerName": true}]}, "sqlProtectionSource": {"IsAvailableForVssBackup": false, "createdTimestamp": "CreatedTimestamp", "databaseName": "DatabaseName", "dbAagEntityId": 13, "dbAagName": "DbAagName", "dbCompatibilityLevel": 20, "dbFileGroups": ["DbFileGroups"], "dbFiles": [{"fileType": "kRows", "fullPath": "FullPath", "sizeBytes": 9}], "dbOwnerUsername": "DbOwnerUsername", "defaultDatabaseLocation": "DefaultDatabaseLocation", "defaultLogLocation": "DefaultLogLocation", "id": {"createdDateMsecs": 16, "databaseId": 10, "instanceId": "InstanceID"}, "isEncrypted": false, "name": "Name", "ownerId": 7, "recoveryModel": "kSimpleRecoveryModel", "sqlServerDbState": "kOnline", "sqlServerInstanceVersion": {"build": 5, "majorVersion": 12, "minorVersion": 12, "revision": 8, "versionString": 13}, "type": "kInstance"}}, "registrationInfo": {"accessInfo": {"connectionId": 12, "connectorGroupId": 16, "endpoint": "Endpoint", "environment": "kPhysical", "id": 2, "version": 7}, "allowedIpAddresses": ["AllowedIpAddresses"], "authenticationErrorMessage": "AuthenticationErrorMessage", "authenticationStatus": "kPending", "blacklistedIpAddresses": ["BlacklistedIpAddresses"], "deniedIpAddresses": ["DeniedIpAddresses"], "environments": ["kPhysical"], "isDbAuthenticated": false, "isStorageArraySnapshotEnabled": false, "linkVmsAcrossVcenter": true, "minimumFreeSpaceGB": 18, "minimumFreeSpacePercent": 23, "password": "Password", "physicalParams": {"applications": ["kSQL"], "password": "Password", "throttlingConfig": {"cpuThrottlingConfig": {"fixedThreshold": 14, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}, "startTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}}, "threshold": 9}]}, "networkThrottlingConfig": {"fixedThreshold": 14, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}, "startTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}}, "threshold": 9}]}}, "username": "Username"}, "progressMonitorPath": "ProgressMonitorPath", "refreshErrorMessage": "RefreshErrorMessage", "refreshTimeUsecs": 16, "registeredAppsInfo": [{"authenticationErrorMessage": "AuthenticationErrorMessage", "authenticationStatus": "kPending", "environment": "kPhysical", "hostSettingsCheckResults": [{"checkType": "kIsAgentPortAccessible", "resultType": "kPass", "userMessage": "UserMessage"}], "refreshErrorMessage": "RefreshErrorMessage"}], "registrationTimeUsecs": 21, "subnets": [{"component": "Component", "description": "Description", "id": 2, "ip": "Ip", "netmaskBits": 11, "netmaskIp4": "NetmaskIp4", "nfsAccess": "kDisabled", "nfsAllSquash": true, "nfsRootSquash": false, "s3Access": "kDisabled", "smbAccess": "kDisabled", "tenantId": "TenantID"}], "throttlingPolicy": {"enforceMaxStreams": false, "enforceRegisteredSourceMaxBackups": false, "isEnabled": false, "latencyThresholds": {"activeTaskMsecs": 15, "newTaskMsecs": 12}, "maxConcurrentStreams": 20, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 38, "maxParallelMetadataFetchIncrementalPercentage": 45, "maxParallelReadWriteFullPercentage": 34, "maxParallelReadWriteIncrementalPercentage": 41}, "registeredSourceMaxConcurrentBackups": 36, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 26}, "storageArraySnapshotThrottlingPolicies": [{"id": 2, "isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "maxSnapshotConfig": {"maxSnapshots": 12}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 26}}]}}, "throttlingPolicyOverrides": [{"datastoreId": 11, "datastoreName": "DatastoreName", "throttlingPolicy": {"enforceMaxStreams": false, "enforceRegisteredSourceMaxBackups": false, "isEnabled": false, "latencyThresholds": {"activeTaskMsecs": 15, "newTaskMsecs": 12}, "maxConcurrentStreams": 20, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 38, "maxParallelMetadataFetchIncrementalPercentage": 45, "maxParallelReadWriteFullPercentage": 34, "maxParallelReadWriteIncrementalPercentage": 41}, "registeredSourceMaxConcurrentBackups": 36, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 26}, "storageArraySnapshotThrottlingPolicies": [{"id": 2, "isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "maxSnapshotConfig": {"maxSnapshots": 12}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 26}}]}}}], "useOAuthForExchangeOnline": false, "useVmBiosUuid": false, "userMessages": ["UserMessages"], "username": "Username", "vlanParams": {"vlan": 4, "disableVlan": false, "interfaceName": "InterfaceName"}, "warningMessages": ["WarningMessages"]}, "totalDowntieredSizeInBytes": 26, "totalUptieredSizeInBytes": 24, "unprotectedSourcesSummary": [{"environment": "kVMware", "leavesCount": 11, "totalLogicalSize": 16}]}]`)
				}))
			})
			It(`Invoke ListProtectionSources successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the ListProtectionSourcesOptions model
				listProtectionSourcesOptionsModel := new(backuprecoveryv1.ListProtectionSourcesOptions)
				listProtectionSourcesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				listProtectionSourcesOptionsModel.ExcludeOffice365Types = []string{"kDomain"}
				listProtectionSourcesOptionsModel.GetTeamsChannels = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AfterCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.BeforeCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NodeID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.PageSize = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.HasValidMailbox = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.HasValidOnedrive = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IsSecurityGroup = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.ID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NumLevels = core.Float64Ptr(float64(72.5))
				listProtectionSourcesOptionsModel.ExcludeTypes = []string{"kVCenter"}
				listProtectionSourcesOptionsModel.ExcludeAwsTypes = []string{"kEC2Instance"}
				listProtectionSourcesOptionsModel.ExcludeKubernetesTypes = []string{"kService"}
				listProtectionSourcesOptionsModel.IncludeDatastores = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeNetworks = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeVMFolders = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSfdcFields = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSystemVApps = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Environments = []string{"kVMware"}
				listProtectionSourcesOptionsModel.Environment = core.StringPtr("kPhysical")
				listProtectionSourcesOptionsModel.IncludeEntityPermissionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Sids = []string{"sid1"}
				listProtectionSourcesOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				listProtectionSourcesOptionsModel.IncludeObjectProtectionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneNonCriticalInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneAggregationInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.RequestInitiatorType = core.StringPtr("requestInitiatorType")
				listProtectionSourcesOptionsModel.UseCachedData = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AllUnderHierarchy = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.ListProtectionSourcesWithContext(ctx, listProtectionSourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.ListProtectionSources(listProtectionSourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.ListProtectionSourcesWithContext(ctx, listProtectionSourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProtectionSourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for getTeamsChannels query parameter
					// TODO: Add check for afterCursorEntityId query parameter
					// TODO: Add check for beforeCursorEntityId query parameter
					// TODO: Add check for nodeId query parameter
					// TODO: Add check for pageSize query parameter
					// TODO: Add check for hasValidMailbox query parameter
					// TODO: Add check for hasValidOnedrive query parameter
					// TODO: Add check for isSecurityGroup query parameter
					// TODO: Add check for id query parameter
					// TODO: Add check for numLevels query parameter
					// TODO: Add check for includeDatastores query parameter
					// TODO: Add check for includeNetworks query parameter
					// TODO: Add check for includeVMFolders query parameter
					// TODO: Add check for includeSfdcFields query parameter
					// TODO: Add check for includeSystemVApps query parameter
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"kPhysical"}))
					// TODO: Add check for includeEntityPermissionInfo query parameter
					// TODO: Add check for includeSourceCredentials query parameter
					Expect(req.URL.Query()["encryptionKey"]).To(Equal([]string{"encryptionKey"}))
					// TODO: Add check for includeObjectProtectionInfo query parameter
					// TODO: Add check for pruneNonCriticalInfo query parameter
					// TODO: Add check for pruneAggregationInfo query parameter
					Expect(req.URL.Query()["requestInitiatorType"]).To(Equal([]string{"requestInitiatorType"}))
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for allUnderHierarchy query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"entityPaginationParameters": {"afterCursorEntityId": 19, "beforeCursorEntityId": 20, "nodeId": 6, "pageSize": 8}, "entityPermissionInfo": {"entityId": 8, "groups": [{"domain": "Domain", "groupName": "GroupName", "sid": "Sid", "tenantIds": ["TenantIds"]}], "isInferred": true, "isRegisteredBySp": true, "registeringTenantId": "RegisteringTenantID", "tenant": {"bifrostEnabled": true, "isManagedOnHelios": false, "name": true, "tenantId": true}, "users": [{"domain": "Domain", "sid": "Sid", "tenantId": "TenantID", "userName": "UserName"}]}, "logicalSize": 11, "objectProtectionInfo": {"autoProtectParentId": 19, "entityId": 8, "hasActiveObjectProtectionSpec": 29}, "protectedSourcesSummary": [{"environment": "kVMware", "leavesCount": 11, "totalLogicalSize": 16}], "protectionSource": {"connectionId": 12, "connectorGroupId": 16, "customName": "CustomName", "environment": "kPhysical", "id": 2, "name": "Name", "parentId": 8, "physicalProtectionSource": {"agents": [{"cbmrVersion": "CbmrVersion", "fileCbtInfo": {"fileVersion": {"buildVer": 8, "majorVer": 8, "minorVer": 8, "revisionNum": 11}, "isInstalled": false, "rebootStatus": "kRebooted", "serviceState": {"name": "Name", "state": "State"}}, "hostType": "kLinux", "id": 2, "name": "Name", "oracleMultiNodeChannelSupported": false, "registrationInfo": {"accessInfo": {"connectionId": 12, "connectorGroupId": 16, "endpoint": "Endpoint", "environment": "kPhysical", "id": 2, "version": 7}, "allowedIpAddresses": ["AllowedIpAddresses"], "authenticationErrorMessage": "AuthenticationErrorMessage", "authenticationStatus": "kPending", "blacklistedIpAddresses": ["BlacklistedIpAddresses"], "deniedIpAddresses": ["DeniedIpAddresses"], "environments": ["kPhysical"], "isDbAuthenticated": false, "isStorageArraySnapshotEnabled": false, "linkVmsAcrossVcenter": true, "minimumFreeSpaceGB": 18, "minimumFreeSpacePercent": 23, "password": "Password", "physicalParams": {"applications": ["kSQL"], "password": "Password", "throttlingConfig": {"cpuThrottlingConfig": {"fixedThreshold": 14, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}, "startTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}}, "threshold": 9}]}, "networkThrottlingConfig": {"fixedThreshold": 14, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}, "startTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}}, "threshold": 9}]}}, "username": "Username"}, "progressMonitorPath": "ProgressMonitorPath", "refreshErrorMessage": "RefreshErrorMessage", "refreshTimeUsecs": 16, "registeredAppsInfo": [{"authenticationErrorMessage": "AuthenticationErrorMessage", "authenticationStatus": "kPending", "environment": "kPhysical", "hostSettingsCheckResults": [{"checkType": "kIsAgentPortAccessible", "resultType": "kPass", "userMessage": "UserMessage"}], "refreshErrorMessage": "RefreshErrorMessage"}], "registrationTimeUsecs": 21, "subnets": [{"component": "Component", "description": "Description", "id": 2, "ip": "Ip", "netmaskBits": 11, "netmaskIp4": "NetmaskIp4", "nfsAccess": "kDisabled", "nfsAllSquash": true, "nfsRootSquash": false, "s3Access": "kDisabled", "smbAccess": "kDisabled", "tenantId": "TenantID"}], "throttlingPolicy": {"enforceMaxStreams": false, "enforceRegisteredSourceMaxBackups": false, "isEnabled": false, "latencyThresholds": {"activeTaskMsecs": 15, "newTaskMsecs": 12}, "maxConcurrentStreams": 20, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 38, "maxParallelMetadataFetchIncrementalPercentage": 45, "maxParallelReadWriteFullPercentage": 34, "maxParallelReadWriteIncrementalPercentage": 41}, "registeredSourceMaxConcurrentBackups": 36, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 26}, "storageArraySnapshotThrottlingPolicies": [{"id": 2, "isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "maxSnapshotConfig": {"maxSnapshots": 12}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 26}}]}}, "throttlingPolicyOverrides": [{"datastoreId": 11, "datastoreName": "DatastoreName", "throttlingPolicy": {"enforceMaxStreams": false, "enforceRegisteredSourceMaxBackups": false, "isEnabled": false, "latencyThresholds": {"activeTaskMsecs": 15, "newTaskMsecs": 12}, "maxConcurrentStreams": 20, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 38, "maxParallelMetadataFetchIncrementalPercentage": 45, "maxParallelReadWriteFullPercentage": 34, "maxParallelReadWriteIncrementalPercentage": 41}, "registeredSourceMaxConcurrentBackups": 36, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 26}, "storageArraySnapshotThrottlingPolicies": [{"id": 2, "isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "maxSnapshotConfig": {"maxSnapshots": 12}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 26}}]}}}], "useOAuthForExchangeOnline": false, "useVmBiosUuid": false, "userMessages": ["UserMessages"], "username": "Username", "vlanParams": {"vlan": 4, "disableVlan": false, "interfaceName": "InterfaceName"}, "warningMessages": ["WarningMessages"]}, "sourceSideDedupEnabled": true, "status": "kUnknown", "statusMessage": "StatusMessage", "upgradability": "kUpgradable", "upgradeStatus": "kIdle", "upgradeStatusMessage": "UpgradeStatusMessage", "version": "Version", "volCbtInfo": {"fileVersion": {"buildVer": 8, "majorVer": 8, "minorVer": 8, "revisionNum": 11}, "isInstalled": false, "rebootStatus": "kRebooted", "serviceState": {"name": "Name", "state": "State"}}}], "clusterSourceType": "ClusterSourceType", "hostName": "HostName", "hostType": "kLinux", "id": {"clusterId": 9, "clusterIncarnationId": 20, "id": 2}, "isProxyHost": false, "memorySizeBytes": 15, "name": "Name", "networkingInfo": {"resourceVec": [{"endpoints": [{"fqdn": "Fqdn", "ipv4Addr": "Ipv4Addr", "ipv6Addr": "Ipv6Addr"}], "type": "Type"}]}, "numProcessors": 13, "osName": "OsName", "type": "kGroup", "vcsVersion": "VcsVersion", "volumes": [{"devicePath": "DevicePath", "guid": "Guid", "isBootVolume": true, "isExtendedAttributesSupported": false, "isProtected": false, "isSharedVolume": true, "label": "Label", "logicalSizeBytes": 16, "mountPoints": ["MountPoints"], "mountType": "MountType", "networkPath": "NetworkPath", "usedSizeBytes": 13}], "vsswriters": [{"isWriterExcluded": true, "writerName": true}]}, "sqlProtectionSource": {"IsAvailableForVssBackup": false, "createdTimestamp": "CreatedTimestamp", "databaseName": "DatabaseName", "dbAagEntityId": 13, "dbAagName": "DbAagName", "dbCompatibilityLevel": 20, "dbFileGroups": ["DbFileGroups"], "dbFiles": [{"fileType": "kRows", "fullPath": "FullPath", "sizeBytes": 9}], "dbOwnerUsername": "DbOwnerUsername", "defaultDatabaseLocation": "DefaultDatabaseLocation", "defaultLogLocation": "DefaultLogLocation", "id": {"createdDateMsecs": 16, "databaseId": 10, "instanceId": "InstanceID"}, "isEncrypted": false, "name": "Name", "ownerId": 7, "recoveryModel": "kSimpleRecoveryModel", "sqlServerDbState": "kOnline", "sqlServerInstanceVersion": {"build": 5, "majorVersion": 12, "minorVersion": 12, "revision": 8, "versionString": 13}, "type": "kInstance"}}, "registrationInfo": {"accessInfo": {"connectionId": 12, "connectorGroupId": 16, "endpoint": "Endpoint", "environment": "kPhysical", "id": 2, "version": 7}, "allowedIpAddresses": ["AllowedIpAddresses"], "authenticationErrorMessage": "AuthenticationErrorMessage", "authenticationStatus": "kPending", "blacklistedIpAddresses": ["BlacklistedIpAddresses"], "deniedIpAddresses": ["DeniedIpAddresses"], "environments": ["kPhysical"], "isDbAuthenticated": false, "isStorageArraySnapshotEnabled": false, "linkVmsAcrossVcenter": true, "minimumFreeSpaceGB": 18, "minimumFreeSpacePercent": 23, "password": "Password", "physicalParams": {"applications": ["kSQL"], "password": "Password", "throttlingConfig": {"cpuThrottlingConfig": {"fixedThreshold": 14, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}, "startTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}}, "threshold": 9}]}, "networkThrottlingConfig": {"fixedThreshold": 14, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}, "startTime": {"day": "kSunday", "time": {"hour": 4, "minute": 6}}}, "threshold": 9}]}}, "username": "Username"}, "progressMonitorPath": "ProgressMonitorPath", "refreshErrorMessage": "RefreshErrorMessage", "refreshTimeUsecs": 16, "registeredAppsInfo": [{"authenticationErrorMessage": "AuthenticationErrorMessage", "authenticationStatus": "kPending", "environment": "kPhysical", "hostSettingsCheckResults": [{"checkType": "kIsAgentPortAccessible", "resultType": "kPass", "userMessage": "UserMessage"}], "refreshErrorMessage": "RefreshErrorMessage"}], "registrationTimeUsecs": 21, "subnets": [{"component": "Component", "description": "Description", "id": 2, "ip": "Ip", "netmaskBits": 11, "netmaskIp4": "NetmaskIp4", "nfsAccess": "kDisabled", "nfsAllSquash": true, "nfsRootSquash": false, "s3Access": "kDisabled", "smbAccess": "kDisabled", "tenantId": "TenantID"}], "throttlingPolicy": {"enforceMaxStreams": false, "enforceRegisteredSourceMaxBackups": false, "isEnabled": false, "latencyThresholds": {"activeTaskMsecs": 15, "newTaskMsecs": 12}, "maxConcurrentStreams": 20, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 38, "maxParallelMetadataFetchIncrementalPercentage": 45, "maxParallelReadWriteFullPercentage": 34, "maxParallelReadWriteIncrementalPercentage": 41}, "registeredSourceMaxConcurrentBackups": 36, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 26}, "storageArraySnapshotThrottlingPolicies": [{"id": 2, "isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "maxSnapshotConfig": {"maxSnapshots": 12}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 26}}]}}, "throttlingPolicyOverrides": [{"datastoreId": 11, "datastoreName": "DatastoreName", "throttlingPolicy": {"enforceMaxStreams": false, "enforceRegisteredSourceMaxBackups": false, "isEnabled": false, "latencyThresholds": {"activeTaskMsecs": 15, "newTaskMsecs": 12}, "maxConcurrentStreams": 20, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 38, "maxParallelMetadataFetchIncrementalPercentage": 45, "maxParallelReadWriteFullPercentage": 34, "maxParallelReadWriteIncrementalPercentage": 41}, "registeredSourceMaxConcurrentBackups": 36, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 26}, "storageArraySnapshotThrottlingPolicies": [{"id": 2, "isMaxSnapshotsConfigEnabled": false, "isMaxSpaceConfigEnabled": false, "maxSnapshotConfig": {"maxSnapshots": 12}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 26}}]}}}], "useOAuthForExchangeOnline": false, "useVmBiosUuid": false, "userMessages": ["UserMessages"], "username": "Username", "vlanParams": {"vlan": 4, "disableVlan": false, "interfaceName": "InterfaceName"}, "warningMessages": ["WarningMessages"]}, "totalDowntieredSizeInBytes": 26, "totalUptieredSizeInBytes": 24, "unprotectedSourcesSummary": [{"environment": "kVMware", "leavesCount": 11, "totalLogicalSize": 16}]}]`)
				}))
			})
			It(`Invoke ListProtectionSources successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.ListProtectionSources(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListProtectionSourcesOptions model
				listProtectionSourcesOptionsModel := new(backuprecoveryv1.ListProtectionSourcesOptions)
				listProtectionSourcesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				listProtectionSourcesOptionsModel.ExcludeOffice365Types = []string{"kDomain"}
				listProtectionSourcesOptionsModel.GetTeamsChannels = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AfterCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.BeforeCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NodeID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.PageSize = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.HasValidMailbox = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.HasValidOnedrive = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IsSecurityGroup = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.ID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NumLevels = core.Float64Ptr(float64(72.5))
				listProtectionSourcesOptionsModel.ExcludeTypes = []string{"kVCenter"}
				listProtectionSourcesOptionsModel.ExcludeAwsTypes = []string{"kEC2Instance"}
				listProtectionSourcesOptionsModel.ExcludeKubernetesTypes = []string{"kService"}
				listProtectionSourcesOptionsModel.IncludeDatastores = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeNetworks = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeVMFolders = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSfdcFields = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSystemVApps = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Environments = []string{"kVMware"}
				listProtectionSourcesOptionsModel.Environment = core.StringPtr("kPhysical")
				listProtectionSourcesOptionsModel.IncludeEntityPermissionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Sids = []string{"sid1"}
				listProtectionSourcesOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				listProtectionSourcesOptionsModel.IncludeObjectProtectionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneNonCriticalInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneAggregationInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.RequestInitiatorType = core.StringPtr("requestInitiatorType")
				listProtectionSourcesOptionsModel.UseCachedData = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AllUnderHierarchy = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.ListProtectionSources(listProtectionSourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListProtectionSources with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ListProtectionSourcesOptions model
				listProtectionSourcesOptionsModel := new(backuprecoveryv1.ListProtectionSourcesOptions)
				listProtectionSourcesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				listProtectionSourcesOptionsModel.ExcludeOffice365Types = []string{"kDomain"}
				listProtectionSourcesOptionsModel.GetTeamsChannels = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AfterCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.BeforeCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NodeID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.PageSize = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.HasValidMailbox = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.HasValidOnedrive = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IsSecurityGroup = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.ID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NumLevels = core.Float64Ptr(float64(72.5))
				listProtectionSourcesOptionsModel.ExcludeTypes = []string{"kVCenter"}
				listProtectionSourcesOptionsModel.ExcludeAwsTypes = []string{"kEC2Instance"}
				listProtectionSourcesOptionsModel.ExcludeKubernetesTypes = []string{"kService"}
				listProtectionSourcesOptionsModel.IncludeDatastores = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeNetworks = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeVMFolders = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSfdcFields = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSystemVApps = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Environments = []string{"kVMware"}
				listProtectionSourcesOptionsModel.Environment = core.StringPtr("kPhysical")
				listProtectionSourcesOptionsModel.IncludeEntityPermissionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Sids = []string{"sid1"}
				listProtectionSourcesOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				listProtectionSourcesOptionsModel.IncludeObjectProtectionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneNonCriticalInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneAggregationInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.RequestInitiatorType = core.StringPtr("requestInitiatorType")
				listProtectionSourcesOptionsModel.UseCachedData = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AllUnderHierarchy = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.ListProtectionSources(listProtectionSourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListProtectionSourcesOptions model with no property values
				listProtectionSourcesOptionsModelNew := new(backuprecoveryv1.ListProtectionSourcesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.ListProtectionSources(listProtectionSourcesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListProtectionSources successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ListProtectionSourcesOptions model
				listProtectionSourcesOptionsModel := new(backuprecoveryv1.ListProtectionSourcesOptions)
				listProtectionSourcesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				listProtectionSourcesOptionsModel.ExcludeOffice365Types = []string{"kDomain"}
				listProtectionSourcesOptionsModel.GetTeamsChannels = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AfterCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.BeforeCursorEntityID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NodeID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.PageSize = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.HasValidMailbox = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.HasValidOnedrive = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IsSecurityGroup = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.ID = core.Int64Ptr(int64(26))
				listProtectionSourcesOptionsModel.NumLevels = core.Float64Ptr(float64(72.5))
				listProtectionSourcesOptionsModel.ExcludeTypes = []string{"kVCenter"}
				listProtectionSourcesOptionsModel.ExcludeAwsTypes = []string{"kEC2Instance"}
				listProtectionSourcesOptionsModel.ExcludeKubernetesTypes = []string{"kService"}
				listProtectionSourcesOptionsModel.IncludeDatastores = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeNetworks = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeVMFolders = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSfdcFields = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.IncludeSystemVApps = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Environments = []string{"kVMware"}
				listProtectionSourcesOptionsModel.Environment = core.StringPtr("kPhysical")
				listProtectionSourcesOptionsModel.IncludeEntityPermissionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Sids = []string{"sid1"}
				listProtectionSourcesOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				listProtectionSourcesOptionsModel.IncludeObjectProtectionInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneNonCriticalInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.PruneAggregationInfo = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.RequestInitiatorType = core.StringPtr("requestInitiatorType")
				listProtectionSourcesOptionsModel.UseCachedData = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.AllUnderHierarchy = core.BoolPtr(true)
				listProtectionSourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.ListProtectionSources(listProtectionSourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDataSourceConnections(getDataSourceConnectionsOptions *GetDataSourceConnectionsOptions) - Operation response error`, func() {
		getDataSourceConnectionsPath := "/data-source-connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataSourceConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDataSourceConnections with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetDataSourceConnectionsOptions model
				getDataSourceConnectionsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectionsOptions)
				getDataSourceConnectionsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectionsOptionsModel.ConnectionIds = []string{"connectionId1", "connectionId2"}
				getDataSourceConnectionsOptionsModel.ConnectionNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetDataSourceConnections(getDataSourceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetDataSourceConnections(getDataSourceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDataSourceConnections(getDataSourceConnectionsOptions *GetDataSourceConnectionsOptions)`, func() {
		getDataSourceConnectionsPath := "/data-source-connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataSourceConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"connectionId": "ConnectionID", "connectionName": "ConnectionName", "connectorIds": ["ConnectorIds"], "registrationToken": "RegistrationToken", "tenantId": "TenantID", "upgradingConnectorId": "UpgradingConnectorID"}]}`)
				}))
			})
			It(`Invoke GetDataSourceConnections successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetDataSourceConnectionsOptions model
				getDataSourceConnectionsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectionsOptions)
				getDataSourceConnectionsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectionsOptionsModel.ConnectionIds = []string{"connectionId1", "connectionId2"}
				getDataSourceConnectionsOptionsModel.ConnectionNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetDataSourceConnectionsWithContext(ctx, getDataSourceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetDataSourceConnections(getDataSourceConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetDataSourceConnectionsWithContext(ctx, getDataSourceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataSourceConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"connectionId": "ConnectionID", "connectionName": "ConnectionName", "connectorIds": ["ConnectorIds"], "registrationToken": "RegistrationToken", "tenantId": "TenantID", "upgradingConnectorId": "UpgradingConnectorID"}]}`)
				}))
			})
			It(`Invoke GetDataSourceConnections successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetDataSourceConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDataSourceConnectionsOptions model
				getDataSourceConnectionsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectionsOptions)
				getDataSourceConnectionsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectionsOptionsModel.ConnectionIds = []string{"connectionId1", "connectionId2"}
				getDataSourceConnectionsOptionsModel.ConnectionNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetDataSourceConnections(getDataSourceConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDataSourceConnections with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetDataSourceConnectionsOptions model
				getDataSourceConnectionsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectionsOptions)
				getDataSourceConnectionsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectionsOptionsModel.ConnectionIds = []string{"connectionId1", "connectionId2"}
				getDataSourceConnectionsOptionsModel.ConnectionNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetDataSourceConnections(getDataSourceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDataSourceConnectionsOptions model with no property values
				getDataSourceConnectionsOptionsModelNew := new(backuprecoveryv1.GetDataSourceConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetDataSourceConnections(getDataSourceConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetDataSourceConnections successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetDataSourceConnectionsOptions model
				getDataSourceConnectionsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectionsOptions)
				getDataSourceConnectionsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectionsOptionsModel.ConnectionIds = []string{"connectionId1", "connectionId2"}
				getDataSourceConnectionsOptionsModel.ConnectionNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetDataSourceConnections(getDataSourceConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDataSourceConnection(createDataSourceConnectionOptions *CreateDataSourceConnectionOptions) - Operation response error`, func() {
		createDataSourceConnectionPath := "/data-source-connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDataSourceConnectionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDataSourceConnection with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CreateDataSourceConnectionOptions model
				createDataSourceConnectionOptionsModel := new(backuprecoveryv1.CreateDataSourceConnectionOptions)
				createDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("data-source-connection")
				createDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.CreateDataSourceConnection(createDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.CreateDataSourceConnection(createDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDataSourceConnection(createDataSourceConnectionOptions *CreateDataSourceConnectionOptions)`, func() {
		createDataSourceConnectionPath := "/data-source-connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDataSourceConnectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"connectionId": "ConnectionID", "connectionName": "ConnectionName", "connectorIds": ["ConnectorIds"], "registrationToken": "RegistrationToken", "tenantId": "TenantID", "upgradingConnectorId": "UpgradingConnectorID"}`)
				}))
			})
			It(`Invoke CreateDataSourceConnection successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the CreateDataSourceConnectionOptions model
				createDataSourceConnectionOptionsModel := new(backuprecoveryv1.CreateDataSourceConnectionOptions)
				createDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("data-source-connection")
				createDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.CreateDataSourceConnectionWithContext(ctx, createDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.CreateDataSourceConnection(createDataSourceConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.CreateDataSourceConnectionWithContext(ctx, createDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDataSourceConnectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"connectionId": "ConnectionID", "connectionName": "ConnectionName", "connectorIds": ["ConnectorIds"], "registrationToken": "RegistrationToken", "tenantId": "TenantID", "upgradingConnectorId": "UpgradingConnectorID"}`)
				}))
			})
			It(`Invoke CreateDataSourceConnection successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.CreateDataSourceConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateDataSourceConnectionOptions model
				createDataSourceConnectionOptionsModel := new(backuprecoveryv1.CreateDataSourceConnectionOptions)
				createDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("data-source-connection")
				createDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.CreateDataSourceConnection(createDataSourceConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDataSourceConnection with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CreateDataSourceConnectionOptions model
				createDataSourceConnectionOptionsModel := new(backuprecoveryv1.CreateDataSourceConnectionOptions)
				createDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("data-source-connection")
				createDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.CreateDataSourceConnection(createDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDataSourceConnectionOptions model with no property values
				createDataSourceConnectionOptionsModelNew := new(backuprecoveryv1.CreateDataSourceConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.CreateDataSourceConnection(createDataSourceConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateDataSourceConnection successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CreateDataSourceConnectionOptions model
				createDataSourceConnectionOptionsModel := new(backuprecoveryv1.CreateDataSourceConnectionOptions)
				createDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("data-source-connection")
				createDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.CreateDataSourceConnection(createDataSourceConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteDataSourceConnection(deleteDataSourceConnectionOptions *DeleteDataSourceConnectionOptions)`, func() {
		deleteDataSourceConnectionPath := "/data-source-connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteDataSourceConnectionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDataSourceConnection successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := backupRecoveryService.DeleteDataSourceConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDataSourceConnectionOptions model
				deleteDataSourceConnectionOptionsModel := new(backuprecoveryv1.DeleteDataSourceConnectionOptions)
				deleteDataSourceConnectionOptionsModel.ConnectionID = core.StringPtr("testString")
				deleteDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = backupRecoveryService.DeleteDataSourceConnection(deleteDataSourceConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDataSourceConnection with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the DeleteDataSourceConnectionOptions model
				deleteDataSourceConnectionOptionsModel := new(backuprecoveryv1.DeleteDataSourceConnectionOptions)
				deleteDataSourceConnectionOptionsModel.ConnectionID = core.StringPtr("testString")
				deleteDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := backupRecoveryService.DeleteDataSourceConnection(deleteDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDataSourceConnectionOptions model with no property values
				deleteDataSourceConnectionOptionsModelNew := new(backuprecoveryv1.DeleteDataSourceConnectionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = backupRecoveryService.DeleteDataSourceConnection(deleteDataSourceConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PatchDataSourceConnection(patchDataSourceConnectionOptions *PatchDataSourceConnectionOptions) - Operation response error`, func() {
		patchDataSourceConnectionPath := "/data-source-connections/connectionId"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchDataSourceConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PatchDataSourceConnection with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchDataSourceConnectionOptions model
				patchDataSourceConnectionOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectionOptions)
				patchDataSourceConnectionOptionsModel.ConnectionID = core.StringPtr("connectionId")
				patchDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("connectionName")
				patchDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnection(patchDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.PatchDataSourceConnection(patchDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PatchDataSourceConnection(patchDataSourceConnectionOptions *PatchDataSourceConnectionOptions)`, func() {
		patchDataSourceConnectionPath := "/data-source-connections/connectionId"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchDataSourceConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectionId": "ConnectionID", "connectionName": "ConnectionName", "connectorIds": ["ConnectorIds"], "registrationToken": "RegistrationToken", "tenantId": "TenantID", "upgradingConnectorId": "UpgradingConnectorID"}`)
				}))
			})
			It(`Invoke PatchDataSourceConnection successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the PatchDataSourceConnectionOptions model
				patchDataSourceConnectionOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectionOptions)
				patchDataSourceConnectionOptionsModel.ConnectionID = core.StringPtr("connectionId")
				patchDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("connectionName")
				patchDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.PatchDataSourceConnectionWithContext(ctx, patchDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnection(patchDataSourceConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.PatchDataSourceConnectionWithContext(ctx, patchDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchDataSourceConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectionId": "ConnectionID", "connectionName": "ConnectionName", "connectorIds": ["ConnectorIds"], "registrationToken": "RegistrationToken", "tenantId": "TenantID", "upgradingConnectorId": "UpgradingConnectorID"}`)
				}))
			})
			It(`Invoke PatchDataSourceConnection successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PatchDataSourceConnectionOptions model
				patchDataSourceConnectionOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectionOptions)
				patchDataSourceConnectionOptionsModel.ConnectionID = core.StringPtr("connectionId")
				patchDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("connectionName")
				patchDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.PatchDataSourceConnection(patchDataSourceConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PatchDataSourceConnection with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchDataSourceConnectionOptions model
				patchDataSourceConnectionOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectionOptions)
				patchDataSourceConnectionOptionsModel.ConnectionID = core.StringPtr("connectionId")
				patchDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("connectionName")
				patchDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnection(patchDataSourceConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PatchDataSourceConnectionOptions model with no property values
				patchDataSourceConnectionOptionsModelNew := new(backuprecoveryv1.PatchDataSourceConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.PatchDataSourceConnection(patchDataSourceConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PatchDataSourceConnection successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchDataSourceConnectionOptions model
				patchDataSourceConnectionOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectionOptions)
				patchDataSourceConnectionOptionsModel.ConnectionID = core.StringPtr("connectionId")
				patchDataSourceConnectionOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectionOptionsModel.ConnectionName = core.StringPtr("connectionName")
				patchDataSourceConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnection(patchDataSourceConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GenerateDataSourceConnectionRegistrationToken(generateDataSourceConnectionRegistrationTokenOptions *GenerateDataSourceConnectionRegistrationTokenOptions)`, func() {
		generateDataSourceConnectionRegistrationTokenPath := "/data-source-connections/testString/registrationToken"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(generateDataSourceConnectionRegistrationTokenPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GenerateDataSourceConnectionRegistrationToken successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GenerateDataSourceConnectionRegistrationTokenOptions model
				generateDataSourceConnectionRegistrationTokenOptionsModel := new(backuprecoveryv1.GenerateDataSourceConnectionRegistrationTokenOptions)
				generateDataSourceConnectionRegistrationTokenOptionsModel.ConnectionID = core.StringPtr("testString")
				generateDataSourceConnectionRegistrationTokenOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				generateDataSourceConnectionRegistrationTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GenerateDataSourceConnectionRegistrationTokenWithContext(ctx, generateDataSourceConnectionRegistrationTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GenerateDataSourceConnectionRegistrationToken(generateDataSourceConnectionRegistrationTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GenerateDataSourceConnectionRegistrationTokenWithContext(ctx, generateDataSourceConnectionRegistrationTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(generateDataSourceConnectionRegistrationTokenPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GenerateDataSourceConnectionRegistrationToken successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GenerateDataSourceConnectionRegistrationToken(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GenerateDataSourceConnectionRegistrationTokenOptions model
				generateDataSourceConnectionRegistrationTokenOptionsModel := new(backuprecoveryv1.GenerateDataSourceConnectionRegistrationTokenOptions)
				generateDataSourceConnectionRegistrationTokenOptionsModel.ConnectionID = core.StringPtr("testString")
				generateDataSourceConnectionRegistrationTokenOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				generateDataSourceConnectionRegistrationTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GenerateDataSourceConnectionRegistrationToken(generateDataSourceConnectionRegistrationTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GenerateDataSourceConnectionRegistrationToken with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GenerateDataSourceConnectionRegistrationTokenOptions model
				generateDataSourceConnectionRegistrationTokenOptionsModel := new(backuprecoveryv1.GenerateDataSourceConnectionRegistrationTokenOptions)
				generateDataSourceConnectionRegistrationTokenOptionsModel.ConnectionID = core.StringPtr("testString")
				generateDataSourceConnectionRegistrationTokenOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				generateDataSourceConnectionRegistrationTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GenerateDataSourceConnectionRegistrationToken(generateDataSourceConnectionRegistrationTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GenerateDataSourceConnectionRegistrationTokenOptions model with no property values
				generateDataSourceConnectionRegistrationTokenOptionsModelNew := new(backuprecoveryv1.GenerateDataSourceConnectionRegistrationTokenOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GenerateDataSourceConnectionRegistrationToken(generateDataSourceConnectionRegistrationTokenOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GenerateDataSourceConnectionRegistrationToken successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GenerateDataSourceConnectionRegistrationTokenOptions model
				generateDataSourceConnectionRegistrationTokenOptionsModel := new(backuprecoveryv1.GenerateDataSourceConnectionRegistrationTokenOptions)
				generateDataSourceConnectionRegistrationTokenOptionsModel.ConnectionID = core.StringPtr("testString")
				generateDataSourceConnectionRegistrationTokenOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				generateDataSourceConnectionRegistrationTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GenerateDataSourceConnectionRegistrationToken(generateDataSourceConnectionRegistrationTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDataSourceConnectors(getDataSourceConnectorsOptions *GetDataSourceConnectorsOptions) - Operation response error`, func() {
		getDataSourceConnectorsPath := "/data-source-connectors"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataSourceConnectorsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.URL.Query()["connectionId"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDataSourceConnectors with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetDataSourceConnectorsOptions model
				getDataSourceConnectorsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectorsOptions)
				getDataSourceConnectorsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectorsOptionsModel.ConnectorIds = []string{"connectorId1", "connectorId2"}
				getDataSourceConnectorsOptionsModel.ConnectorNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectorsOptionsModel.ConnectionID = core.StringPtr("testString")
				getDataSourceConnectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetDataSourceConnectors(getDataSourceConnectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetDataSourceConnectors(getDataSourceConnectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDataSourceConnectors(getDataSourceConnectorsOptions *GetDataSourceConnectorsOptions)`, func() {
		getDataSourceConnectorsPath := "/data-source-connectors"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataSourceConnectorsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.URL.Query()["connectionId"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectors": [{"clusterSideIp": "ClusterSideIp", "connectionId": "ConnectionID", "connectorId": "ConnectorID", "connectorName": "ConnectorName", "connectivityStatus": {"isConnected": false, "lastConnectedTimestampSecs": 26, "message": "Message"}, "softwareVersion": "SoftwareVersion", "tenantSideIp": "TenantSideIp", "upgradeStatus": {"lastStatusFetchedTimestampMsecs": 31, "message": "Message", "startTimestampMSecs": 19, "status": "NotStarted"}}]}`)
				}))
			})
			It(`Invoke GetDataSourceConnectors successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetDataSourceConnectorsOptions model
				getDataSourceConnectorsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectorsOptions)
				getDataSourceConnectorsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectorsOptionsModel.ConnectorIds = []string{"connectorId1", "connectorId2"}
				getDataSourceConnectorsOptionsModel.ConnectorNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectorsOptionsModel.ConnectionID = core.StringPtr("testString")
				getDataSourceConnectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetDataSourceConnectorsWithContext(ctx, getDataSourceConnectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetDataSourceConnectors(getDataSourceConnectorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetDataSourceConnectorsWithContext(ctx, getDataSourceConnectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataSourceConnectorsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.URL.Query()["connectionId"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectors": [{"clusterSideIp": "ClusterSideIp", "connectionId": "ConnectionID", "connectorId": "ConnectorID", "connectorName": "ConnectorName", "connectivityStatus": {"isConnected": false, "lastConnectedTimestampSecs": 26, "message": "Message"}, "softwareVersion": "SoftwareVersion", "tenantSideIp": "TenantSideIp", "upgradeStatus": {"lastStatusFetchedTimestampMsecs": 31, "message": "Message", "startTimestampMSecs": 19, "status": "NotStarted"}}]}`)
				}))
			})
			It(`Invoke GetDataSourceConnectors successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetDataSourceConnectors(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDataSourceConnectorsOptions model
				getDataSourceConnectorsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectorsOptions)
				getDataSourceConnectorsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectorsOptionsModel.ConnectorIds = []string{"connectorId1", "connectorId2"}
				getDataSourceConnectorsOptionsModel.ConnectorNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectorsOptionsModel.ConnectionID = core.StringPtr("testString")
				getDataSourceConnectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetDataSourceConnectors(getDataSourceConnectorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDataSourceConnectors with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetDataSourceConnectorsOptions model
				getDataSourceConnectorsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectorsOptions)
				getDataSourceConnectorsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectorsOptionsModel.ConnectorIds = []string{"connectorId1", "connectorId2"}
				getDataSourceConnectorsOptionsModel.ConnectorNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectorsOptionsModel.ConnectionID = core.StringPtr("testString")
				getDataSourceConnectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetDataSourceConnectors(getDataSourceConnectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDataSourceConnectorsOptions model with no property values
				getDataSourceConnectorsOptionsModelNew := new(backuprecoveryv1.GetDataSourceConnectorsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetDataSourceConnectors(getDataSourceConnectorsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetDataSourceConnectors successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetDataSourceConnectorsOptions model
				getDataSourceConnectorsOptionsModel := new(backuprecoveryv1.GetDataSourceConnectorsOptions)
				getDataSourceConnectorsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getDataSourceConnectorsOptionsModel.ConnectorIds = []string{"connectorId1", "connectorId2"}
				getDataSourceConnectorsOptionsModel.ConnectorNames = []string{"connectionName1", "connectionName2"}
				getDataSourceConnectorsOptionsModel.ConnectionID = core.StringPtr("testString")
				getDataSourceConnectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetDataSourceConnectors(getDataSourceConnectorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetConnectorMetadata(getConnectorMetadataOptions *GetConnectorMetadataOptions) - Operation response error`, func() {
		getConnectorMetadataPath := "/data-source-connectors/metadata"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getConnectorMetadataPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetConnectorMetadata with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetConnectorMetadataOptions model
				getConnectorMetadataOptionsModel := new(backuprecoveryv1.GetConnectorMetadataOptions)
				getConnectorMetadataOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getConnectorMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetConnectorMetadata(getConnectorMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetConnectorMetadata(getConnectorMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetConnectorMetadata(getConnectorMetadataOptions *GetConnectorMetadataOptions)`, func() {
		getConnectorMetadataPath := "/data-source-connectors/metadata"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getConnectorMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectorImageMetadata": {"connectorImageFileList": [{"imageType": "VSI", "url": "URL"}]}}`)
				}))
			})
			It(`Invoke GetConnectorMetadata successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetConnectorMetadataOptions model
				getConnectorMetadataOptionsModel := new(backuprecoveryv1.GetConnectorMetadataOptions)
				getConnectorMetadataOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getConnectorMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetConnectorMetadataWithContext(ctx, getConnectorMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetConnectorMetadata(getConnectorMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetConnectorMetadataWithContext(ctx, getConnectorMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getConnectorMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectorImageMetadata": {"connectorImageFileList": [{"imageType": "VSI", "url": "URL"}]}}`)
				}))
			})
			It(`Invoke GetConnectorMetadata successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetConnectorMetadata(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetConnectorMetadataOptions model
				getConnectorMetadataOptionsModel := new(backuprecoveryv1.GetConnectorMetadataOptions)
				getConnectorMetadataOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getConnectorMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetConnectorMetadata(getConnectorMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetConnectorMetadata with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetConnectorMetadataOptions model
				getConnectorMetadataOptionsModel := new(backuprecoveryv1.GetConnectorMetadataOptions)
				getConnectorMetadataOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getConnectorMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetConnectorMetadata(getConnectorMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetConnectorMetadataOptions model with no property values
				getConnectorMetadataOptionsModelNew := new(backuprecoveryv1.GetConnectorMetadataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetConnectorMetadata(getConnectorMetadataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetConnectorMetadata successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetConnectorMetadataOptions model
				getConnectorMetadataOptionsModel := new(backuprecoveryv1.GetConnectorMetadataOptions)
				getConnectorMetadataOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getConnectorMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetConnectorMetadata(getConnectorMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteDataSourceConnector(deleteDataSourceConnectorOptions *DeleteDataSourceConnectorOptions)`, func() {
		deleteDataSourceConnectorPath := "/data-source-connectors/connectorId"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteDataSourceConnectorPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDataSourceConnector successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := backupRecoveryService.DeleteDataSourceConnector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDataSourceConnectorOptions model
				deleteDataSourceConnectorOptionsModel := new(backuprecoveryv1.DeleteDataSourceConnectorOptions)
				deleteDataSourceConnectorOptionsModel.ConnectorID = core.StringPtr("connectorId")
				deleteDataSourceConnectorOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteDataSourceConnectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = backupRecoveryService.DeleteDataSourceConnector(deleteDataSourceConnectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDataSourceConnector with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the DeleteDataSourceConnectorOptions model
				deleteDataSourceConnectorOptionsModel := new(backuprecoveryv1.DeleteDataSourceConnectorOptions)
				deleteDataSourceConnectorOptionsModel.ConnectorID = core.StringPtr("connectorId")
				deleteDataSourceConnectorOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteDataSourceConnectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := backupRecoveryService.DeleteDataSourceConnector(deleteDataSourceConnectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDataSourceConnectorOptions model with no property values
				deleteDataSourceConnectorOptionsModelNew := new(backuprecoveryv1.DeleteDataSourceConnectorOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = backupRecoveryService.DeleteDataSourceConnector(deleteDataSourceConnectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PatchDataSourceConnector(patchDataSourceConnectorOptions *PatchDataSourceConnectorOptions) - Operation response error`, func() {
		patchDataSourceConnectorPath := "/data-source-connectors/connectorID"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchDataSourceConnectorPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PatchDataSourceConnector with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchDataSourceConnectorOptions model
				patchDataSourceConnectorOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectorOptions)
				patchDataSourceConnectorOptionsModel.ConnectorID = core.StringPtr("connectorID")
				patchDataSourceConnectorOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectorOptionsModel.ConnectorName = core.StringPtr("connectorName")
				patchDataSourceConnectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnector(patchDataSourceConnectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.PatchDataSourceConnector(patchDataSourceConnectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PatchDataSourceConnector(patchDataSourceConnectorOptions *PatchDataSourceConnectorOptions)`, func() {
		patchDataSourceConnectorPath := "/data-source-connectors/connectorID"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchDataSourceConnectorPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterSideIp": "ClusterSideIp", "connectionId": "ConnectionID", "connectorId": "ConnectorID", "connectorName": "ConnectorName", "connectivityStatus": {"isConnected": false, "lastConnectedTimestampSecs": 26, "message": "Message"}, "softwareVersion": "SoftwareVersion", "tenantSideIp": "TenantSideIp", "upgradeStatus": {"lastStatusFetchedTimestampMsecs": 31, "message": "Message", "startTimestampMSecs": 19, "status": "NotStarted"}}`)
				}))
			})
			It(`Invoke PatchDataSourceConnector successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the PatchDataSourceConnectorOptions model
				patchDataSourceConnectorOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectorOptions)
				patchDataSourceConnectorOptionsModel.ConnectorID = core.StringPtr("connectorID")
				patchDataSourceConnectorOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectorOptionsModel.ConnectorName = core.StringPtr("connectorName")
				patchDataSourceConnectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.PatchDataSourceConnectorWithContext(ctx, patchDataSourceConnectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnector(patchDataSourceConnectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.PatchDataSourceConnectorWithContext(ctx, patchDataSourceConnectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchDataSourceConnectorPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterSideIp": "ClusterSideIp", "connectionId": "ConnectionID", "connectorId": "ConnectorID", "connectorName": "ConnectorName", "connectivityStatus": {"isConnected": false, "lastConnectedTimestampSecs": 26, "message": "Message"}, "softwareVersion": "SoftwareVersion", "tenantSideIp": "TenantSideIp", "upgradeStatus": {"lastStatusFetchedTimestampMsecs": 31, "message": "Message", "startTimestampMSecs": 19, "status": "NotStarted"}}`)
				}))
			})
			It(`Invoke PatchDataSourceConnector successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PatchDataSourceConnectorOptions model
				patchDataSourceConnectorOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectorOptions)
				patchDataSourceConnectorOptionsModel.ConnectorID = core.StringPtr("connectorID")
				patchDataSourceConnectorOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectorOptionsModel.ConnectorName = core.StringPtr("connectorName")
				patchDataSourceConnectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.PatchDataSourceConnector(patchDataSourceConnectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PatchDataSourceConnector with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchDataSourceConnectorOptions model
				patchDataSourceConnectorOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectorOptions)
				patchDataSourceConnectorOptionsModel.ConnectorID = core.StringPtr("connectorID")
				patchDataSourceConnectorOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectorOptionsModel.ConnectorName = core.StringPtr("connectorName")
				patchDataSourceConnectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnector(patchDataSourceConnectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PatchDataSourceConnectorOptions model with no property values
				patchDataSourceConnectorOptionsModelNew := new(backuprecoveryv1.PatchDataSourceConnectorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.PatchDataSourceConnector(patchDataSourceConnectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PatchDataSourceConnector successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchDataSourceConnectorOptions model
				patchDataSourceConnectorOptionsModel := new(backuprecoveryv1.PatchDataSourceConnectorOptions)
				patchDataSourceConnectorOptionsModel.ConnectorID = core.StringPtr("connectorID")
				patchDataSourceConnectorOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchDataSourceConnectorOptionsModel.ConnectorName = core.StringPtr("connectorName")
				patchDataSourceConnectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.PatchDataSourceConnector(patchDataSourceConnectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetObjectSnapshots(getObjectSnapshotsOptions *GetObjectSnapshotsOptions) - Operation response error`, func() {
		getObjectSnapshotsPath := "/data-protect/objects/26/snapshots"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getObjectSnapshotsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for fromTimeUsecs query parameter
					// TODO: Add check for toTimeUsecs query parameter
					// TODO: Add check for runStartFromTimeUsecs query parameter
					// TODO: Add check for runStartToTimeUsecs query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetObjectSnapshots with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetObjectSnapshotsOptions model
				getObjectSnapshotsOptionsModel := new(backuprecoveryv1.GetObjectSnapshotsOptions)
				getObjectSnapshotsOptionsModel.ID = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getObjectSnapshotsOptionsModel.FromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.ToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartFromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.SnapshotActions = []string{"RecoverPhysicalVolumes"}
				getObjectSnapshotsOptionsModel.RunTypes = []string{"kRegular"}
				getObjectSnapshotsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getObjectSnapshotsOptionsModel.RunInstanceIds = []int64{int64(26)}
				getObjectSnapshotsOptionsModel.RegionIds = []string{"regionId1"}
				getObjectSnapshotsOptionsModel.ObjectActionKeys = []string{"kVMware"}
				getObjectSnapshotsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetObjectSnapshots(getObjectSnapshotsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetObjectSnapshots(getObjectSnapshotsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetObjectSnapshots(getObjectSnapshotsOptions *GetObjectSnapshotsOptions)`, func() {
		getObjectSnapshotsPath := "/data-protect/objects/26/snapshots"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getObjectSnapshotsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for fromTimeUsecs query parameter
					// TODO: Add check for toTimeUsecs query parameter
					// TODO: Add check for runStartFromTimeUsecs query parameter
					// TODO: Add check for runStartToTimeUsecs query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"snapshots": [{"awsParams": {"protectionType": "kAgent"}, "azureParams": {"protectionType": "kAgent"}, "clusterId": 9, "clusterIncarnationId": 20, "elastifileParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "environment": "kVMware", "expiryTimeUsecs": 15, "externalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "flashbladeParams": {"supportedNasMountProtocols": ["kNfs"]}, "genericNasParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "gpfsParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "hasDataLock": false, "hypervParams": {"protectionType": "kAuto"}, "id": "ID", "indexingStatus": "InProgress", "isilonParams": {"supportedNasMountProtocols": ["kNfs"]}, "netappParams": {"supportedNasMountProtocols": ["kNfs"], "volumeExtendedStyle": "kFlexVol", "volumeType": "ReadWrite"}, "objectId": 8, "objectName": "ObjectName", "onLegalHold": false, "ownershipContext": "Local", "physicalParams": {"enableSystemBackup": true, "protectionType": "kFile"}, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "protectionGroupRunId": "ProtectionGroupRunID", "regionId": "RegionID", "runInstanceId": 13, "runStartTimeUsecs": 17, "runType": "kRegular", "sfdcParams": {"recordsAdded": 12, "recordsModified": 15, "recordsRemoved": 14}, "snapshotTargetType": "Local", "snapshotTimestampUsecs": 22, "sourceGroupId": "SourceGroupID", "sourceId": 8, "storageDomainId": 15}]}`)
				}))
			})
			It(`Invoke GetObjectSnapshots successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetObjectSnapshotsOptions model
				getObjectSnapshotsOptionsModel := new(backuprecoveryv1.GetObjectSnapshotsOptions)
				getObjectSnapshotsOptionsModel.ID = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getObjectSnapshotsOptionsModel.FromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.ToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartFromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.SnapshotActions = []string{"RecoverPhysicalVolumes"}
				getObjectSnapshotsOptionsModel.RunTypes = []string{"kRegular"}
				getObjectSnapshotsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getObjectSnapshotsOptionsModel.RunInstanceIds = []int64{int64(26)}
				getObjectSnapshotsOptionsModel.RegionIds = []string{"regionId1"}
				getObjectSnapshotsOptionsModel.ObjectActionKeys = []string{"kVMware"}
				getObjectSnapshotsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetObjectSnapshotsWithContext(ctx, getObjectSnapshotsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetObjectSnapshots(getObjectSnapshotsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetObjectSnapshotsWithContext(ctx, getObjectSnapshotsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getObjectSnapshotsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for fromTimeUsecs query parameter
					// TODO: Add check for toTimeUsecs query parameter
					// TODO: Add check for runStartFromTimeUsecs query parameter
					// TODO: Add check for runStartToTimeUsecs query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"snapshots": [{"awsParams": {"protectionType": "kAgent"}, "azureParams": {"protectionType": "kAgent"}, "clusterId": 9, "clusterIncarnationId": 20, "elastifileParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "environment": "kVMware", "expiryTimeUsecs": 15, "externalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "flashbladeParams": {"supportedNasMountProtocols": ["kNfs"]}, "genericNasParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "gpfsParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "hasDataLock": false, "hypervParams": {"protectionType": "kAuto"}, "id": "ID", "indexingStatus": "InProgress", "isilonParams": {"supportedNasMountProtocols": ["kNfs"]}, "netappParams": {"supportedNasMountProtocols": ["kNfs"], "volumeExtendedStyle": "kFlexVol", "volumeType": "ReadWrite"}, "objectId": 8, "objectName": "ObjectName", "onLegalHold": false, "ownershipContext": "Local", "physicalParams": {"enableSystemBackup": true, "protectionType": "kFile"}, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "protectionGroupRunId": "ProtectionGroupRunID", "regionId": "RegionID", "runInstanceId": 13, "runStartTimeUsecs": 17, "runType": "kRegular", "sfdcParams": {"recordsAdded": 12, "recordsModified": 15, "recordsRemoved": 14}, "snapshotTargetType": "Local", "snapshotTimestampUsecs": 22, "sourceGroupId": "SourceGroupID", "sourceId": 8, "storageDomainId": 15}]}`)
				}))
			})
			It(`Invoke GetObjectSnapshots successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetObjectSnapshots(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetObjectSnapshotsOptions model
				getObjectSnapshotsOptionsModel := new(backuprecoveryv1.GetObjectSnapshotsOptions)
				getObjectSnapshotsOptionsModel.ID = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getObjectSnapshotsOptionsModel.FromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.ToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartFromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.SnapshotActions = []string{"RecoverPhysicalVolumes"}
				getObjectSnapshotsOptionsModel.RunTypes = []string{"kRegular"}
				getObjectSnapshotsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getObjectSnapshotsOptionsModel.RunInstanceIds = []int64{int64(26)}
				getObjectSnapshotsOptionsModel.RegionIds = []string{"regionId1"}
				getObjectSnapshotsOptionsModel.ObjectActionKeys = []string{"kVMware"}
				getObjectSnapshotsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetObjectSnapshots(getObjectSnapshotsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetObjectSnapshots with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetObjectSnapshotsOptions model
				getObjectSnapshotsOptionsModel := new(backuprecoveryv1.GetObjectSnapshotsOptions)
				getObjectSnapshotsOptionsModel.ID = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getObjectSnapshotsOptionsModel.FromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.ToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartFromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.SnapshotActions = []string{"RecoverPhysicalVolumes"}
				getObjectSnapshotsOptionsModel.RunTypes = []string{"kRegular"}
				getObjectSnapshotsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getObjectSnapshotsOptionsModel.RunInstanceIds = []int64{int64(26)}
				getObjectSnapshotsOptionsModel.RegionIds = []string{"regionId1"}
				getObjectSnapshotsOptionsModel.ObjectActionKeys = []string{"kVMware"}
				getObjectSnapshotsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetObjectSnapshots(getObjectSnapshotsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetObjectSnapshotsOptions model with no property values
				getObjectSnapshotsOptionsModelNew := new(backuprecoveryv1.GetObjectSnapshotsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetObjectSnapshots(getObjectSnapshotsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetObjectSnapshots successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetObjectSnapshotsOptions model
				getObjectSnapshotsOptionsModel := new(backuprecoveryv1.GetObjectSnapshotsOptions)
				getObjectSnapshotsOptionsModel.ID = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getObjectSnapshotsOptionsModel.FromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.ToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartFromTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.RunStartToTimeUsecs = core.Int64Ptr(int64(26))
				getObjectSnapshotsOptionsModel.SnapshotActions = []string{"RecoverPhysicalVolumes"}
				getObjectSnapshotsOptionsModel.RunTypes = []string{"kRegular"}
				getObjectSnapshotsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getObjectSnapshotsOptionsModel.RunInstanceIds = []int64{int64(26)}
				getObjectSnapshotsOptionsModel.RegionIds = []string{"regionId1"}
				getObjectSnapshotsOptionsModel.ObjectActionKeys = []string{"kVMware"}
				getObjectSnapshotsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetObjectSnapshots(getObjectSnapshotsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionPolicies(getProtectionPoliciesOptions *GetProtectionPoliciesOptions) - Operation response error`, func() {
		getProtectionPoliciesPath := "/data-protect/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for excludeLinkedPolicies query parameter
					// TODO: Add check for includeReplicatedPolicies query parameter
					// TODO: Add check for includeStats query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProtectionPolicies with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionPoliciesOptions model
				getProtectionPoliciesOptionsModel := new(backuprecoveryv1.GetProtectionPoliciesOptions)
				getProtectionPoliciesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPoliciesOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPoliciesOptionsModel.Ids = []string{"policyId1"}
				getProtectionPoliciesOptionsModel.PolicyNames = []string{"policyName1"}
				getProtectionPoliciesOptionsModel.Types = []string{"Regular"}
				getProtectionPoliciesOptionsModel.ExcludeLinkedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeReplicatedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeStats = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetProtectionPolicies(getProtectionPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetProtectionPolicies(getProtectionPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionPolicies(getProtectionPoliciesOptions *GetProtectionPoliciesOptions)`, func() {
		getProtectionPoliciesPath := "/data-protect/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for excludeLinkedPolicies query parameter
					// TODO: Add check for includeReplicatedPolicies query parameter
					// TODO: Add check for includeStats query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"policies": [{"name": "Name", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 8, "targetName": "TargetName", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}]}, "description": "Description", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "ConfigID"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 15, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 7, "isCBSEnabled": true, "lastModificationTimeUsecs": 25, "id": "ID", "templateId": "TemplateID", "isUsable": true, "isReplicated": true, "numProtectionGroups": 19, "numProtectedObjects": 19}]}`)
				}))
			})
			It(`Invoke GetProtectionPolicies successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetProtectionPoliciesOptions model
				getProtectionPoliciesOptionsModel := new(backuprecoveryv1.GetProtectionPoliciesOptions)
				getProtectionPoliciesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPoliciesOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPoliciesOptionsModel.Ids = []string{"policyId1"}
				getProtectionPoliciesOptionsModel.PolicyNames = []string{"policyName1"}
				getProtectionPoliciesOptionsModel.Types = []string{"Regular"}
				getProtectionPoliciesOptionsModel.ExcludeLinkedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeReplicatedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeStats = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetProtectionPoliciesWithContext(ctx, getProtectionPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetProtectionPolicies(getProtectionPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetProtectionPoliciesWithContext(ctx, getProtectionPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for excludeLinkedPolicies query parameter
					// TODO: Add check for includeReplicatedPolicies query parameter
					// TODO: Add check for includeStats query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"policies": [{"name": "Name", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 8, "targetName": "TargetName", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}]}, "description": "Description", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "ConfigID"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 15, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 7, "isCBSEnabled": true, "lastModificationTimeUsecs": 25, "id": "ID", "templateId": "TemplateID", "isUsable": true, "isReplicated": true, "numProtectionGroups": 19, "numProtectedObjects": 19}]}`)
				}))
			})
			It(`Invoke GetProtectionPolicies successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetProtectionPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProtectionPoliciesOptions model
				getProtectionPoliciesOptionsModel := new(backuprecoveryv1.GetProtectionPoliciesOptions)
				getProtectionPoliciesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPoliciesOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPoliciesOptionsModel.Ids = []string{"policyId1"}
				getProtectionPoliciesOptionsModel.PolicyNames = []string{"policyName1"}
				getProtectionPoliciesOptionsModel.Types = []string{"Regular"}
				getProtectionPoliciesOptionsModel.ExcludeLinkedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeReplicatedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeStats = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetProtectionPolicies(getProtectionPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetProtectionPolicies with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionPoliciesOptions model
				getProtectionPoliciesOptionsModel := new(backuprecoveryv1.GetProtectionPoliciesOptions)
				getProtectionPoliciesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPoliciesOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPoliciesOptionsModel.Ids = []string{"policyId1"}
				getProtectionPoliciesOptionsModel.PolicyNames = []string{"policyName1"}
				getProtectionPoliciesOptionsModel.Types = []string{"Regular"}
				getProtectionPoliciesOptionsModel.ExcludeLinkedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeReplicatedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeStats = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetProtectionPolicies(getProtectionPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProtectionPoliciesOptions model with no property values
				getProtectionPoliciesOptionsModelNew := new(backuprecoveryv1.GetProtectionPoliciesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetProtectionPolicies(getProtectionPoliciesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProtectionPolicies successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionPoliciesOptions model
				getProtectionPoliciesOptionsModel := new(backuprecoveryv1.GetProtectionPoliciesOptions)
				getProtectionPoliciesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPoliciesOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPoliciesOptionsModel.Ids = []string{"policyId1"}
				getProtectionPoliciesOptionsModel.PolicyNames = []string{"policyName1"}
				getProtectionPoliciesOptionsModel.Types = []string{"Regular"}
				getProtectionPoliciesOptionsModel.ExcludeLinkedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeReplicatedPolicies = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.IncludeStats = core.BoolPtr(true)
				getProtectionPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetProtectionPolicies(getProtectionPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProtectionPolicy(createProtectionPolicyOptions *CreateProtectionPolicyOptions) - Operation response error`, func() {
		createProtectionPolicyPath := "/data-protect/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateProtectionPolicy with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the CreateProtectionPolicyOptions model
				createProtectionPolicyOptionsModel := new(backuprecoveryv1.CreateProtectionPolicyOptions)
				createProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionPolicyOptionsModel.Name = core.StringPtr("create-protection-policy")
				createProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				createProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				createProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				createProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				createProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				createProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				createProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				createProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				createProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				createProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				createProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				createProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.CreateProtectionPolicy(createProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.CreateProtectionPolicy(createProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProtectionPolicy(createProtectionPolicyOptions *CreateProtectionPolicyOptions)`, func() {
		createProtectionPolicyPath := "/data-protect/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "Name", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 8, "targetName": "TargetName", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}]}, "description": "Description", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "ConfigID"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 15, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 7, "isCBSEnabled": true, "lastModificationTimeUsecs": 25, "id": "ID", "templateId": "TemplateID", "isUsable": true, "isReplicated": true, "numProtectionGroups": 19, "numProtectedObjects": 19}`)
				}))
			})
			It(`Invoke CreateProtectionPolicy successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the CreateProtectionPolicyOptions model
				createProtectionPolicyOptionsModel := new(backuprecoveryv1.CreateProtectionPolicyOptions)
				createProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionPolicyOptionsModel.Name = core.StringPtr("create-protection-policy")
				createProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				createProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				createProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				createProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				createProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				createProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				createProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				createProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				createProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				createProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				createProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				createProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.CreateProtectionPolicyWithContext(ctx, createProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.CreateProtectionPolicy(createProtectionPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.CreateProtectionPolicyWithContext(ctx, createProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "Name", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 8, "targetName": "TargetName", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}]}, "description": "Description", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "ConfigID"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 15, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 7, "isCBSEnabled": true, "lastModificationTimeUsecs": 25, "id": "ID", "templateId": "TemplateID", "isUsable": true, "isReplicated": true, "numProtectionGroups": 19, "numProtectedObjects": 19}`)
				}))
			})
			It(`Invoke CreateProtectionPolicy successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.CreateProtectionPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the CreateProtectionPolicyOptions model
				createProtectionPolicyOptionsModel := new(backuprecoveryv1.CreateProtectionPolicyOptions)
				createProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionPolicyOptionsModel.Name = core.StringPtr("create-protection-policy")
				createProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				createProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				createProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				createProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				createProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				createProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				createProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				createProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				createProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				createProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				createProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				createProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.CreateProtectionPolicy(createProtectionPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateProtectionPolicy with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the CreateProtectionPolicyOptions model
				createProtectionPolicyOptionsModel := new(backuprecoveryv1.CreateProtectionPolicyOptions)
				createProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionPolicyOptionsModel.Name = core.StringPtr("create-protection-policy")
				createProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				createProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				createProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				createProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				createProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				createProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				createProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				createProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				createProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				createProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				createProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				createProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.CreateProtectionPolicy(createProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateProtectionPolicyOptions model with no property values
				createProtectionPolicyOptionsModelNew := new(backuprecoveryv1.CreateProtectionPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.CreateProtectionPolicy(createProtectionPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateProtectionPolicy successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the CreateProtectionPolicyOptions model
				createProtectionPolicyOptionsModel := new(backuprecoveryv1.CreateProtectionPolicyOptions)
				createProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionPolicyOptionsModel.Name = core.StringPtr("create-protection-policy")
				createProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				createProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				createProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				createProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				createProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				createProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				createProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				createProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				createProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				createProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				createProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				createProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.CreateProtectionPolicy(createProtectionPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionPolicyByID(getProtectionPolicyByIdOptions *GetProtectionPolicyByIdOptions) - Operation response error`, func() {
		getProtectionPolicyByIDPath := "/data-protect/policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionPolicyByIDPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProtectionPolicyByID with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionPolicyByIdOptions model
				getProtectionPolicyByIdOptionsModel := new(backuprecoveryv1.GetProtectionPolicyByIdOptions)
				getProtectionPolicyByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionPolicyByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPolicyByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPolicyByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetProtectionPolicyByID(getProtectionPolicyByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetProtectionPolicyByID(getProtectionPolicyByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionPolicyByID(getProtectionPolicyByIdOptions *GetProtectionPolicyByIdOptions)`, func() {
		getProtectionPolicyByIDPath := "/data-protect/policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionPolicyByIDPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 8, "targetName": "TargetName", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}]}, "description": "Description", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "ConfigID"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 15, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 7, "isCBSEnabled": true, "lastModificationTimeUsecs": 25, "id": "ID", "templateId": "TemplateID", "isUsable": true, "isReplicated": true, "numProtectionGroups": 19, "numProtectedObjects": 19}`)
				}))
			})
			It(`Invoke GetProtectionPolicyByID successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetProtectionPolicyByIdOptions model
				getProtectionPolicyByIdOptionsModel := new(backuprecoveryv1.GetProtectionPolicyByIdOptions)
				getProtectionPolicyByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionPolicyByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPolicyByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPolicyByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetProtectionPolicyByIDWithContext(ctx, getProtectionPolicyByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetProtectionPolicyByID(getProtectionPolicyByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetProtectionPolicyByIDWithContext(ctx, getProtectionPolicyByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionPolicyByIDPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 8, "targetName": "TargetName", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}]}, "description": "Description", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "ConfigID"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 15, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 7, "isCBSEnabled": true, "lastModificationTimeUsecs": 25, "id": "ID", "templateId": "TemplateID", "isUsable": true, "isReplicated": true, "numProtectionGroups": 19, "numProtectedObjects": 19}`)
				}))
			})
			It(`Invoke GetProtectionPolicyByID successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetProtectionPolicyByID(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProtectionPolicyByIdOptions model
				getProtectionPolicyByIdOptionsModel := new(backuprecoveryv1.GetProtectionPolicyByIdOptions)
				getProtectionPolicyByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionPolicyByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPolicyByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPolicyByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetProtectionPolicyByID(getProtectionPolicyByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetProtectionPolicyByID with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionPolicyByIdOptions model
				getProtectionPolicyByIdOptionsModel := new(backuprecoveryv1.GetProtectionPolicyByIdOptions)
				getProtectionPolicyByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionPolicyByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPolicyByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPolicyByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetProtectionPolicyByID(getProtectionPolicyByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProtectionPolicyByIdOptions model with no property values
				getProtectionPolicyByIdOptionsModelNew := new(backuprecoveryv1.GetProtectionPolicyByIdOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetProtectionPolicyByID(getProtectionPolicyByIdOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProtectionPolicyByID successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionPolicyByIdOptions model
				getProtectionPolicyByIdOptionsModel := new(backuprecoveryv1.GetProtectionPolicyByIdOptions)
				getProtectionPolicyByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionPolicyByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionPolicyByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionPolicyByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetProtectionPolicyByID(getProtectionPolicyByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProtectionPolicy(updateProtectionPolicyOptions *UpdateProtectionPolicyOptions) - Operation response error`, func() {
		updateProtectionPolicyPath := "/data-protect/policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionPolicyPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateProtectionPolicy with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the UpdateProtectionPolicyOptions model
				updateProtectionPolicyOptionsModel := new(backuprecoveryv1.UpdateProtectionPolicyOptions)
				updateProtectionPolicyOptionsModel.ID = core.StringPtr("testString")
				updateProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionPolicyOptionsModel.Name = core.StringPtr("update-protection-policy")
				updateProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				updateProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				updateProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				updateProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				updateProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				updateProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				updateProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				updateProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				updateProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				updateProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				updateProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				updateProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.UpdateProtectionPolicy(updateProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.UpdateProtectionPolicy(updateProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProtectionPolicy(updateProtectionPolicyOptions *UpdateProtectionPolicyOptions)`, func() {
		updateProtectionPolicyPath := "/data-protect/policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionPolicyPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 8, "targetName": "TargetName", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}]}, "description": "Description", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "ConfigID"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 15, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 7, "isCBSEnabled": true, "lastModificationTimeUsecs": 25, "id": "ID", "templateId": "TemplateID", "isUsable": true, "isReplicated": true, "numProtectionGroups": 19, "numProtectedObjects": 19}`)
				}))
			})
			It(`Invoke UpdateProtectionPolicy successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the UpdateProtectionPolicyOptions model
				updateProtectionPolicyOptionsModel := new(backuprecoveryv1.UpdateProtectionPolicyOptions)
				updateProtectionPolicyOptionsModel.ID = core.StringPtr("testString")
				updateProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionPolicyOptionsModel.Name = core.StringPtr("update-protection-policy")
				updateProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				updateProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				updateProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				updateProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				updateProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				updateProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				updateProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				updateProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				updateProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				updateProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				updateProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				updateProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.UpdateProtectionPolicyWithContext(ctx, updateProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.UpdateProtectionPolicy(updateProtectionPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.UpdateProtectionPolicyWithContext(ctx, updateProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionPolicyPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 8, "targetName": "TargetName", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}]}, "description": "Description", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "ConfigID"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 15, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 7, "isCBSEnabled": true, "lastModificationTimeUsecs": 25, "id": "ID", "templateId": "TemplateID", "isUsable": true, "isReplicated": true, "numProtectionGroups": 19, "numProtectedObjects": 19}`)
				}))
			})
			It(`Invoke UpdateProtectionPolicy successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.UpdateProtectionPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the UpdateProtectionPolicyOptions model
				updateProtectionPolicyOptionsModel := new(backuprecoveryv1.UpdateProtectionPolicyOptions)
				updateProtectionPolicyOptionsModel.ID = core.StringPtr("testString")
				updateProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionPolicyOptionsModel.Name = core.StringPtr("update-protection-policy")
				updateProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				updateProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				updateProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				updateProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				updateProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				updateProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				updateProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				updateProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				updateProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				updateProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				updateProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				updateProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.UpdateProtectionPolicy(updateProtectionPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateProtectionPolicy with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the UpdateProtectionPolicyOptions model
				updateProtectionPolicyOptionsModel := new(backuprecoveryv1.UpdateProtectionPolicyOptions)
				updateProtectionPolicyOptionsModel.ID = core.StringPtr("testString")
				updateProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionPolicyOptionsModel.Name = core.StringPtr("update-protection-policy")
				updateProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				updateProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				updateProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				updateProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				updateProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				updateProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				updateProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				updateProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				updateProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				updateProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				updateProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				updateProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.UpdateProtectionPolicy(updateProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateProtectionPolicyOptions model with no property values
				updateProtectionPolicyOptionsModelNew := new(backuprecoveryv1.UpdateProtectionPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.UpdateProtectionPolicy(updateProtectionPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateProtectionPolicy successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				weekScheduleModel.DayOfWeek = []string{"Sunday"}

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				yearScheduleModel.DayOfYear = core.StringPtr("First")

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				fullBackupPolicyModel.Schedule = fullScheduleModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				cdpBackupPolicyModel.Retention = cdpRetentionModel

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))

				// Construct an instance of the UpdateProtectionPolicyOptions model
				updateProtectionPolicyOptionsModel := new(backuprecoveryv1.UpdateProtectionPolicyOptions)
				updateProtectionPolicyOptionsModel.ID = core.StringPtr("testString")
				updateProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionPolicyOptionsModel.Name = core.StringPtr("update-protection-policy")
				updateProtectionPolicyOptionsModel.BackupPolicy = backupPolicyModel
				updateProtectionPolicyOptionsModel.Description = core.StringPtr("Protection Policy")
				updateProtectionPolicyOptionsModel.BlackoutWindow = []backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}
				updateProtectionPolicyOptionsModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				updateProtectionPolicyOptionsModel.RemoteTargetPolicy = targetsConfigurationModel
				updateProtectionPolicyOptionsModel.CascadedTargetsConfig = []backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}
				updateProtectionPolicyOptionsModel.RetryOptions = retryOptionsModel
				updateProtectionPolicyOptionsModel.DataLock = core.StringPtr("Compliance")
				updateProtectionPolicyOptionsModel.Version = core.Int64Ptr(int64(38))
				updateProtectionPolicyOptionsModel.IsCBSEnabled = core.BoolPtr(true)
				updateProtectionPolicyOptionsModel.LastModificationTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionPolicyOptionsModel.TemplateID = core.StringPtr("protection-policy-template")
				updateProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.UpdateProtectionPolicy(updateProtectionPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteProtectionPolicy(deleteProtectionPolicyOptions *DeleteProtectionPolicyOptions)`, func() {
		deleteProtectionPolicyPath := "/data-protect/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteProtectionPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteProtectionPolicy successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := backupRecoveryService.DeleteProtectionPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteProtectionPolicyOptions model
				deleteProtectionPolicyOptionsModel := new(backuprecoveryv1.DeleteProtectionPolicyOptions)
				deleteProtectionPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = backupRecoveryService.DeleteProtectionPolicy(deleteProtectionPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteProtectionPolicy with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the DeleteProtectionPolicyOptions model
				deleteProtectionPolicyOptionsModel := new(backuprecoveryv1.DeleteProtectionPolicyOptions)
				deleteProtectionPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteProtectionPolicyOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteProtectionPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := backupRecoveryService.DeleteProtectionPolicy(deleteProtectionPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteProtectionPolicyOptions model with no property values
				deleteProtectionPolicyOptionsModelNew := new(backuprecoveryv1.DeleteProtectionPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = backupRecoveryService.DeleteProtectionPolicy(deleteProtectionPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionGroups(getProtectionGroupsOptions *GetProtectionGroupsOptions) - Operation response error`, func() {
		getProtectionGroupsPath := "/data-protect/protection-groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantID")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for includeGroupsWithDatalockOnly query parameter
					// TODO: Add check for isActive query parameter
					// TODO: Add check for isDeleted query parameter
					// TODO: Add check for isPaused query parameter
					// TODO: Add check for isLastRunSlaViolated query parameter
					// TODO: Add check for includeLastRunInfo query parameter
					// TODO: Add check for pruneExcludedSourceIds query parameter
					// TODO: Add check for pruneSourceIds query parameter
					// TODO: Add check for useCachedData query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProtectionGroups with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupsOptions model
				getProtectionGroupsOptionsModel := new(backuprecoveryv1.GetProtectionGroupsOptions)
				getProtectionGroupsOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupsOptionsModel.Ids = []string{"protectionGroupId1"}
				getProtectionGroupsOptionsModel.Names = []string{"policyName1"}
				getProtectionGroupsOptionsModel.PolicyIds = []string{"policyId1"}
				getProtectionGroupsOptionsModel.IncludeGroupsWithDatalockOnly = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.Environments = []string{"kPhysical"}
				getProtectionGroupsOptionsModel.IsActive = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsDeleted = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsPaused = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.LastRunLocalBackupStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunReplicationStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunArchivalStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunCloudSpinStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunAnyStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.IsLastRunSlaViolated = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.SourceIds = []int64{int64(26)}
				getProtectionGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetProtectionGroups(getProtectionGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetProtectionGroups(getProtectionGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionGroups(getProtectionGroupsOptions *GetProtectionGroupsOptions)`, func() {
		getProtectionGroupsPath := "/data-protect/protection-groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantID")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for includeGroupsWithDatalockOnly query parameter
					// TODO: Add check for isActive query parameter
					// TODO: Add check for isDeleted query parameter
					// TODO: Add check for isPaused query parameter
					// TODO: Add check for isLastRunSlaViolated query parameter
					// TODO: Add check for includeLastRunInfo query parameter
					// TODO: Add check for pruneExcludedSourceIds query parameter
					// TODO: Add check for pruneSourceIds query parameter
					// TODO: Add check for useCachedData query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"protectionGroups": [{"id": "ID", "name": "Name", "clusterId": "ClusterID", "regionId": "RegionID", "policyId": "PolicyID", "priority": "kLow", "description": "Description", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 12, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "EmailAddress", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": false, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isProtectOnce": false, "missingEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "invalidEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "numProtectedObjects": 19, "advancedConfigs": [{"key": "Key", "value": "Value"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 2, "name": "Name", "volumeGuids": ["VolumeGuids"], "enableSystemBackup": true, "excludedVssWriters": ["ExcludedVssWriters"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "quiesce": false, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "excludedVssWriters": ["ExcludedVssWriters"], "cobmrBackup": false}, "fileProtectionTypeParams": {"excludedVssWriters": ["ExcludedVssWriters"], "objects": [{"excludedVssWriters": ["ExcludedVssWriters"], "id": 2, "name": "Name", "filePaths": [{"includedPath": "IncludedPath", "excludedPaths": ["ExcludedPaths"], "skipNestedVolumes": false}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["NestedVolumeTypesToSkip"], "followNasSymlinkTarget": true, "metadataFilePath": "MetadataFilePath"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "quiesce": false, "continueOnQuiesceFailure": true, "cobmrBackup": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "globalExcludePaths": ["GlobalExcludePaths"], "globalExcludeFS": ["GlobalExcludeFS"], "ignorableErrors": ["kEOF"], "allowParallelRuns": false}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 6, "hostName": "HostName"}], "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 10, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "withClause": "WithClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 6, "hostName": "HostName", "volumeGuids": ["VolumeGuids"]}], "backupDbVolumesOnly": false, "incrementalBackupAfterRestart": false, "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}]}}}]}`)
				}))
			})
			It(`Invoke GetProtectionGroups successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetProtectionGroupsOptions model
				getProtectionGroupsOptionsModel := new(backuprecoveryv1.GetProtectionGroupsOptions)
				getProtectionGroupsOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupsOptionsModel.Ids = []string{"protectionGroupId1"}
				getProtectionGroupsOptionsModel.Names = []string{"policyName1"}
				getProtectionGroupsOptionsModel.PolicyIds = []string{"policyId1"}
				getProtectionGroupsOptionsModel.IncludeGroupsWithDatalockOnly = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.Environments = []string{"kPhysical"}
				getProtectionGroupsOptionsModel.IsActive = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsDeleted = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsPaused = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.LastRunLocalBackupStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunReplicationStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunArchivalStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunCloudSpinStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunAnyStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.IsLastRunSlaViolated = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.SourceIds = []int64{int64(26)}
				getProtectionGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetProtectionGroupsWithContext(ctx, getProtectionGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetProtectionGroups(getProtectionGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetProtectionGroupsWithContext(ctx, getProtectionGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantID")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for includeGroupsWithDatalockOnly query parameter
					// TODO: Add check for isActive query parameter
					// TODO: Add check for isDeleted query parameter
					// TODO: Add check for isPaused query parameter
					// TODO: Add check for isLastRunSlaViolated query parameter
					// TODO: Add check for includeLastRunInfo query parameter
					// TODO: Add check for pruneExcludedSourceIds query parameter
					// TODO: Add check for pruneSourceIds query parameter
					// TODO: Add check for useCachedData query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"protectionGroups": [{"id": "ID", "name": "Name", "clusterId": "ClusterID", "regionId": "RegionID", "policyId": "PolicyID", "priority": "kLow", "description": "Description", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 12, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "EmailAddress", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": false, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isProtectOnce": false, "missingEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "invalidEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "numProtectedObjects": 19, "advancedConfigs": [{"key": "Key", "value": "Value"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 2, "name": "Name", "volumeGuids": ["VolumeGuids"], "enableSystemBackup": true, "excludedVssWriters": ["ExcludedVssWriters"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "quiesce": false, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "excludedVssWriters": ["ExcludedVssWriters"], "cobmrBackup": false}, "fileProtectionTypeParams": {"excludedVssWriters": ["ExcludedVssWriters"], "objects": [{"excludedVssWriters": ["ExcludedVssWriters"], "id": 2, "name": "Name", "filePaths": [{"includedPath": "IncludedPath", "excludedPaths": ["ExcludedPaths"], "skipNestedVolumes": false}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["NestedVolumeTypesToSkip"], "followNasSymlinkTarget": true, "metadataFilePath": "MetadataFilePath"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "quiesce": false, "continueOnQuiesceFailure": true, "cobmrBackup": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "globalExcludePaths": ["GlobalExcludePaths"], "globalExcludeFS": ["GlobalExcludeFS"], "ignorableErrors": ["kEOF"], "allowParallelRuns": false}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 6, "hostName": "HostName"}], "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 10, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "withClause": "WithClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 6, "hostName": "HostName", "volumeGuids": ["VolumeGuids"]}], "backupDbVolumesOnly": false, "incrementalBackupAfterRestart": false, "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}]}}}]}`)
				}))
			})
			It(`Invoke GetProtectionGroups successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetProtectionGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProtectionGroupsOptions model
				getProtectionGroupsOptionsModel := new(backuprecoveryv1.GetProtectionGroupsOptions)
				getProtectionGroupsOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupsOptionsModel.Ids = []string{"protectionGroupId1"}
				getProtectionGroupsOptionsModel.Names = []string{"policyName1"}
				getProtectionGroupsOptionsModel.PolicyIds = []string{"policyId1"}
				getProtectionGroupsOptionsModel.IncludeGroupsWithDatalockOnly = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.Environments = []string{"kPhysical"}
				getProtectionGroupsOptionsModel.IsActive = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsDeleted = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsPaused = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.LastRunLocalBackupStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunReplicationStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunArchivalStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunCloudSpinStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunAnyStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.IsLastRunSlaViolated = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.SourceIds = []int64{int64(26)}
				getProtectionGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetProtectionGroups(getProtectionGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetProtectionGroups with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupsOptions model
				getProtectionGroupsOptionsModel := new(backuprecoveryv1.GetProtectionGroupsOptions)
				getProtectionGroupsOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupsOptionsModel.Ids = []string{"protectionGroupId1"}
				getProtectionGroupsOptionsModel.Names = []string{"policyName1"}
				getProtectionGroupsOptionsModel.PolicyIds = []string{"policyId1"}
				getProtectionGroupsOptionsModel.IncludeGroupsWithDatalockOnly = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.Environments = []string{"kPhysical"}
				getProtectionGroupsOptionsModel.IsActive = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsDeleted = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsPaused = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.LastRunLocalBackupStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunReplicationStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunArchivalStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunCloudSpinStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunAnyStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.IsLastRunSlaViolated = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.SourceIds = []int64{int64(26)}
				getProtectionGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetProtectionGroups(getProtectionGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProtectionGroupsOptions model with no property values
				getProtectionGroupsOptionsModelNew := new(backuprecoveryv1.GetProtectionGroupsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetProtectionGroups(getProtectionGroupsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProtectionGroups successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupsOptions model
				getProtectionGroupsOptionsModel := new(backuprecoveryv1.GetProtectionGroupsOptions)
				getProtectionGroupsOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupsOptionsModel.Ids = []string{"protectionGroupId1"}
				getProtectionGroupsOptionsModel.Names = []string{"policyName1"}
				getProtectionGroupsOptionsModel.PolicyIds = []string{"policyId1"}
				getProtectionGroupsOptionsModel.IncludeGroupsWithDatalockOnly = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.Environments = []string{"kPhysical"}
				getProtectionGroupsOptionsModel.IsActive = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsDeleted = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IsPaused = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.LastRunLocalBackupStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunReplicationStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunArchivalStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunCloudSpinStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.LastRunAnyStatus = []string{"Accepted"}
				getProtectionGroupsOptionsModel.IsLastRunSlaViolated = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupsOptionsModel.SourceIds = []int64{int64(26)}
				getProtectionGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetProtectionGroups(getProtectionGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProtectionGroup(createProtectionGroupOptions *CreateProtectionGroupOptions) - Operation response error`, func() {
		createProtectionGroupPath := "/data-protect/protection-groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateProtectionGroup with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the CreateProtectionGroupOptions model
				createProtectionGroupOptionsModel := new(backuprecoveryv1.CreateProtectionGroupOptions)
				createProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupOptionsModel.Name = core.StringPtr("create-protection-group")
				createProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				createProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				createProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				createProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				createProtectionGroupOptionsModel.StartTime = timeOfDayModel
				createProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				createProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				createProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				createProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				createProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				createProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				createProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				createProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.CreateProtectionGroup(createProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.CreateProtectionGroup(createProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProtectionGroup(createProtectionGroupOptions *CreateProtectionGroupOptions)`, func() {
		createProtectionGroupPath := "/data-protect/protection-groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "clusterId": "ClusterID", "regionId": "RegionID", "policyId": "PolicyID", "priority": "kLow", "description": "Description", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 12, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "EmailAddress", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": false, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isProtectOnce": false, "missingEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "invalidEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "numProtectedObjects": 19, "advancedConfigs": [{"key": "Key", "value": "Value"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 2, "name": "Name", "volumeGuids": ["VolumeGuids"], "enableSystemBackup": true, "excludedVssWriters": ["ExcludedVssWriters"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "quiesce": false, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "excludedVssWriters": ["ExcludedVssWriters"], "cobmrBackup": false}, "fileProtectionTypeParams": {"excludedVssWriters": ["ExcludedVssWriters"], "objects": [{"excludedVssWriters": ["ExcludedVssWriters"], "id": 2, "name": "Name", "filePaths": [{"includedPath": "IncludedPath", "excludedPaths": ["ExcludedPaths"], "skipNestedVolumes": false}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["NestedVolumeTypesToSkip"], "followNasSymlinkTarget": true, "metadataFilePath": "MetadataFilePath"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "quiesce": false, "continueOnQuiesceFailure": true, "cobmrBackup": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "globalExcludePaths": ["GlobalExcludePaths"], "globalExcludeFS": ["GlobalExcludeFS"], "ignorableErrors": ["kEOF"], "allowParallelRuns": false}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 6, "hostName": "HostName"}], "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 10, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "withClause": "WithClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 6, "hostName": "HostName", "volumeGuids": ["VolumeGuids"]}], "backupDbVolumesOnly": false, "incrementalBackupAfterRestart": false, "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}]}}}`)
				}))
			})
			It(`Invoke CreateProtectionGroup successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the CreateProtectionGroupOptions model
				createProtectionGroupOptionsModel := new(backuprecoveryv1.CreateProtectionGroupOptions)
				createProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupOptionsModel.Name = core.StringPtr("create-protection-group")
				createProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				createProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				createProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				createProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				createProtectionGroupOptionsModel.StartTime = timeOfDayModel
				createProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				createProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				createProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				createProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				createProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				createProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				createProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				createProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.CreateProtectionGroupWithContext(ctx, createProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.CreateProtectionGroup(createProtectionGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.CreateProtectionGroupWithContext(ctx, createProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "clusterId": "ClusterID", "regionId": "RegionID", "policyId": "PolicyID", "priority": "kLow", "description": "Description", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 12, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "EmailAddress", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": false, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isProtectOnce": false, "missingEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "invalidEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "numProtectedObjects": 19, "advancedConfigs": [{"key": "Key", "value": "Value"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 2, "name": "Name", "volumeGuids": ["VolumeGuids"], "enableSystemBackup": true, "excludedVssWriters": ["ExcludedVssWriters"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "quiesce": false, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "excludedVssWriters": ["ExcludedVssWriters"], "cobmrBackup": false}, "fileProtectionTypeParams": {"excludedVssWriters": ["ExcludedVssWriters"], "objects": [{"excludedVssWriters": ["ExcludedVssWriters"], "id": 2, "name": "Name", "filePaths": [{"includedPath": "IncludedPath", "excludedPaths": ["ExcludedPaths"], "skipNestedVolumes": false}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["NestedVolumeTypesToSkip"], "followNasSymlinkTarget": true, "metadataFilePath": "MetadataFilePath"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "quiesce": false, "continueOnQuiesceFailure": true, "cobmrBackup": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "globalExcludePaths": ["GlobalExcludePaths"], "globalExcludeFS": ["GlobalExcludeFS"], "ignorableErrors": ["kEOF"], "allowParallelRuns": false}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 6, "hostName": "HostName"}], "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 10, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "withClause": "WithClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 6, "hostName": "HostName", "volumeGuids": ["VolumeGuids"]}], "backupDbVolumesOnly": false, "incrementalBackupAfterRestart": false, "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}]}}}`)
				}))
			})
			It(`Invoke CreateProtectionGroup successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.CreateProtectionGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the CreateProtectionGroupOptions model
				createProtectionGroupOptionsModel := new(backuprecoveryv1.CreateProtectionGroupOptions)
				createProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupOptionsModel.Name = core.StringPtr("create-protection-group")
				createProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				createProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				createProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				createProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				createProtectionGroupOptionsModel.StartTime = timeOfDayModel
				createProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				createProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				createProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				createProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				createProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				createProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				createProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				createProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.CreateProtectionGroup(createProtectionGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateProtectionGroup with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the CreateProtectionGroupOptions model
				createProtectionGroupOptionsModel := new(backuprecoveryv1.CreateProtectionGroupOptions)
				createProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupOptionsModel.Name = core.StringPtr("create-protection-group")
				createProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				createProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				createProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				createProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				createProtectionGroupOptionsModel.StartTime = timeOfDayModel
				createProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				createProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				createProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				createProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				createProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				createProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				createProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				createProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.CreateProtectionGroup(createProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateProtectionGroupOptions model with no property values
				createProtectionGroupOptionsModelNew := new(backuprecoveryv1.CreateProtectionGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.CreateProtectionGroup(createProtectionGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateProtectionGroup successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the CreateProtectionGroupOptions model
				createProtectionGroupOptionsModel := new(backuprecoveryv1.CreateProtectionGroupOptions)
				createProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupOptionsModel.Name = core.StringPtr("create-protection-group")
				createProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				createProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				createProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				createProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				createProtectionGroupOptionsModel.StartTime = timeOfDayModel
				createProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				createProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				createProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				createProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				createProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				createProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				createProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				createProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				createProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				createProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.CreateProtectionGroup(createProtectionGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionGroupByID(getProtectionGroupByIdOptions *GetProtectionGroupByIdOptions) - Operation response error`, func() {
		getProtectionGroupByIDPath := "/data-protect/protection-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupByIDPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantID")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for includeLastRunInfo query parameter
					// TODO: Add check for pruneExcludedSourceIds query parameter
					// TODO: Add check for pruneSourceIds query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProtectionGroupByID with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupByIdOptions model
				getProtectionGroupByIdOptionsModel := new(backuprecoveryv1.GetProtectionGroupByIdOptions)
				getProtectionGroupByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupByIdOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetProtectionGroupByID(getProtectionGroupByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetProtectionGroupByID(getProtectionGroupByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionGroupByID(getProtectionGroupByIdOptions *GetProtectionGroupByIdOptions)`, func() {
		getProtectionGroupByIDPath := "/data-protect/protection-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupByIDPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantID")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for includeLastRunInfo query parameter
					// TODO: Add check for pruneExcludedSourceIds query parameter
					// TODO: Add check for pruneSourceIds query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "clusterId": "ClusterID", "regionId": "RegionID", "policyId": "PolicyID", "priority": "kLow", "description": "Description", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 12, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "EmailAddress", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": false, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isProtectOnce": false, "missingEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "invalidEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "numProtectedObjects": 19, "advancedConfigs": [{"key": "Key", "value": "Value"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 2, "name": "Name", "volumeGuids": ["VolumeGuids"], "enableSystemBackup": true, "excludedVssWriters": ["ExcludedVssWriters"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "quiesce": false, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "excludedVssWriters": ["ExcludedVssWriters"], "cobmrBackup": false}, "fileProtectionTypeParams": {"excludedVssWriters": ["ExcludedVssWriters"], "objects": [{"excludedVssWriters": ["ExcludedVssWriters"], "id": 2, "name": "Name", "filePaths": [{"includedPath": "IncludedPath", "excludedPaths": ["ExcludedPaths"], "skipNestedVolumes": false}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["NestedVolumeTypesToSkip"], "followNasSymlinkTarget": true, "metadataFilePath": "MetadataFilePath"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "quiesce": false, "continueOnQuiesceFailure": true, "cobmrBackup": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "globalExcludePaths": ["GlobalExcludePaths"], "globalExcludeFS": ["GlobalExcludeFS"], "ignorableErrors": ["kEOF"], "allowParallelRuns": false}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 6, "hostName": "HostName"}], "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 10, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "withClause": "WithClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 6, "hostName": "HostName", "volumeGuids": ["VolumeGuids"]}], "backupDbVolumesOnly": false, "incrementalBackupAfterRestart": false, "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}]}}}`)
				}))
			})
			It(`Invoke GetProtectionGroupByID successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetProtectionGroupByIdOptions model
				getProtectionGroupByIdOptionsModel := new(backuprecoveryv1.GetProtectionGroupByIdOptions)
				getProtectionGroupByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupByIdOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetProtectionGroupByIDWithContext(ctx, getProtectionGroupByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetProtectionGroupByID(getProtectionGroupByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetProtectionGroupByIDWithContext(ctx, getProtectionGroupByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupByIDPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantID")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// TODO: Add check for includeLastRunInfo query parameter
					// TODO: Add check for pruneExcludedSourceIds query parameter
					// TODO: Add check for pruneSourceIds query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "clusterId": "ClusterID", "regionId": "RegionID", "policyId": "PolicyID", "priority": "kLow", "description": "Description", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 12, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "EmailAddress", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": false, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isProtectOnce": false, "missingEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "invalidEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "numProtectedObjects": 19, "advancedConfigs": [{"key": "Key", "value": "Value"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 2, "name": "Name", "volumeGuids": ["VolumeGuids"], "enableSystemBackup": true, "excludedVssWriters": ["ExcludedVssWriters"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "quiesce": false, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "excludedVssWriters": ["ExcludedVssWriters"], "cobmrBackup": false}, "fileProtectionTypeParams": {"excludedVssWriters": ["ExcludedVssWriters"], "objects": [{"excludedVssWriters": ["ExcludedVssWriters"], "id": 2, "name": "Name", "filePaths": [{"includedPath": "IncludedPath", "excludedPaths": ["ExcludedPaths"], "skipNestedVolumes": false}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["NestedVolumeTypesToSkip"], "followNasSymlinkTarget": true, "metadataFilePath": "MetadataFilePath"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "quiesce": false, "continueOnQuiesceFailure": true, "cobmrBackup": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "globalExcludePaths": ["GlobalExcludePaths"], "globalExcludeFS": ["GlobalExcludeFS"], "ignorableErrors": ["kEOF"], "allowParallelRuns": false}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 6, "hostName": "HostName"}], "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 10, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "withClause": "WithClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 6, "hostName": "HostName", "volumeGuids": ["VolumeGuids"]}], "backupDbVolumesOnly": false, "incrementalBackupAfterRestart": false, "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}]}}}`)
				}))
			})
			It(`Invoke GetProtectionGroupByID successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetProtectionGroupByID(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProtectionGroupByIdOptions model
				getProtectionGroupByIdOptionsModel := new(backuprecoveryv1.GetProtectionGroupByIdOptions)
				getProtectionGroupByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupByIdOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetProtectionGroupByID(getProtectionGroupByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetProtectionGroupByID with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupByIdOptions model
				getProtectionGroupByIdOptionsModel := new(backuprecoveryv1.GetProtectionGroupByIdOptions)
				getProtectionGroupByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupByIdOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetProtectionGroupByID(getProtectionGroupByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProtectionGroupByIdOptions model with no property values
				getProtectionGroupByIdOptionsModelNew := new(backuprecoveryv1.GetProtectionGroupByIdOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetProtectionGroupByID(getProtectionGroupByIdOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProtectionGroupByID successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupByIdOptions model
				getProtectionGroupByIdOptionsModel := new(backuprecoveryv1.GetProtectionGroupByIdOptions)
				getProtectionGroupByIdOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantID")
				getProtectionGroupByIdOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupByIdOptionsModel.IncludeLastRunInfo = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneExcludedSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.PruneSourceIds = core.BoolPtr(true)
				getProtectionGroupByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetProtectionGroupByID(getProtectionGroupByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProtectionGroup(updateProtectionGroupOptions *UpdateProtectionGroupOptions) - Operation response error`, func() {
		updateProtectionGroupPath := "/data-protect/protection-groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionGroupPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateProtectionGroup with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the UpdateProtectionGroupOptions model
				updateProtectionGroupOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupOptions)
				updateProtectionGroupOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupOptionsModel.Name = core.StringPtr("update-protection-group")
				updateProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				updateProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				updateProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				updateProtectionGroupOptionsModel.StartTime = timeOfDayModel
				updateProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				updateProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				updateProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				updateProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroup(updateProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.UpdateProtectionGroup(updateProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProtectionGroup(updateProtectionGroupOptions *UpdateProtectionGroupOptions)`, func() {
		updateProtectionGroupPath := "/data-protect/protection-groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionGroupPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "clusterId": "ClusterID", "regionId": "RegionID", "policyId": "PolicyID", "priority": "kLow", "description": "Description", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 12, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "EmailAddress", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": false, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isProtectOnce": false, "missingEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "invalidEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "numProtectedObjects": 19, "advancedConfigs": [{"key": "Key", "value": "Value"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 2, "name": "Name", "volumeGuids": ["VolumeGuids"], "enableSystemBackup": true, "excludedVssWriters": ["ExcludedVssWriters"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "quiesce": false, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "excludedVssWriters": ["ExcludedVssWriters"], "cobmrBackup": false}, "fileProtectionTypeParams": {"excludedVssWriters": ["ExcludedVssWriters"], "objects": [{"excludedVssWriters": ["ExcludedVssWriters"], "id": 2, "name": "Name", "filePaths": [{"includedPath": "IncludedPath", "excludedPaths": ["ExcludedPaths"], "skipNestedVolumes": false}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["NestedVolumeTypesToSkip"], "followNasSymlinkTarget": true, "metadataFilePath": "MetadataFilePath"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "quiesce": false, "continueOnQuiesceFailure": true, "cobmrBackup": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "globalExcludePaths": ["GlobalExcludePaths"], "globalExcludeFS": ["GlobalExcludeFS"], "ignorableErrors": ["kEOF"], "allowParallelRuns": false}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 6, "hostName": "HostName"}], "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 10, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "withClause": "WithClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 6, "hostName": "HostName", "volumeGuids": ["VolumeGuids"]}], "backupDbVolumesOnly": false, "incrementalBackupAfterRestart": false, "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}]}}}`)
				}))
			})
			It(`Invoke UpdateProtectionGroup successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the UpdateProtectionGroupOptions model
				updateProtectionGroupOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupOptions)
				updateProtectionGroupOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupOptionsModel.Name = core.StringPtr("update-protection-group")
				updateProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				updateProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				updateProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				updateProtectionGroupOptionsModel.StartTime = timeOfDayModel
				updateProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				updateProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				updateProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				updateProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.UpdateProtectionGroupWithContext(ctx, updateProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroup(updateProtectionGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.UpdateProtectionGroupWithContext(ctx, updateProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionGroupPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "clusterId": "ClusterID", "regionId": "RegionID", "policyId": "PolicyID", "priority": "kLow", "description": "Description", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 12, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "EmailAddress", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": false, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isProtectOnce": false, "missingEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "invalidEntities": [{"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}], "numProtectedObjects": 19, "advancedConfigs": [{"key": "Key", "value": "Value"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 2, "name": "Name", "volumeGuids": ["VolumeGuids"], "enableSystemBackup": true, "excludedVssWriters": ["ExcludedVssWriters"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "quiesce": false, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "excludedVssWriters": ["ExcludedVssWriters"], "cobmrBackup": false}, "fileProtectionTypeParams": {"excludedVssWriters": ["ExcludedVssWriters"], "objects": [{"excludedVssWriters": ["ExcludedVssWriters"], "id": 2, "name": "Name", "filePaths": [{"includedPath": "IncludedPath", "excludedPaths": ["ExcludedPaths"], "skipNestedVolumes": false}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["NestedVolumeTypesToSkip"], "followNasSymlinkTarget": true, "metadataFilePath": "MetadataFilePath"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "quiesce": false, "continueOnQuiesceFailure": true, "cobmrBackup": false, "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [23], "globalExcludePaths": ["GlobalExcludePaths"], "globalExcludeFS": ["GlobalExcludeFS"], "ignorableErrors": ["kEOF"], "allowParallelRuns": false}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 6, "hostName": "HostName"}], "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 10, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}], "withClause": "WithClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": false, "excludeFilters": [{"filterString": "FilterString", "isRegularExpression": false}], "fullBackupsCopyOnly": false, "logBackupNumStreams": 19, "logBackupWithClause": "LogBackupWithClause", "prePostScript": {"preScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true, "continueOnError": false}, "postScript": {"path": "Path", "params": "Params", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": false, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 6, "hostName": "HostName", "volumeGuids": ["VolumeGuids"]}], "backupDbVolumesOnly": false, "incrementalBackupAfterRestart": false, "indexingPolicy": {"enableIndexing": true, "includePaths": ["IncludePaths"], "excludePaths": ["ExcludePaths"]}, "objects": [{"id": 2, "name": "Name", "sourceType": "SourceType"}]}}}`)
				}))
			})
			It(`Invoke UpdateProtectionGroup successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the UpdateProtectionGroupOptions model
				updateProtectionGroupOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupOptions)
				updateProtectionGroupOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupOptionsModel.Name = core.StringPtr("update-protection-group")
				updateProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				updateProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				updateProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				updateProtectionGroupOptionsModel.StartTime = timeOfDayModel
				updateProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				updateProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				updateProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				updateProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.UpdateProtectionGroup(updateProtectionGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateProtectionGroup with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the UpdateProtectionGroupOptions model
				updateProtectionGroupOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupOptions)
				updateProtectionGroupOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupOptionsModel.Name = core.StringPtr("update-protection-group")
				updateProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				updateProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				updateProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				updateProtectionGroupOptionsModel.StartTime = timeOfDayModel
				updateProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				updateProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				updateProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				updateProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroup(updateProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateProtectionGroupOptions model with no property values
				updateProtectionGroupOptionsModelNew := new(backuprecoveryv1.UpdateProtectionGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.UpdateProtectionGroup(updateProtectionGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateProtectionGroup successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel

				// Construct an instance of the UpdateProtectionGroupOptions model
				updateProtectionGroupOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupOptions)
				updateProtectionGroupOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupOptionsModel.Name = core.StringPtr("update-protection-group")
				updateProtectionGroupOptionsModel.PolicyID = core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				updateProtectionGroupOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionGroupOptionsModel.Priority = core.StringPtr("kLow")
				updateProtectionGroupOptionsModel.Description = core.StringPtr("Protection Group")
				updateProtectionGroupOptionsModel.StartTime = timeOfDayModel
				updateProtectionGroupOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionGroupOptionsModel.AlertPolicy = protectionGroupAlertingPolicyModel
				updateProtectionGroupOptionsModel.Sla = []backuprecoveryv1.SlaRule{*slaRuleModel}
				updateProtectionGroupOptionsModel.QosPolicy = core.StringPtr("kBackupHDD")
				updateProtectionGroupOptionsModel.AbortInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.PauseInBlackouts = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.IsPaused = core.BoolPtr(true)
				updateProtectionGroupOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionGroupOptionsModel.PhysicalParams = physicalProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.MssqlParams = mssqlProtectionGroupParamsModel
				updateProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroup(updateProtectionGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteProtectionGroup(deleteProtectionGroupOptions *DeleteProtectionGroupOptions)`, func() {
		deleteProtectionGroupPath := "/data-protect/protection-groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteProtectionGroupPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for deleteSnapshots query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteProtectionGroup successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := backupRecoveryService.DeleteProtectionGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteProtectionGroupOptions model
				deleteProtectionGroupOptionsModel := new(backuprecoveryv1.DeleteProtectionGroupOptions)
				deleteProtectionGroupOptionsModel.ID = core.StringPtr("testString")
				deleteProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteProtectionGroupOptionsModel.DeleteSnapshots = core.BoolPtr(true)
				deleteProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = backupRecoveryService.DeleteProtectionGroup(deleteProtectionGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteProtectionGroup with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the DeleteProtectionGroupOptions model
				deleteProtectionGroupOptionsModel := new(backuprecoveryv1.DeleteProtectionGroupOptions)
				deleteProtectionGroupOptionsModel.ID = core.StringPtr("testString")
				deleteProtectionGroupOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteProtectionGroupOptionsModel.DeleteSnapshots = core.BoolPtr(true)
				deleteProtectionGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := backupRecoveryService.DeleteProtectionGroup(deleteProtectionGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteProtectionGroupOptions model with no property values
				deleteProtectionGroupOptionsModelNew := new(backuprecoveryv1.DeleteProtectionGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = backupRecoveryService.DeleteProtectionGroup(deleteProtectionGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionGroupRuns(getProtectionGroupRunsOptions *GetProtectionGroupRunsOptions) - Operation response error`, func() {
		getProtectionGroupRunsPath := "/data-protect/protection-groups/testString/runs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupRunsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["runId"]).To(Equal([]string{"11:111"}))
					// TODO: Add check for startTimeUsecs query parameter
					// TODO: Add check for endTimeUsecs query parameter
					// TODO: Add check for includeObjectDetails query parameter
					// TODO: Add check for numRuns query parameter
					// TODO: Add check for excludeNonRestorableRuns query parameter
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for filterByEndTime query parameter
					// TODO: Add check for onlyReturnSuccessfulCopyRun query parameter
					// TODO: Add check for filterByCopyTaskEndTime query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProtectionGroupRuns with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupRunsOptions model
				getProtectionGroupRunsOptionsModel := new(backuprecoveryv1.GetProtectionGroupRunsOptions)
				getProtectionGroupRunsOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupRunsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionGroupRunsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupRunsOptionsModel.RunID = core.StringPtr("11:111")
				getProtectionGroupRunsOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.RunTypes = []string{"kAll"}
				getProtectionGroupRunsOptionsModel.IncludeObjectDetails = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.LocalBackupRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ReplicationRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ArchivalRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.CloudSpinRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.NumRuns = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.ExcludeNonRestorableRuns = core.BoolPtr(false)
				getProtectionGroupRunsOptionsModel.RunTags = []string{"tag1"}
				getProtectionGroupRunsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.SnapshotTargetTypes = []string{"Local"}
				getProtectionGroupRunsOptionsModel.OnlyReturnSuccessfulCopyRun = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByCopyTaskEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetProtectionGroupRuns(getProtectionGroupRunsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetProtectionGroupRuns(getProtectionGroupRunsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionGroupRuns(getProtectionGroupRunsOptions *GetProtectionGroupRunsOptions)`, func() {
		getProtectionGroupRunsPath := "/data-protect/protection-groups/testString/runs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupRunsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["runId"]).To(Equal([]string{"11:111"}))
					// TODO: Add check for startTimeUsecs query parameter
					// TODO: Add check for endTimeUsecs query parameter
					// TODO: Add check for includeObjectDetails query parameter
					// TODO: Add check for numRuns query parameter
					// TODO: Add check for excludeNonRestorableRuns query parameter
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for filterByEndTime query parameter
					// TODO: Add check for onlyReturnSuccessfulCopyRun query parameter
					// TODO: Add check for filterByCopyTaskEndTime query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runs": [{"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}], "totalRuns": 9}`)
				}))
			})
			It(`Invoke GetProtectionGroupRuns successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetProtectionGroupRunsOptions model
				getProtectionGroupRunsOptionsModel := new(backuprecoveryv1.GetProtectionGroupRunsOptions)
				getProtectionGroupRunsOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupRunsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionGroupRunsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupRunsOptionsModel.RunID = core.StringPtr("11:111")
				getProtectionGroupRunsOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.RunTypes = []string{"kAll"}
				getProtectionGroupRunsOptionsModel.IncludeObjectDetails = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.LocalBackupRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ReplicationRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ArchivalRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.CloudSpinRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.NumRuns = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.ExcludeNonRestorableRuns = core.BoolPtr(false)
				getProtectionGroupRunsOptionsModel.RunTags = []string{"tag1"}
				getProtectionGroupRunsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.SnapshotTargetTypes = []string{"Local"}
				getProtectionGroupRunsOptionsModel.OnlyReturnSuccessfulCopyRun = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByCopyTaskEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetProtectionGroupRunsWithContext(ctx, getProtectionGroupRunsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetProtectionGroupRuns(getProtectionGroupRunsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetProtectionGroupRunsWithContext(ctx, getProtectionGroupRunsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionGroupRunsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["runId"]).To(Equal([]string{"11:111"}))
					// TODO: Add check for startTimeUsecs query parameter
					// TODO: Add check for endTimeUsecs query parameter
					// TODO: Add check for includeObjectDetails query parameter
					// TODO: Add check for numRuns query parameter
					// TODO: Add check for excludeNonRestorableRuns query parameter
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for filterByEndTime query parameter
					// TODO: Add check for onlyReturnSuccessfulCopyRun query parameter
					// TODO: Add check for filterByCopyTaskEndTime query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runs": [{"id": "ID", "protectionGroupInstanceId": 25, "protectionGroupId": "ProtectionGroupID", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName"}, "originProtectionGroupId": "OriginProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "isLocalSnapshotsDeleted": false, "objects": [{"object": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "SnapshotID", "status": "kInProgress", "statusMessage": "StatusMessage", "startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "indexingTaskId": "IndexingTaskID", "statsTaskId": "StatsTaskID", "warnings": ["Warnings"], "isManuallyDeleted": false, "expiryTimeUsecs": 15, "totalFileCount": 14, "backupFileCount": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "failedAttempts": [{"startTimeUsecs": 14, "endTimeUsecs": 12, "admittedTimeUsecs": 17, "permitGrantTimeUsecs": 20, "queueDurationUsecs": 18, "snapshotCreationTimeUsecs": 25, "status": "Accepted", "stats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "progressTaskId": "ProgressTaskID", "message": "Message"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": false, "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "messages": ["Messages"], "successfulObjectsCount": 22, "skippedObjectsCount": 19, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "localSnapshotStats": {"logicalSizeBytes": 16, "bytesWritten": 12, "bytesRead": 9}, "indexingTaskId": "IndexingTaskID", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "dataLock": "Compliance", "localTaskId": "LocalTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 9, "clusterIncarnationId": 20, "clusterName": "ClusterName", "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "status": "Accepted", "message": "Message", "percentageCompleted": 19, "stats": {"logicalSizeBytes": 16, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "replicationTaskId": "ReplicationTaskID", "entriesChanged": 14, "isInBound": false, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": false, "snapshotId": "SnapshotID", "startTimeUsecs": 14, "endTimeUsecs": 12, "queuedTimeUsecs": 15, "isIncremental": false, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "Message", "progressTaskId": "ProgressTaskID", "statsTaskId": "StatsTaskID", "indexingTaskId": "IndexingTaskID", "successfulObjectsCount": 22, "failedObjectsCount": 18, "cancelledObjectsCount": 21, "successfulAppObjectsCount": 25, "failedAppObjectsCount": 21, "cancelledAppObjectsCount": 24, "stats": {"logicalSizeBytes": 16, "bytesRead": 9, "logicalBytesTransferred": 23, "physicalBytesTransferred": 24, "avgLogicalTransferRateBps": 25, "fileWalkDone": true, "totalFileCount": 14, "backupFileCount": 15}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "WormNonComplianceReason", "wormExpiryTimeUsecs": 19}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "message": "Message", "stats": {"physicalBytesTransferred": 24}, "isManuallyDeleted": false, "expiryTimeUsecs": 15, "cloudspinTaskId": "CloudspinTaskID", "progressTaskId": "ProgressTaskID", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 15}, "onLegalHold": false}]}, "onLegalHold": false, "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "isCloudArchivalDirect": false, "hasLocalSnapshot": true, "environment": "Environment", "externallyTriggeredBackupTag": "ExternallyTriggeredBackupTag"}], "totalRuns": 9}`)
				}))
			})
			It(`Invoke GetProtectionGroupRuns successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetProtectionGroupRuns(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProtectionGroupRunsOptions model
				getProtectionGroupRunsOptionsModel := new(backuprecoveryv1.GetProtectionGroupRunsOptions)
				getProtectionGroupRunsOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupRunsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionGroupRunsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupRunsOptionsModel.RunID = core.StringPtr("11:111")
				getProtectionGroupRunsOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.RunTypes = []string{"kAll"}
				getProtectionGroupRunsOptionsModel.IncludeObjectDetails = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.LocalBackupRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ReplicationRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ArchivalRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.CloudSpinRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.NumRuns = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.ExcludeNonRestorableRuns = core.BoolPtr(false)
				getProtectionGroupRunsOptionsModel.RunTags = []string{"tag1"}
				getProtectionGroupRunsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.SnapshotTargetTypes = []string{"Local"}
				getProtectionGroupRunsOptionsModel.OnlyReturnSuccessfulCopyRun = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByCopyTaskEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetProtectionGroupRuns(getProtectionGroupRunsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetProtectionGroupRuns with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupRunsOptions model
				getProtectionGroupRunsOptionsModel := new(backuprecoveryv1.GetProtectionGroupRunsOptions)
				getProtectionGroupRunsOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupRunsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionGroupRunsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupRunsOptionsModel.RunID = core.StringPtr("11:111")
				getProtectionGroupRunsOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.RunTypes = []string{"kAll"}
				getProtectionGroupRunsOptionsModel.IncludeObjectDetails = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.LocalBackupRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ReplicationRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ArchivalRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.CloudSpinRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.NumRuns = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.ExcludeNonRestorableRuns = core.BoolPtr(false)
				getProtectionGroupRunsOptionsModel.RunTags = []string{"tag1"}
				getProtectionGroupRunsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.SnapshotTargetTypes = []string{"Local"}
				getProtectionGroupRunsOptionsModel.OnlyReturnSuccessfulCopyRun = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByCopyTaskEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetProtectionGroupRuns(getProtectionGroupRunsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProtectionGroupRunsOptions model with no property values
				getProtectionGroupRunsOptionsModelNew := new(backuprecoveryv1.GetProtectionGroupRunsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetProtectionGroupRuns(getProtectionGroupRunsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProtectionGroupRuns successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionGroupRunsOptions model
				getProtectionGroupRunsOptionsModel := new(backuprecoveryv1.GetProtectionGroupRunsOptions)
				getProtectionGroupRunsOptionsModel.ID = core.StringPtr("testString")
				getProtectionGroupRunsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionGroupRunsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionGroupRunsOptionsModel.RunID = core.StringPtr("11:111")
				getProtectionGroupRunsOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.RunTypes = []string{"kAll"}
				getProtectionGroupRunsOptionsModel.IncludeObjectDetails = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.LocalBackupRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ReplicationRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.ArchivalRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.CloudSpinRunStatus = []string{"Accepted"}
				getProtectionGroupRunsOptionsModel.NumRuns = core.Int64Ptr(int64(26))
				getProtectionGroupRunsOptionsModel.ExcludeNonRestorableRuns = core.BoolPtr(false)
				getProtectionGroupRunsOptionsModel.RunTags = []string{"tag1"}
				getProtectionGroupRunsOptionsModel.UseCachedData = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.SnapshotTargetTypes = []string{"Local"}
				getProtectionGroupRunsOptionsModel.OnlyReturnSuccessfulCopyRun = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.FilterByCopyTaskEndTime = core.BoolPtr(true)
				getProtectionGroupRunsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetProtectionGroupRuns(getProtectionGroupRunsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProtectionGroupRun(updateProtectionGroupRunOptions *UpdateProtectionGroupRunOptions) - Operation response error`, func() {
		updateProtectionGroupRunPath := "/data-protect/protection-groups/testString/runs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionGroupRunPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(207)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateProtectionGroupRun with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the UpdateLocalSnapshotConfig model
				updateLocalSnapshotConfigModel := new(backuprecoveryv1.UpdateLocalSnapshotConfig)
				updateLocalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateLocalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the UpdateExistingReplicationSnapshotConfig model
				updateExistingReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingReplicationSnapshotConfig)
				updateExistingReplicationSnapshotConfigModel.ID = core.Int64Ptr(int64(4))
				updateExistingReplicationSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingReplicationSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingReplicationSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateReplicationSnapshotConfig model
				updateReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateReplicationSnapshotConfig)
				updateReplicationSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				updateReplicationSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingReplicationSnapshotConfig{*updateExistingReplicationSnapshotConfigModel}

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(2))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the UpdateExistingArchivalSnapshotConfig model
				updateExistingArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingArchivalSnapshotConfig)
				updateExistingArchivalSnapshotConfigModel.ID = core.Int64Ptr(int64(3))
				updateExistingArchivalSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingArchivalSnapshotConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				updateExistingArchivalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingArchivalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateArchivalSnapshotConfig model
				updateArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateArchivalSnapshotConfig)
				updateArchivalSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				updateArchivalSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingArchivalSnapshotConfig{*updateExistingArchivalSnapshotConfigModel}

				// Construct an instance of the UpdateProtectionGroupRunParams model
				updateProtectionGroupRunParamsModel := new(backuprecoveryv1.UpdateProtectionGroupRunParams)
				updateProtectionGroupRunParamsModel.RunID = core.StringPtr("11:111")
				updateProtectionGroupRunParamsModel.LocalSnapshotConfig = updateLocalSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ReplicationSnapshotConfig = updateReplicationSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ArchivalSnapshotConfig = updateArchivalSnapshotConfigModel

				// Construct an instance of the UpdateProtectionGroupRunOptions model
				updateProtectionGroupRunOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupRunOptions)
				updateProtectionGroupRunOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupRunOptionsModel.UpdateProtectionGroupRunParams = []backuprecoveryv1.UpdateProtectionGroupRunParams{*updateProtectionGroupRunParamsModel}
				updateProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroupRun(updateProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.UpdateProtectionGroupRun(updateProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProtectionGroupRun(updateProtectionGroupRunOptions *UpdateProtectionGroupRunOptions)`, func() {
		updateProtectionGroupRunPath := "/data-protect/protection-groups/testString/runs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionGroupRunPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(207)
					fmt.Fprintf(res, "%s", `{"successfulRunIds": ["SuccessfulRunIds"], "failedRuns": [{"runId": "RunID", "errorMessage": "ErrorMessage"}]}`)
				}))
			})
			It(`Invoke UpdateProtectionGroupRun successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the UpdateLocalSnapshotConfig model
				updateLocalSnapshotConfigModel := new(backuprecoveryv1.UpdateLocalSnapshotConfig)
				updateLocalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateLocalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the UpdateExistingReplicationSnapshotConfig model
				updateExistingReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingReplicationSnapshotConfig)
				updateExistingReplicationSnapshotConfigModel.ID = core.Int64Ptr(int64(4))
				updateExistingReplicationSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingReplicationSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingReplicationSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateReplicationSnapshotConfig model
				updateReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateReplicationSnapshotConfig)
				updateReplicationSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				updateReplicationSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingReplicationSnapshotConfig{*updateExistingReplicationSnapshotConfigModel}

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(2))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the UpdateExistingArchivalSnapshotConfig model
				updateExistingArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingArchivalSnapshotConfig)
				updateExistingArchivalSnapshotConfigModel.ID = core.Int64Ptr(int64(3))
				updateExistingArchivalSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingArchivalSnapshotConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				updateExistingArchivalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingArchivalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateArchivalSnapshotConfig model
				updateArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateArchivalSnapshotConfig)
				updateArchivalSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				updateArchivalSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingArchivalSnapshotConfig{*updateExistingArchivalSnapshotConfigModel}

				// Construct an instance of the UpdateProtectionGroupRunParams model
				updateProtectionGroupRunParamsModel := new(backuprecoveryv1.UpdateProtectionGroupRunParams)
				updateProtectionGroupRunParamsModel.RunID = core.StringPtr("11:111")
				updateProtectionGroupRunParamsModel.LocalSnapshotConfig = updateLocalSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ReplicationSnapshotConfig = updateReplicationSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ArchivalSnapshotConfig = updateArchivalSnapshotConfigModel

				// Construct an instance of the UpdateProtectionGroupRunOptions model
				updateProtectionGroupRunOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupRunOptions)
				updateProtectionGroupRunOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupRunOptionsModel.UpdateProtectionGroupRunParams = []backuprecoveryv1.UpdateProtectionGroupRunParams{*updateProtectionGroupRunParamsModel}
				updateProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.UpdateProtectionGroupRunWithContext(ctx, updateProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroupRun(updateProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.UpdateProtectionGroupRunWithContext(ctx, updateProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionGroupRunPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(207)
					fmt.Fprintf(res, "%s", `{"successfulRunIds": ["SuccessfulRunIds"], "failedRuns": [{"runId": "RunID", "errorMessage": "ErrorMessage"}]}`)
				}))
			})
			It(`Invoke UpdateProtectionGroupRun successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroupRun(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateLocalSnapshotConfig model
				updateLocalSnapshotConfigModel := new(backuprecoveryv1.UpdateLocalSnapshotConfig)
				updateLocalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateLocalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the UpdateExistingReplicationSnapshotConfig model
				updateExistingReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingReplicationSnapshotConfig)
				updateExistingReplicationSnapshotConfigModel.ID = core.Int64Ptr(int64(4))
				updateExistingReplicationSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingReplicationSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingReplicationSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateReplicationSnapshotConfig model
				updateReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateReplicationSnapshotConfig)
				updateReplicationSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				updateReplicationSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingReplicationSnapshotConfig{*updateExistingReplicationSnapshotConfigModel}

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(2))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the UpdateExistingArchivalSnapshotConfig model
				updateExistingArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingArchivalSnapshotConfig)
				updateExistingArchivalSnapshotConfigModel.ID = core.Int64Ptr(int64(3))
				updateExistingArchivalSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingArchivalSnapshotConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				updateExistingArchivalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingArchivalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateArchivalSnapshotConfig model
				updateArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateArchivalSnapshotConfig)
				updateArchivalSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				updateArchivalSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingArchivalSnapshotConfig{*updateExistingArchivalSnapshotConfigModel}

				// Construct an instance of the UpdateProtectionGroupRunParams model
				updateProtectionGroupRunParamsModel := new(backuprecoveryv1.UpdateProtectionGroupRunParams)
				updateProtectionGroupRunParamsModel.RunID = core.StringPtr("11:111")
				updateProtectionGroupRunParamsModel.LocalSnapshotConfig = updateLocalSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ReplicationSnapshotConfig = updateReplicationSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ArchivalSnapshotConfig = updateArchivalSnapshotConfigModel

				// Construct an instance of the UpdateProtectionGroupRunOptions model
				updateProtectionGroupRunOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupRunOptions)
				updateProtectionGroupRunOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupRunOptionsModel.UpdateProtectionGroupRunParams = []backuprecoveryv1.UpdateProtectionGroupRunParams{*updateProtectionGroupRunParamsModel}
				updateProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.UpdateProtectionGroupRun(updateProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateProtectionGroupRun with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the UpdateLocalSnapshotConfig model
				updateLocalSnapshotConfigModel := new(backuprecoveryv1.UpdateLocalSnapshotConfig)
				updateLocalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateLocalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the UpdateExistingReplicationSnapshotConfig model
				updateExistingReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingReplicationSnapshotConfig)
				updateExistingReplicationSnapshotConfigModel.ID = core.Int64Ptr(int64(4))
				updateExistingReplicationSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingReplicationSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingReplicationSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateReplicationSnapshotConfig model
				updateReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateReplicationSnapshotConfig)
				updateReplicationSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				updateReplicationSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingReplicationSnapshotConfig{*updateExistingReplicationSnapshotConfigModel}

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(2))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the UpdateExistingArchivalSnapshotConfig model
				updateExistingArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingArchivalSnapshotConfig)
				updateExistingArchivalSnapshotConfigModel.ID = core.Int64Ptr(int64(3))
				updateExistingArchivalSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingArchivalSnapshotConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				updateExistingArchivalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingArchivalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateArchivalSnapshotConfig model
				updateArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateArchivalSnapshotConfig)
				updateArchivalSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				updateArchivalSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingArchivalSnapshotConfig{*updateExistingArchivalSnapshotConfigModel}

				// Construct an instance of the UpdateProtectionGroupRunParams model
				updateProtectionGroupRunParamsModel := new(backuprecoveryv1.UpdateProtectionGroupRunParams)
				updateProtectionGroupRunParamsModel.RunID = core.StringPtr("11:111")
				updateProtectionGroupRunParamsModel.LocalSnapshotConfig = updateLocalSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ReplicationSnapshotConfig = updateReplicationSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ArchivalSnapshotConfig = updateArchivalSnapshotConfigModel

				// Construct an instance of the UpdateProtectionGroupRunOptions model
				updateProtectionGroupRunOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupRunOptions)
				updateProtectionGroupRunOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupRunOptionsModel.UpdateProtectionGroupRunParams = []backuprecoveryv1.UpdateProtectionGroupRunParams{*updateProtectionGroupRunParamsModel}
				updateProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroupRun(updateProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateProtectionGroupRunOptions model with no property values
				updateProtectionGroupRunOptionsModelNew := new(backuprecoveryv1.UpdateProtectionGroupRunOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.UpdateProtectionGroupRun(updateProtectionGroupRunOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(207)
				}))
			})
			It(`Invoke UpdateProtectionGroupRun successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the UpdateLocalSnapshotConfig model
				updateLocalSnapshotConfigModel := new(backuprecoveryv1.UpdateLocalSnapshotConfig)
				updateLocalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateLocalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the UpdateExistingReplicationSnapshotConfig model
				updateExistingReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingReplicationSnapshotConfig)
				updateExistingReplicationSnapshotConfigModel.ID = core.Int64Ptr(int64(4))
				updateExistingReplicationSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingReplicationSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingReplicationSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateReplicationSnapshotConfig model
				updateReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateReplicationSnapshotConfig)
				updateReplicationSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				updateReplicationSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingReplicationSnapshotConfig{*updateExistingReplicationSnapshotConfigModel}

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(2))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the UpdateExistingArchivalSnapshotConfig model
				updateExistingArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingArchivalSnapshotConfig)
				updateExistingArchivalSnapshotConfigModel.ID = core.Int64Ptr(int64(3))
				updateExistingArchivalSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingArchivalSnapshotConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				updateExistingArchivalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingArchivalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))

				// Construct an instance of the UpdateArchivalSnapshotConfig model
				updateArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateArchivalSnapshotConfig)
				updateArchivalSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				updateArchivalSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingArchivalSnapshotConfig{*updateExistingArchivalSnapshotConfigModel}

				// Construct an instance of the UpdateProtectionGroupRunParams model
				updateProtectionGroupRunParamsModel := new(backuprecoveryv1.UpdateProtectionGroupRunParams)
				updateProtectionGroupRunParamsModel.RunID = core.StringPtr("11:111")
				updateProtectionGroupRunParamsModel.LocalSnapshotConfig = updateLocalSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ReplicationSnapshotConfig = updateReplicationSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ArchivalSnapshotConfig = updateArchivalSnapshotConfigModel

				// Construct an instance of the UpdateProtectionGroupRunOptions model
				updateProtectionGroupRunOptionsModel := new(backuprecoveryv1.UpdateProtectionGroupRunOptions)
				updateProtectionGroupRunOptionsModel.ID = core.StringPtr("testString")
				updateProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionGroupRunOptionsModel.UpdateProtectionGroupRunParams = []backuprecoveryv1.UpdateProtectionGroupRunParams{*updateProtectionGroupRunParamsModel}
				updateProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.UpdateProtectionGroupRun(updateProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProtectionGroupRun(createProtectionGroupRunOptions *CreateProtectionGroupRunOptions) - Operation response error`, func() {
		createProtectionGroupRunPath := "/data-protect/protection-groups/runId/runs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionGroupRunPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateProtectionGroupRun with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the RunObjectPhysicalParams model
				runObjectPhysicalParamsModel := new(backuprecoveryv1.RunObjectPhysicalParams)
				runObjectPhysicalParamsModel.MetadataFilePath = core.StringPtr("~/metadata")

				// Construct an instance of the RunObject model
				runObjectModel := new(backuprecoveryv1.RunObject)
				runObjectModel.ID = core.Int64Ptr(int64(4))
				runObjectModel.AppIds = []int64{int64(26)}
				runObjectModel.PhysicalParams = runObjectPhysicalParamsModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(26))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RunCloudReplicationConfig model
				runCloudReplicationConfigModel := new(backuprecoveryv1.RunCloudReplicationConfig)
				runCloudReplicationConfigModel.AwsTarget = awsTargetConfigModel
				runCloudReplicationConfigModel.AzureTarget = azureTargetConfigModel
				runCloudReplicationConfigModel.TargetType = core.StringPtr("AWS")
				runCloudReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunTargetsConfiguration model
				runTargetsConfigurationModel := new(backuprecoveryv1.RunTargetsConfiguration)
				runTargetsConfigurationModel.UsePolicyDefaults = core.BoolPtr(false)
				runTargetsConfigurationModel.Replications = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				runTargetsConfigurationModel.Archivals = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				runTargetsConfigurationModel.CloudReplications = []backuprecoveryv1.RunCloudReplicationConfig{*runCloudReplicationConfigModel}

				// Construct an instance of the CreateProtectionGroupRunOptions model
				createProtectionGroupRunOptionsModel := new(backuprecoveryv1.CreateProtectionGroupRunOptions)
				createProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				createProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupRunOptionsModel.RunType = core.StringPtr("kRegular")
				createProtectionGroupRunOptionsModel.Objects = []backuprecoveryv1.RunObject{*runObjectModel}
				createProtectionGroupRunOptionsModel.TargetsConfig = runTargetsConfigurationModel
				createProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.CreateProtectionGroupRun(createProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.CreateProtectionGroupRun(createProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProtectionGroupRun(createProtectionGroupRunOptions *CreateProtectionGroupRunOptions)`, func() {
		createProtectionGroupRunPath := "/data-protect/protection-groups/runId/runs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionGroupRunPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"protectionGroupId": "ProtectionGroupID"}`)
				}))
			})
			It(`Invoke CreateProtectionGroupRun successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the RunObjectPhysicalParams model
				runObjectPhysicalParamsModel := new(backuprecoveryv1.RunObjectPhysicalParams)
				runObjectPhysicalParamsModel.MetadataFilePath = core.StringPtr("~/metadata")

				// Construct an instance of the RunObject model
				runObjectModel := new(backuprecoveryv1.RunObject)
				runObjectModel.ID = core.Int64Ptr(int64(4))
				runObjectModel.AppIds = []int64{int64(26)}
				runObjectModel.PhysicalParams = runObjectPhysicalParamsModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(26))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RunCloudReplicationConfig model
				runCloudReplicationConfigModel := new(backuprecoveryv1.RunCloudReplicationConfig)
				runCloudReplicationConfigModel.AwsTarget = awsTargetConfigModel
				runCloudReplicationConfigModel.AzureTarget = azureTargetConfigModel
				runCloudReplicationConfigModel.TargetType = core.StringPtr("AWS")
				runCloudReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunTargetsConfiguration model
				runTargetsConfigurationModel := new(backuprecoveryv1.RunTargetsConfiguration)
				runTargetsConfigurationModel.UsePolicyDefaults = core.BoolPtr(false)
				runTargetsConfigurationModel.Replications = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				runTargetsConfigurationModel.Archivals = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				runTargetsConfigurationModel.CloudReplications = []backuprecoveryv1.RunCloudReplicationConfig{*runCloudReplicationConfigModel}

				// Construct an instance of the CreateProtectionGroupRunOptions model
				createProtectionGroupRunOptionsModel := new(backuprecoveryv1.CreateProtectionGroupRunOptions)
				createProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				createProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupRunOptionsModel.RunType = core.StringPtr("kRegular")
				createProtectionGroupRunOptionsModel.Objects = []backuprecoveryv1.RunObject{*runObjectModel}
				createProtectionGroupRunOptionsModel.TargetsConfig = runTargetsConfigurationModel
				createProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.CreateProtectionGroupRunWithContext(ctx, createProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.CreateProtectionGroupRun(createProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.CreateProtectionGroupRunWithContext(ctx, createProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProtectionGroupRunPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"protectionGroupId": "ProtectionGroupID"}`)
				}))
			})
			It(`Invoke CreateProtectionGroupRun successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.CreateProtectionGroupRun(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RunObjectPhysicalParams model
				runObjectPhysicalParamsModel := new(backuprecoveryv1.RunObjectPhysicalParams)
				runObjectPhysicalParamsModel.MetadataFilePath = core.StringPtr("~/metadata")

				// Construct an instance of the RunObject model
				runObjectModel := new(backuprecoveryv1.RunObject)
				runObjectModel.ID = core.Int64Ptr(int64(4))
				runObjectModel.AppIds = []int64{int64(26)}
				runObjectModel.PhysicalParams = runObjectPhysicalParamsModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(26))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RunCloudReplicationConfig model
				runCloudReplicationConfigModel := new(backuprecoveryv1.RunCloudReplicationConfig)
				runCloudReplicationConfigModel.AwsTarget = awsTargetConfigModel
				runCloudReplicationConfigModel.AzureTarget = azureTargetConfigModel
				runCloudReplicationConfigModel.TargetType = core.StringPtr("AWS")
				runCloudReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunTargetsConfiguration model
				runTargetsConfigurationModel := new(backuprecoveryv1.RunTargetsConfiguration)
				runTargetsConfigurationModel.UsePolicyDefaults = core.BoolPtr(false)
				runTargetsConfigurationModel.Replications = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				runTargetsConfigurationModel.Archivals = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				runTargetsConfigurationModel.CloudReplications = []backuprecoveryv1.RunCloudReplicationConfig{*runCloudReplicationConfigModel}

				// Construct an instance of the CreateProtectionGroupRunOptions model
				createProtectionGroupRunOptionsModel := new(backuprecoveryv1.CreateProtectionGroupRunOptions)
				createProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				createProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupRunOptionsModel.RunType = core.StringPtr("kRegular")
				createProtectionGroupRunOptionsModel.Objects = []backuprecoveryv1.RunObject{*runObjectModel}
				createProtectionGroupRunOptionsModel.TargetsConfig = runTargetsConfigurationModel
				createProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.CreateProtectionGroupRun(createProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateProtectionGroupRun with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the RunObjectPhysicalParams model
				runObjectPhysicalParamsModel := new(backuprecoveryv1.RunObjectPhysicalParams)
				runObjectPhysicalParamsModel.MetadataFilePath = core.StringPtr("~/metadata")

				// Construct an instance of the RunObject model
				runObjectModel := new(backuprecoveryv1.RunObject)
				runObjectModel.ID = core.Int64Ptr(int64(4))
				runObjectModel.AppIds = []int64{int64(26)}
				runObjectModel.PhysicalParams = runObjectPhysicalParamsModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(26))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RunCloudReplicationConfig model
				runCloudReplicationConfigModel := new(backuprecoveryv1.RunCloudReplicationConfig)
				runCloudReplicationConfigModel.AwsTarget = awsTargetConfigModel
				runCloudReplicationConfigModel.AzureTarget = azureTargetConfigModel
				runCloudReplicationConfigModel.TargetType = core.StringPtr("AWS")
				runCloudReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunTargetsConfiguration model
				runTargetsConfigurationModel := new(backuprecoveryv1.RunTargetsConfiguration)
				runTargetsConfigurationModel.UsePolicyDefaults = core.BoolPtr(false)
				runTargetsConfigurationModel.Replications = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				runTargetsConfigurationModel.Archivals = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				runTargetsConfigurationModel.CloudReplications = []backuprecoveryv1.RunCloudReplicationConfig{*runCloudReplicationConfigModel}

				// Construct an instance of the CreateProtectionGroupRunOptions model
				createProtectionGroupRunOptionsModel := new(backuprecoveryv1.CreateProtectionGroupRunOptions)
				createProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				createProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupRunOptionsModel.RunType = core.StringPtr("kRegular")
				createProtectionGroupRunOptionsModel.Objects = []backuprecoveryv1.RunObject{*runObjectModel}
				createProtectionGroupRunOptionsModel.TargetsConfig = runTargetsConfigurationModel
				createProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.CreateProtectionGroupRun(createProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateProtectionGroupRunOptions model with no property values
				createProtectionGroupRunOptionsModelNew := new(backuprecoveryv1.CreateProtectionGroupRunOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.CreateProtectionGroupRun(createProtectionGroupRunOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke CreateProtectionGroupRun successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the RunObjectPhysicalParams model
				runObjectPhysicalParamsModel := new(backuprecoveryv1.RunObjectPhysicalParams)
				runObjectPhysicalParamsModel.MetadataFilePath = core.StringPtr("~/metadata")

				// Construct an instance of the RunObject model
				runObjectModel := new(backuprecoveryv1.RunObject)
				runObjectModel.ID = core.Int64Ptr(int64(4))
				runObjectModel.AppIds = []int64{int64(26)}
				runObjectModel.PhysicalParams = runObjectPhysicalParamsModel

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				runArchivalConfigModel.ID = core.Int64Ptr(int64(26))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))

				// Construct an instance of the RunCloudReplicationConfig model
				runCloudReplicationConfigModel := new(backuprecoveryv1.RunCloudReplicationConfig)
				runCloudReplicationConfigModel.AwsTarget = awsTargetConfigModel
				runCloudReplicationConfigModel.AzureTarget = azureTargetConfigModel
				runCloudReplicationConfigModel.TargetType = core.StringPtr("AWS")
				runCloudReplicationConfigModel.Retention = retentionModel

				// Construct an instance of the RunTargetsConfiguration model
				runTargetsConfigurationModel := new(backuprecoveryv1.RunTargetsConfiguration)
				runTargetsConfigurationModel.UsePolicyDefaults = core.BoolPtr(false)
				runTargetsConfigurationModel.Replications = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				runTargetsConfigurationModel.Archivals = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				runTargetsConfigurationModel.CloudReplications = []backuprecoveryv1.RunCloudReplicationConfig{*runCloudReplicationConfigModel}

				// Construct an instance of the CreateProtectionGroupRunOptions model
				createProtectionGroupRunOptionsModel := new(backuprecoveryv1.CreateProtectionGroupRunOptions)
				createProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				createProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createProtectionGroupRunOptionsModel.RunType = core.StringPtr("kRegular")
				createProtectionGroupRunOptionsModel.Objects = []backuprecoveryv1.RunObject{*runObjectModel}
				createProtectionGroupRunOptionsModel.TargetsConfig = runTargetsConfigurationModel
				createProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.CreateProtectionGroupRun(createProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptions *PerformActionOnProtectionGroupRunOptions) - Operation response error`, func() {
		performActionOnProtectionGroupRunPath := "/data-protect/protection-groups/runId/runs/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(performActionOnProtectionGroupRunPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PerformActionOnProtectionGroupRun with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PauseProtectionRunActionParams model
				pauseProtectionRunActionParamsModel := new(backuprecoveryv1.PauseProtectionRunActionParams)
				pauseProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the ResumeProtectionRunActionParams model
				resumeProtectionRunActionParamsModel := new(backuprecoveryv1.ResumeProtectionRunActionParams)
				resumeProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the CancelProtectionGroupRunRequest model
				cancelProtectionGroupRunRequestModel := new(backuprecoveryv1.CancelProtectionGroupRunRequest)
				cancelProtectionGroupRunRequestModel.RunID = core.StringPtr("11:111")
				cancelProtectionGroupRunRequestModel.LocalTaskID = core.StringPtr("123:456:789")
				cancelProtectionGroupRunRequestModel.ObjectIds = []int64{int64(26)}
				cancelProtectionGroupRunRequestModel.ReplicationTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.ArchivalTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.CloudSpinTaskID = []string{"123:456:789"}

				// Construct an instance of the PerformActionOnProtectionGroupRunOptions model
				performActionOnProtectionGroupRunOptionsModel := new(backuprecoveryv1.PerformActionOnProtectionGroupRunOptions)
				performActionOnProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				performActionOnProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				performActionOnProtectionGroupRunOptionsModel.Action = core.StringPtr("Pause")
				performActionOnProtectionGroupRunOptionsModel.PauseParams = []backuprecoveryv1.PauseProtectionRunActionParams{*pauseProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.ResumeParams = []backuprecoveryv1.ResumeProtectionRunActionParams{*resumeProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.CancelParams = []backuprecoveryv1.CancelProtectionGroupRunRequest{*cancelProtectionGroupRunRequestModel}
				performActionOnProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptions *PerformActionOnProtectionGroupRunOptions)`, func() {
		performActionOnProtectionGroupRunPath := "/data-protect/protection-groups/runId/runs/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(performActionOnProtectionGroupRunPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Pause", "pauseParams": [{"runId": "RunID", "error": "Error"}], "resumeParams": [{"runId": "RunID", "error": "Error"}], "cancelParams": [{"runId": "RunID"}]}`)
				}))
			})
			It(`Invoke PerformActionOnProtectionGroupRun successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the PauseProtectionRunActionParams model
				pauseProtectionRunActionParamsModel := new(backuprecoveryv1.PauseProtectionRunActionParams)
				pauseProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the ResumeProtectionRunActionParams model
				resumeProtectionRunActionParamsModel := new(backuprecoveryv1.ResumeProtectionRunActionParams)
				resumeProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the CancelProtectionGroupRunRequest model
				cancelProtectionGroupRunRequestModel := new(backuprecoveryv1.CancelProtectionGroupRunRequest)
				cancelProtectionGroupRunRequestModel.RunID = core.StringPtr("11:111")
				cancelProtectionGroupRunRequestModel.LocalTaskID = core.StringPtr("123:456:789")
				cancelProtectionGroupRunRequestModel.ObjectIds = []int64{int64(26)}
				cancelProtectionGroupRunRequestModel.ReplicationTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.ArchivalTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.CloudSpinTaskID = []string{"123:456:789"}

				// Construct an instance of the PerformActionOnProtectionGroupRunOptions model
				performActionOnProtectionGroupRunOptionsModel := new(backuprecoveryv1.PerformActionOnProtectionGroupRunOptions)
				performActionOnProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				performActionOnProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				performActionOnProtectionGroupRunOptionsModel.Action = core.StringPtr("Pause")
				performActionOnProtectionGroupRunOptionsModel.PauseParams = []backuprecoveryv1.PauseProtectionRunActionParams{*pauseProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.ResumeParams = []backuprecoveryv1.ResumeProtectionRunActionParams{*resumeProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.CancelParams = []backuprecoveryv1.CancelProtectionGroupRunRequest{*cancelProtectionGroupRunRequestModel}
				performActionOnProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.PerformActionOnProtectionGroupRunWithContext(ctx, performActionOnProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.PerformActionOnProtectionGroupRunWithContext(ctx, performActionOnProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(performActionOnProtectionGroupRunPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Pause", "pauseParams": [{"runId": "RunID", "error": "Error"}], "resumeParams": [{"runId": "RunID", "error": "Error"}], "cancelParams": [{"runId": "RunID"}]}`)
				}))
			})
			It(`Invoke PerformActionOnProtectionGroupRun successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.PerformActionOnProtectionGroupRun(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PauseProtectionRunActionParams model
				pauseProtectionRunActionParamsModel := new(backuprecoveryv1.PauseProtectionRunActionParams)
				pauseProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the ResumeProtectionRunActionParams model
				resumeProtectionRunActionParamsModel := new(backuprecoveryv1.ResumeProtectionRunActionParams)
				resumeProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the CancelProtectionGroupRunRequest model
				cancelProtectionGroupRunRequestModel := new(backuprecoveryv1.CancelProtectionGroupRunRequest)
				cancelProtectionGroupRunRequestModel.RunID = core.StringPtr("11:111")
				cancelProtectionGroupRunRequestModel.LocalTaskID = core.StringPtr("123:456:789")
				cancelProtectionGroupRunRequestModel.ObjectIds = []int64{int64(26)}
				cancelProtectionGroupRunRequestModel.ReplicationTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.ArchivalTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.CloudSpinTaskID = []string{"123:456:789"}

				// Construct an instance of the PerformActionOnProtectionGroupRunOptions model
				performActionOnProtectionGroupRunOptionsModel := new(backuprecoveryv1.PerformActionOnProtectionGroupRunOptions)
				performActionOnProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				performActionOnProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				performActionOnProtectionGroupRunOptionsModel.Action = core.StringPtr("Pause")
				performActionOnProtectionGroupRunOptionsModel.PauseParams = []backuprecoveryv1.PauseProtectionRunActionParams{*pauseProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.ResumeParams = []backuprecoveryv1.ResumeProtectionRunActionParams{*resumeProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.CancelParams = []backuprecoveryv1.CancelProtectionGroupRunRequest{*cancelProtectionGroupRunRequestModel}
				performActionOnProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PerformActionOnProtectionGroupRun with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PauseProtectionRunActionParams model
				pauseProtectionRunActionParamsModel := new(backuprecoveryv1.PauseProtectionRunActionParams)
				pauseProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the ResumeProtectionRunActionParams model
				resumeProtectionRunActionParamsModel := new(backuprecoveryv1.ResumeProtectionRunActionParams)
				resumeProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the CancelProtectionGroupRunRequest model
				cancelProtectionGroupRunRequestModel := new(backuprecoveryv1.CancelProtectionGroupRunRequest)
				cancelProtectionGroupRunRequestModel.RunID = core.StringPtr("11:111")
				cancelProtectionGroupRunRequestModel.LocalTaskID = core.StringPtr("123:456:789")
				cancelProtectionGroupRunRequestModel.ObjectIds = []int64{int64(26)}
				cancelProtectionGroupRunRequestModel.ReplicationTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.ArchivalTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.CloudSpinTaskID = []string{"123:456:789"}

				// Construct an instance of the PerformActionOnProtectionGroupRunOptions model
				performActionOnProtectionGroupRunOptionsModel := new(backuprecoveryv1.PerformActionOnProtectionGroupRunOptions)
				performActionOnProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				performActionOnProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				performActionOnProtectionGroupRunOptionsModel.Action = core.StringPtr("Pause")
				performActionOnProtectionGroupRunOptionsModel.PauseParams = []backuprecoveryv1.PauseProtectionRunActionParams{*pauseProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.ResumeParams = []backuprecoveryv1.ResumeProtectionRunActionParams{*resumeProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.CancelParams = []backuprecoveryv1.CancelProtectionGroupRunRequest{*cancelProtectionGroupRunRequestModel}
				performActionOnProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PerformActionOnProtectionGroupRunOptions model with no property values
				performActionOnProtectionGroupRunOptionsModelNew := new(backuprecoveryv1.PerformActionOnProtectionGroupRunOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PerformActionOnProtectionGroupRun successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PauseProtectionRunActionParams model
				pauseProtectionRunActionParamsModel := new(backuprecoveryv1.PauseProtectionRunActionParams)
				pauseProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the ResumeProtectionRunActionParams model
				resumeProtectionRunActionParamsModel := new(backuprecoveryv1.ResumeProtectionRunActionParams)
				resumeProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")

				// Construct an instance of the CancelProtectionGroupRunRequest model
				cancelProtectionGroupRunRequestModel := new(backuprecoveryv1.CancelProtectionGroupRunRequest)
				cancelProtectionGroupRunRequestModel.RunID = core.StringPtr("11:111")
				cancelProtectionGroupRunRequestModel.LocalTaskID = core.StringPtr("123:456:789")
				cancelProtectionGroupRunRequestModel.ObjectIds = []int64{int64(26)}
				cancelProtectionGroupRunRequestModel.ReplicationTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.ArchivalTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.CloudSpinTaskID = []string{"123:456:789"}

				// Construct an instance of the PerformActionOnProtectionGroupRunOptions model
				performActionOnProtectionGroupRunOptionsModel := new(backuprecoveryv1.PerformActionOnProtectionGroupRunOptions)
				performActionOnProtectionGroupRunOptionsModel.ID = core.StringPtr("runId")
				performActionOnProtectionGroupRunOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				performActionOnProtectionGroupRunOptionsModel.Action = core.StringPtr("Pause")
				performActionOnProtectionGroupRunOptionsModel.PauseParams = []backuprecoveryv1.PauseProtectionRunActionParams{*pauseProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.ResumeParams = []backuprecoveryv1.ResumeProtectionRunActionParams{*resumeProtectionRunActionParamsModel}
				performActionOnProtectionGroupRunOptionsModel.CancelParams = []backuprecoveryv1.CancelProtectionGroupRunRequest{*cancelProtectionGroupRunRequestModel}
				performActionOnProtectionGroupRunOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.PerformActionOnProtectionGroupRun(performActionOnProtectionGroupRunOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRecoveries(getRecoveriesOptions *GetRecoveriesOptions) - Operation response error`, func() {
		getRecoveriesPath := "/data-protect/recoveries"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRecoveriesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for returnOnlyChildRecoveries query parameter
					// TODO: Add check for startTimeUsecs query parameter
					// TODO: Add check for endTimeUsecs query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRecoveries with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRecoveriesOptions model
				getRecoveriesOptionsModel := new(backuprecoveryv1.GetRecoveriesOptions)
				getRecoveriesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveriesOptionsModel.Ids = []string{"11:111:11"}
				getRecoveriesOptionsModel.ReturnOnlyChildRecoveries = core.BoolPtr(true)
				getRecoveriesOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.SnapshotTargetType = []string{"Local"}
				getRecoveriesOptionsModel.ArchivalTargetType = []string{"Tape"}
				getRecoveriesOptionsModel.SnapshotEnvironments = []string{"kPhysical"}
				getRecoveriesOptionsModel.Status = []string{"Accepted"}
				getRecoveriesOptionsModel.RecoveryActions = []string{"RecoverVMs"}
				getRecoveriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetRecoveries(getRecoveriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetRecoveries(getRecoveriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRecoveries(getRecoveriesOptions *GetRecoveriesOptions)`, func() {
		getRecoveriesPath := "/data-protect/recoveries"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRecoveriesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for returnOnlyChildRecoveries query parameter
					// TODO: Add check for startTimeUsecs query parameter
					// TODO: Add check for endTimeUsecs query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"recoveries": [{"id": "ID", "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "progressTaskId": "ProgressTaskID", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "creationInfo": {"userName": "UserName"}, "canTearDown": false, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "TearDownMessage", "messages": ["Messages"], "isParentRecovery": true, "parentRecoveryId": "ParentRecoveryID", "retrieveArchiveTasks": [{"taskUid": "TaskUid", "uptierExpiryTimes": [17]}], "isMultiStageRestore": false, "physicalParams": {"objects": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 2, "name": "Name"}, "volumeMapping": [{"sourceVolumeGuid": "SourceVolumeGuid", "destinationVolumeGuid": "DestinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": false, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": false, "volumeNames": ["VolumeNames"], "mountedVolumeMapping": [{"originalVolume": "OriginalVolume", "mountedVolume": "MountedVolume", "fileSystemType": "FileSystemType"}], "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "restoreToOriginalPaths": true, "overwriteExisting": false, "alternateRestoreDirectory": "AlternateRestoreDirectory", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": false, "saveSuccessFiles": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 15, "filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "downloadFilePath": "DownloadFilePath"}, "systemRecoveryParams": {"fullNasPath": "FullNasPath"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13, "aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false, "sqlTargetParams": {"newSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "databaseName": "DatabaseName", "host": {"id": 2, "name": "Name"}, "instanceName": "InstanceName", "logFileDirectoryLocation": "LogFileDirectoryLocation"}, "originalSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "captureTailLogs": false, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "logFileDirectoryLocation": "LogFileDirectoryLocation", "newDatabaseName": "NewDatabaseName"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}]}`)
				}))
			})
			It(`Invoke GetRecoveries successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetRecoveriesOptions model
				getRecoveriesOptionsModel := new(backuprecoveryv1.GetRecoveriesOptions)
				getRecoveriesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveriesOptionsModel.Ids = []string{"11:111:11"}
				getRecoveriesOptionsModel.ReturnOnlyChildRecoveries = core.BoolPtr(true)
				getRecoveriesOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.SnapshotTargetType = []string{"Local"}
				getRecoveriesOptionsModel.ArchivalTargetType = []string{"Tape"}
				getRecoveriesOptionsModel.SnapshotEnvironments = []string{"kPhysical"}
				getRecoveriesOptionsModel.Status = []string{"Accepted"}
				getRecoveriesOptionsModel.RecoveryActions = []string{"RecoverVMs"}
				getRecoveriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetRecoveriesWithContext(ctx, getRecoveriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetRecoveries(getRecoveriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetRecoveriesWithContext(ctx, getRecoveriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRecoveriesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for returnOnlyChildRecoveries query parameter
					// TODO: Add check for startTimeUsecs query parameter
					// TODO: Add check for endTimeUsecs query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"recoveries": [{"id": "ID", "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "progressTaskId": "ProgressTaskID", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "creationInfo": {"userName": "UserName"}, "canTearDown": false, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "TearDownMessage", "messages": ["Messages"], "isParentRecovery": true, "parentRecoveryId": "ParentRecoveryID", "retrieveArchiveTasks": [{"taskUid": "TaskUid", "uptierExpiryTimes": [17]}], "isMultiStageRestore": false, "physicalParams": {"objects": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 2, "name": "Name"}, "volumeMapping": [{"sourceVolumeGuid": "SourceVolumeGuid", "destinationVolumeGuid": "DestinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": false, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": false, "volumeNames": ["VolumeNames"], "mountedVolumeMapping": [{"originalVolume": "OriginalVolume", "mountedVolume": "MountedVolume", "fileSystemType": "FileSystemType"}], "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "restoreToOriginalPaths": true, "overwriteExisting": false, "alternateRestoreDirectory": "AlternateRestoreDirectory", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": false, "saveSuccessFiles": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 15, "filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "downloadFilePath": "DownloadFilePath"}, "systemRecoveryParams": {"fullNasPath": "FullNasPath"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13, "aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false, "sqlTargetParams": {"newSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "databaseName": "DatabaseName", "host": {"id": 2, "name": "Name"}, "instanceName": "InstanceName", "logFileDirectoryLocation": "LogFileDirectoryLocation"}, "originalSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "captureTailLogs": false, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "logFileDirectoryLocation": "LogFileDirectoryLocation", "newDatabaseName": "NewDatabaseName"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}]}`)
				}))
			})
			It(`Invoke GetRecoveries successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetRecoveries(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRecoveriesOptions model
				getRecoveriesOptionsModel := new(backuprecoveryv1.GetRecoveriesOptions)
				getRecoveriesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveriesOptionsModel.Ids = []string{"11:111:11"}
				getRecoveriesOptionsModel.ReturnOnlyChildRecoveries = core.BoolPtr(true)
				getRecoveriesOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.SnapshotTargetType = []string{"Local"}
				getRecoveriesOptionsModel.ArchivalTargetType = []string{"Tape"}
				getRecoveriesOptionsModel.SnapshotEnvironments = []string{"kPhysical"}
				getRecoveriesOptionsModel.Status = []string{"Accepted"}
				getRecoveriesOptionsModel.RecoveryActions = []string{"RecoverVMs"}
				getRecoveriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetRecoveries(getRecoveriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRecoveries with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRecoveriesOptions model
				getRecoveriesOptionsModel := new(backuprecoveryv1.GetRecoveriesOptions)
				getRecoveriesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveriesOptionsModel.Ids = []string{"11:111:11"}
				getRecoveriesOptionsModel.ReturnOnlyChildRecoveries = core.BoolPtr(true)
				getRecoveriesOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.SnapshotTargetType = []string{"Local"}
				getRecoveriesOptionsModel.ArchivalTargetType = []string{"Tape"}
				getRecoveriesOptionsModel.SnapshotEnvironments = []string{"kPhysical"}
				getRecoveriesOptionsModel.Status = []string{"Accepted"}
				getRecoveriesOptionsModel.RecoveryActions = []string{"RecoverVMs"}
				getRecoveriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetRecoveries(getRecoveriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRecoveriesOptions model with no property values
				getRecoveriesOptionsModelNew := new(backuprecoveryv1.GetRecoveriesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetRecoveries(getRecoveriesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRecoveries successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRecoveriesOptions model
				getRecoveriesOptionsModel := new(backuprecoveryv1.GetRecoveriesOptions)
				getRecoveriesOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveriesOptionsModel.Ids = []string{"11:111:11"}
				getRecoveriesOptionsModel.ReturnOnlyChildRecoveries = core.BoolPtr(true)
				getRecoveriesOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(26))
				getRecoveriesOptionsModel.SnapshotTargetType = []string{"Local"}
				getRecoveriesOptionsModel.ArchivalTargetType = []string{"Tape"}
				getRecoveriesOptionsModel.SnapshotEnvironments = []string{"kPhysical"}
				getRecoveriesOptionsModel.Status = []string{"Accepted"}
				getRecoveriesOptionsModel.RecoveryActions = []string{"RecoverVMs"}
				getRecoveriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetRecoveries(getRecoveriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateRecovery(createRecoveryOptions *CreateRecoveryOptions) - Operation response error`, func() {
		createRecoveryPath := "/data-protect/recoveries"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRecoveryPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateRecovery with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotID")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupID")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeMountTarget model
				physicalTargetParamsForRecoverVolumeMountTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget)
				physicalTargetParamsForRecoverVolumeMountTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverVolumeMapping model
				recoverVolumeMappingModel := new(backuprecoveryv1.RecoverVolumeMapping)
				recoverVolumeMappingModel.SourceVolumeGuid = core.StringPtr("sourceVolumeGuid")
				recoverVolumeMappingModel.DestinationVolumeGuid = core.StringPtr("destinationVolumeGuid")

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeVlanConfig model
				physicalTargetParamsForRecoverVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeVlanConfig)
				physicalTargetParamsForRecoverVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalVolumeParamsPhysicalTargetParams model
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalVolumeParamsPhysicalTargetParams)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.MountTarget = physicalTargetParamsForRecoverVolumeMountTargetModel
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeMapping = []backuprecoveryv1.RecoverVolumeMapping{*recoverVolumeMappingModel}
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.ForceUnmountVolume = core.BoolPtr(true)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsRecoverVolumeParams model
				recoverPhysicalParamsRecoverVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverVolumeParams)
				recoverPhysicalParamsRecoverVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverVolumeParamsModel.PhysicalTargetParams = recoverPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the PhysicalMountVolumesOriginalTargetConfigServerCredentials model
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesOriginalTargetConfigServerCredentials)
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeOriginalTargetConfig model
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeOriginalTargetConfig)
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel.ServerCredentials = physicalMountVolumesOriginalTargetConfigServerCredentialsModel

				// Construct an instance of the RecoverTarget model
				recoverTargetModel := new(backuprecoveryv1.RecoverTarget)
				recoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalMountVolumesNewTargetConfigServerCredentials model
				physicalMountVolumesNewTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesNewTargetConfigServerCredentials)
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeNewTargetConfig model
				physicalTargetParamsForMountVolumeNewTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeNewTargetConfig)
				physicalTargetParamsForMountVolumeNewTargetConfigModel.MountTarget = recoverTargetModel
				physicalTargetParamsForMountVolumeNewTargetConfigModel.ServerCredentials = physicalMountVolumesNewTargetConfigServerCredentialsModel

				// Construct an instance of the PhysicalTargetParamsForMountVolumeVlanConfig model
				physicalTargetParamsForMountVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeVlanConfig)
				physicalTargetParamsForMountVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForMountVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the MountPhysicalVolumeParamsPhysicalTargetParams model
				mountPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.MountPhysicalVolumeParamsPhysicalTargetParams)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.MountToOriginalTarget = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.OriginalTargetConfig = physicalTargetParamsForMountVolumeOriginalTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.NewTargetConfig = physicalTargetParamsForMountVolumeNewTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.ReadOnlyMount = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeNames = []string{"volume1"}
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForMountVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsMountVolumeParams model
				recoverPhysicalParamsMountVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsMountVolumeParams)
				recoverPhysicalParamsMountVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsMountVolumeParamsModel.PhysicalTargetParams = mountPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the CommonRecoverFileAndFolderInfo model
				commonRecoverFileAndFolderInfoModel := new(backuprecoveryv1.CommonRecoverFileAndFolderInfo)
				commonRecoverFileAndFolderInfoModel.AbsolutePath = core.StringPtr("~/folder1")
				commonRecoverFileAndFolderInfoModel.IsDirectory = core.BoolPtr(true)
				commonRecoverFileAndFolderInfoModel.IsViewFileRecovery = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget model
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget)
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderVlanConfig model
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderVlanConfig)
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalFileAndFolderParamsPhysicalTargetParams model
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalFileAndFolderParamsPhysicalTargetParams)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RecoverTarget = physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreToOriginalPaths = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.OverwriteExisting = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.AlternateRestoreDirectory = core.StringPtr("~/dirAlt")
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAttributes = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveTimestamps = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAcls = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.ContinueOnError = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.SaveSuccessFiles = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverFileAndFolderVlanConfigModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreEntityType = core.StringPtr("kRegular")

				// Construct an instance of the RecoverPhysicalParamsRecoverFileAndFolderParams model
				recoverPhysicalParamsRecoverFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverFileAndFolderParams)
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.PhysicalTargetParams = recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel

				// Construct an instance of the RecoverPhysicalParamsDownloadFileAndFolderParams model
				recoverPhysicalParamsDownloadFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsDownloadFileAndFolderParams)
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.ExpiryTimeUsecs = core.Int64Ptr(int64(26))
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.DownloadFilePath = core.StringPtr("~/downloadFile")

				// Construct an instance of the RecoverPhysicalParamsSystemRecoveryParams model
				recoverPhysicalParamsSystemRecoveryParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsSystemRecoveryParams)
				recoverPhysicalParamsSystemRecoveryParamsModel.FullNasPath = core.StringPtr("~/nas")

				// Construct an instance of the RecoverPhysicalParams model
				recoverPhysicalParamsModel := new(backuprecoveryv1.RecoverPhysicalParams)
				recoverPhysicalParamsModel.Objects = []backuprecoveryv1.CommonRecoverObjectSnapshotParams{*commonRecoverObjectSnapshotParamsModel}
				recoverPhysicalParamsModel.RecoveryAction = core.StringPtr("RecoverPhysicalVolumes")
				recoverPhysicalParamsModel.RecoverVolumeParams = recoverPhysicalParamsRecoverVolumeParamsModel
				recoverPhysicalParamsModel.MountVolumeParams = recoverPhysicalParamsMountVolumeParamsModel
				recoverPhysicalParamsModel.RecoverFileAndFolderParams = recoverPhysicalParamsRecoverFileAndFolderParamsModel
				recoverPhysicalParamsModel.DownloadFileAndFolderParams = recoverPhysicalParamsDownloadFileAndFolderParamsModel
				recoverPhysicalParamsModel.SystemRecoveryParams = recoverPhysicalParamsSystemRecoveryParamsModel

				// Construct an instance of the AAGInfo model
				aagInfoModel := new(backuprecoveryv1.AAGInfo)
				aagInfoModel.Name = core.StringPtr("aagInfoName")
				aagInfoModel.ObjectID = core.Int64Ptr(int64(26))

				// Construct an instance of the HostInformation model
				hostInformationModel := new(backuprecoveryv1.HostInformation)
				hostInformationModel.ID = core.StringPtr("hostInfoId")
				hostInformationModel.Name = core.StringPtr("hostInfoName")
				hostInformationModel.Environment = core.StringPtr("kPhysical")

				// Construct an instance of the MultiStageRestoreOptions model
				multiStageRestoreOptionsModel := new(backuprecoveryv1.MultiStageRestoreOptions)
				multiStageRestoreOptionsModel.EnableAutoSync = core.BoolPtr(true)
				multiStageRestoreOptionsModel.EnableMultiStageRestore = core.BoolPtr(true)

				// Construct an instance of the FilenamePatternToDirectory model
				filenamePatternToDirectoryModel := new(backuprecoveryv1.FilenamePatternToDirectory)
				filenamePatternToDirectoryModel.Directory = core.StringPtr("~/dir1")
				filenamePatternToDirectoryModel.FilenamePattern = core.StringPtr(".sql")

				// Construct an instance of the RecoveryObjectIdentifier model
				recoveryObjectIdentifierModel := new(backuprecoveryv1.RecoveryObjectIdentifier)
				recoveryObjectIdentifierModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverSqlAppNewSourceConfig model
				recoverSqlAppNewSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppNewSourceConfig)
				recoverSqlAppNewSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppNewSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppNewSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppNewSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppNewSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppNewSourceConfigModel.DatabaseName = core.StringPtr("recovery-database-sql")
				recoverSqlAppNewSourceConfigModel.Host = recoveryObjectIdentifierModel
				recoverSqlAppNewSourceConfigModel.InstanceName = core.StringPtr("database-instance-1")
				recoverSqlAppNewSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")

				// Construct an instance of the RecoverSqlAppOriginalSourceConfig model
				recoverSqlAppOriginalSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppOriginalSourceConfig)
				recoverSqlAppOriginalSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppOriginalSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppOriginalSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppOriginalSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppOriginalSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.CaptureTailLogs = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppOriginalSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")
				recoverSqlAppOriginalSourceConfigModel.NewDatabaseName = core.StringPtr("recovery-database-sql-new")

				// Construct an instance of the SqlTargetParamsForRecoverSqlApp model
				sqlTargetParamsForRecoverSqlAppModel := new(backuprecoveryv1.SqlTargetParamsForRecoverSqlApp)
				sqlTargetParamsForRecoverSqlAppModel.NewSourceConfig = recoverSqlAppNewSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.OriginalSourceConfig = recoverSqlAppOriginalSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.RecoverToNewSource = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlAppParams model
				recoverSqlAppParamsModel := new(backuprecoveryv1.RecoverSqlAppParams)
				recoverSqlAppParamsModel.SnapshotID = core.StringPtr("snapshotId")
				recoverSqlAppParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				recoverSqlAppParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				recoverSqlAppParamsModel.RecoverFromStandby = core.BoolPtr(true)
				recoverSqlAppParamsModel.AagInfo = aagInfoModel
				recoverSqlAppParamsModel.HostInfo = hostInformationModel
				recoverSqlAppParamsModel.IsEncrypted = core.BoolPtr(true)
				recoverSqlAppParamsModel.SqlTargetParams = sqlTargetParamsForRecoverSqlAppModel
				recoverSqlAppParamsModel.TargetEnvironment = core.StringPtr("kSQL")

				// Construct an instance of the RecoveryVlanConfig model
				recoveryVlanConfigModel := new(backuprecoveryv1.RecoveryVlanConfig)
				recoveryVlanConfigModel.ID = core.Int64Ptr(int64(38))
				recoveryVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlParams model
				recoverSqlParamsModel := new(backuprecoveryv1.RecoverSqlParams)
				recoverSqlParamsModel.RecoverAppParams = []backuprecoveryv1.RecoverSqlAppParams{*recoverSqlAppParamsModel}
				recoverSqlParamsModel.RecoveryAction = core.StringPtr("RecoverApps")
				recoverSqlParamsModel.VlanConfig = recoveryVlanConfigModel

				// Construct an instance of the CreateRecoveryOptions model
				createRecoveryOptionsModel := new(backuprecoveryv1.CreateRecoveryOptions)
				createRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createRecoveryOptionsModel.Name = core.StringPtr("create-recovery")
				createRecoveryOptionsModel.SnapshotEnvironment = core.StringPtr("kPhysical")
				createRecoveryOptionsModel.PhysicalParams = recoverPhysicalParamsModel
				createRecoveryOptionsModel.MssqlParams = recoverSqlParamsModel
				createRecoveryOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				createRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.CreateRecovery(createRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.CreateRecovery(createRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateRecovery(createRecoveryOptions *CreateRecoveryOptions)`, func() {
		createRecoveryPath := "/data-protect/recoveries"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRecoveryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "progressTaskId": "ProgressTaskID", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "creationInfo": {"userName": "UserName"}, "canTearDown": false, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "TearDownMessage", "messages": ["Messages"], "isParentRecovery": true, "parentRecoveryId": "ParentRecoveryID", "retrieveArchiveTasks": [{"taskUid": "TaskUid", "uptierExpiryTimes": [17]}], "isMultiStageRestore": false, "physicalParams": {"objects": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 2, "name": "Name"}, "volumeMapping": [{"sourceVolumeGuid": "SourceVolumeGuid", "destinationVolumeGuid": "DestinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": false, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": false, "volumeNames": ["VolumeNames"], "mountedVolumeMapping": [{"originalVolume": "OriginalVolume", "mountedVolume": "MountedVolume", "fileSystemType": "FileSystemType"}], "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "restoreToOriginalPaths": true, "overwriteExisting": false, "alternateRestoreDirectory": "AlternateRestoreDirectory", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": false, "saveSuccessFiles": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 15, "filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "downloadFilePath": "DownloadFilePath"}, "systemRecoveryParams": {"fullNasPath": "FullNasPath"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13, "aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false, "sqlTargetParams": {"newSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "databaseName": "DatabaseName", "host": {"id": 2, "name": "Name"}, "instanceName": "InstanceName", "logFileDirectoryLocation": "LogFileDirectoryLocation"}, "originalSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "captureTailLogs": false, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "logFileDirectoryLocation": "LogFileDirectoryLocation", "newDatabaseName": "NewDatabaseName"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}`)
				}))
			})
			It(`Invoke CreateRecovery successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotID")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupID")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeMountTarget model
				physicalTargetParamsForRecoverVolumeMountTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget)
				physicalTargetParamsForRecoverVolumeMountTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverVolumeMapping model
				recoverVolumeMappingModel := new(backuprecoveryv1.RecoverVolumeMapping)
				recoverVolumeMappingModel.SourceVolumeGuid = core.StringPtr("sourceVolumeGuid")
				recoverVolumeMappingModel.DestinationVolumeGuid = core.StringPtr("destinationVolumeGuid")

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeVlanConfig model
				physicalTargetParamsForRecoverVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeVlanConfig)
				physicalTargetParamsForRecoverVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalVolumeParamsPhysicalTargetParams model
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalVolumeParamsPhysicalTargetParams)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.MountTarget = physicalTargetParamsForRecoverVolumeMountTargetModel
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeMapping = []backuprecoveryv1.RecoverVolumeMapping{*recoverVolumeMappingModel}
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.ForceUnmountVolume = core.BoolPtr(true)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsRecoverVolumeParams model
				recoverPhysicalParamsRecoverVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverVolumeParams)
				recoverPhysicalParamsRecoverVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverVolumeParamsModel.PhysicalTargetParams = recoverPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the PhysicalMountVolumesOriginalTargetConfigServerCredentials model
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesOriginalTargetConfigServerCredentials)
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeOriginalTargetConfig model
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeOriginalTargetConfig)
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel.ServerCredentials = physicalMountVolumesOriginalTargetConfigServerCredentialsModel

				// Construct an instance of the RecoverTarget model
				recoverTargetModel := new(backuprecoveryv1.RecoverTarget)
				recoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalMountVolumesNewTargetConfigServerCredentials model
				physicalMountVolumesNewTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesNewTargetConfigServerCredentials)
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeNewTargetConfig model
				physicalTargetParamsForMountVolumeNewTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeNewTargetConfig)
				physicalTargetParamsForMountVolumeNewTargetConfigModel.MountTarget = recoverTargetModel
				physicalTargetParamsForMountVolumeNewTargetConfigModel.ServerCredentials = physicalMountVolumesNewTargetConfigServerCredentialsModel

				// Construct an instance of the PhysicalTargetParamsForMountVolumeVlanConfig model
				physicalTargetParamsForMountVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeVlanConfig)
				physicalTargetParamsForMountVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForMountVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the MountPhysicalVolumeParamsPhysicalTargetParams model
				mountPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.MountPhysicalVolumeParamsPhysicalTargetParams)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.MountToOriginalTarget = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.OriginalTargetConfig = physicalTargetParamsForMountVolumeOriginalTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.NewTargetConfig = physicalTargetParamsForMountVolumeNewTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.ReadOnlyMount = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeNames = []string{"volume1"}
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForMountVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsMountVolumeParams model
				recoverPhysicalParamsMountVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsMountVolumeParams)
				recoverPhysicalParamsMountVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsMountVolumeParamsModel.PhysicalTargetParams = mountPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the CommonRecoverFileAndFolderInfo model
				commonRecoverFileAndFolderInfoModel := new(backuprecoveryv1.CommonRecoverFileAndFolderInfo)
				commonRecoverFileAndFolderInfoModel.AbsolutePath = core.StringPtr("~/folder1")
				commonRecoverFileAndFolderInfoModel.IsDirectory = core.BoolPtr(true)
				commonRecoverFileAndFolderInfoModel.IsViewFileRecovery = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget model
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget)
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderVlanConfig model
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderVlanConfig)
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalFileAndFolderParamsPhysicalTargetParams model
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalFileAndFolderParamsPhysicalTargetParams)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RecoverTarget = physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreToOriginalPaths = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.OverwriteExisting = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.AlternateRestoreDirectory = core.StringPtr("~/dirAlt")
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAttributes = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveTimestamps = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAcls = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.ContinueOnError = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.SaveSuccessFiles = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverFileAndFolderVlanConfigModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreEntityType = core.StringPtr("kRegular")

				// Construct an instance of the RecoverPhysicalParamsRecoverFileAndFolderParams model
				recoverPhysicalParamsRecoverFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverFileAndFolderParams)
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.PhysicalTargetParams = recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel

				// Construct an instance of the RecoverPhysicalParamsDownloadFileAndFolderParams model
				recoverPhysicalParamsDownloadFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsDownloadFileAndFolderParams)
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.ExpiryTimeUsecs = core.Int64Ptr(int64(26))
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.DownloadFilePath = core.StringPtr("~/downloadFile")

				// Construct an instance of the RecoverPhysicalParamsSystemRecoveryParams model
				recoverPhysicalParamsSystemRecoveryParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsSystemRecoveryParams)
				recoverPhysicalParamsSystemRecoveryParamsModel.FullNasPath = core.StringPtr("~/nas")

				// Construct an instance of the RecoverPhysicalParams model
				recoverPhysicalParamsModel := new(backuprecoveryv1.RecoverPhysicalParams)
				recoverPhysicalParamsModel.Objects = []backuprecoveryv1.CommonRecoverObjectSnapshotParams{*commonRecoverObjectSnapshotParamsModel}
				recoverPhysicalParamsModel.RecoveryAction = core.StringPtr("RecoverPhysicalVolumes")
				recoverPhysicalParamsModel.RecoverVolumeParams = recoverPhysicalParamsRecoverVolumeParamsModel
				recoverPhysicalParamsModel.MountVolumeParams = recoverPhysicalParamsMountVolumeParamsModel
				recoverPhysicalParamsModel.RecoverFileAndFolderParams = recoverPhysicalParamsRecoverFileAndFolderParamsModel
				recoverPhysicalParamsModel.DownloadFileAndFolderParams = recoverPhysicalParamsDownloadFileAndFolderParamsModel
				recoverPhysicalParamsModel.SystemRecoveryParams = recoverPhysicalParamsSystemRecoveryParamsModel

				// Construct an instance of the AAGInfo model
				aagInfoModel := new(backuprecoveryv1.AAGInfo)
				aagInfoModel.Name = core.StringPtr("aagInfoName")
				aagInfoModel.ObjectID = core.Int64Ptr(int64(26))

				// Construct an instance of the HostInformation model
				hostInformationModel := new(backuprecoveryv1.HostInformation)
				hostInformationModel.ID = core.StringPtr("hostInfoId")
				hostInformationModel.Name = core.StringPtr("hostInfoName")
				hostInformationModel.Environment = core.StringPtr("kPhysical")

				// Construct an instance of the MultiStageRestoreOptions model
				multiStageRestoreOptionsModel := new(backuprecoveryv1.MultiStageRestoreOptions)
				multiStageRestoreOptionsModel.EnableAutoSync = core.BoolPtr(true)
				multiStageRestoreOptionsModel.EnableMultiStageRestore = core.BoolPtr(true)

				// Construct an instance of the FilenamePatternToDirectory model
				filenamePatternToDirectoryModel := new(backuprecoveryv1.FilenamePatternToDirectory)
				filenamePatternToDirectoryModel.Directory = core.StringPtr("~/dir1")
				filenamePatternToDirectoryModel.FilenamePattern = core.StringPtr(".sql")

				// Construct an instance of the RecoveryObjectIdentifier model
				recoveryObjectIdentifierModel := new(backuprecoveryv1.RecoveryObjectIdentifier)
				recoveryObjectIdentifierModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverSqlAppNewSourceConfig model
				recoverSqlAppNewSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppNewSourceConfig)
				recoverSqlAppNewSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppNewSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppNewSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppNewSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppNewSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppNewSourceConfigModel.DatabaseName = core.StringPtr("recovery-database-sql")
				recoverSqlAppNewSourceConfigModel.Host = recoveryObjectIdentifierModel
				recoverSqlAppNewSourceConfigModel.InstanceName = core.StringPtr("database-instance-1")
				recoverSqlAppNewSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")

				// Construct an instance of the RecoverSqlAppOriginalSourceConfig model
				recoverSqlAppOriginalSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppOriginalSourceConfig)
				recoverSqlAppOriginalSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppOriginalSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppOriginalSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppOriginalSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppOriginalSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.CaptureTailLogs = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppOriginalSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")
				recoverSqlAppOriginalSourceConfigModel.NewDatabaseName = core.StringPtr("recovery-database-sql-new")

				// Construct an instance of the SqlTargetParamsForRecoverSqlApp model
				sqlTargetParamsForRecoverSqlAppModel := new(backuprecoveryv1.SqlTargetParamsForRecoverSqlApp)
				sqlTargetParamsForRecoverSqlAppModel.NewSourceConfig = recoverSqlAppNewSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.OriginalSourceConfig = recoverSqlAppOriginalSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.RecoverToNewSource = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlAppParams model
				recoverSqlAppParamsModel := new(backuprecoveryv1.RecoverSqlAppParams)
				recoverSqlAppParamsModel.SnapshotID = core.StringPtr("snapshotId")
				recoverSqlAppParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				recoverSqlAppParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				recoverSqlAppParamsModel.RecoverFromStandby = core.BoolPtr(true)
				recoverSqlAppParamsModel.AagInfo = aagInfoModel
				recoverSqlAppParamsModel.HostInfo = hostInformationModel
				recoverSqlAppParamsModel.IsEncrypted = core.BoolPtr(true)
				recoverSqlAppParamsModel.SqlTargetParams = sqlTargetParamsForRecoverSqlAppModel
				recoverSqlAppParamsModel.TargetEnvironment = core.StringPtr("kSQL")

				// Construct an instance of the RecoveryVlanConfig model
				recoveryVlanConfigModel := new(backuprecoveryv1.RecoveryVlanConfig)
				recoveryVlanConfigModel.ID = core.Int64Ptr(int64(38))
				recoveryVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlParams model
				recoverSqlParamsModel := new(backuprecoveryv1.RecoverSqlParams)
				recoverSqlParamsModel.RecoverAppParams = []backuprecoveryv1.RecoverSqlAppParams{*recoverSqlAppParamsModel}
				recoverSqlParamsModel.RecoveryAction = core.StringPtr("RecoverApps")
				recoverSqlParamsModel.VlanConfig = recoveryVlanConfigModel

				// Construct an instance of the CreateRecoveryOptions model
				createRecoveryOptionsModel := new(backuprecoveryv1.CreateRecoveryOptions)
				createRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createRecoveryOptionsModel.Name = core.StringPtr("create-recovery")
				createRecoveryOptionsModel.SnapshotEnvironment = core.StringPtr("kPhysical")
				createRecoveryOptionsModel.PhysicalParams = recoverPhysicalParamsModel
				createRecoveryOptionsModel.MssqlParams = recoverSqlParamsModel
				createRecoveryOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				createRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.CreateRecoveryWithContext(ctx, createRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.CreateRecovery(createRecoveryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.CreateRecoveryWithContext(ctx, createRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRecoveryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "progressTaskId": "ProgressTaskID", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "creationInfo": {"userName": "UserName"}, "canTearDown": false, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "TearDownMessage", "messages": ["Messages"], "isParentRecovery": true, "parentRecoveryId": "ParentRecoveryID", "retrieveArchiveTasks": [{"taskUid": "TaskUid", "uptierExpiryTimes": [17]}], "isMultiStageRestore": false, "physicalParams": {"objects": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 2, "name": "Name"}, "volumeMapping": [{"sourceVolumeGuid": "SourceVolumeGuid", "destinationVolumeGuid": "DestinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": false, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": false, "volumeNames": ["VolumeNames"], "mountedVolumeMapping": [{"originalVolume": "OriginalVolume", "mountedVolume": "MountedVolume", "fileSystemType": "FileSystemType"}], "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "restoreToOriginalPaths": true, "overwriteExisting": false, "alternateRestoreDirectory": "AlternateRestoreDirectory", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": false, "saveSuccessFiles": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 15, "filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "downloadFilePath": "DownloadFilePath"}, "systemRecoveryParams": {"fullNasPath": "FullNasPath"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13, "aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false, "sqlTargetParams": {"newSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "databaseName": "DatabaseName", "host": {"id": 2, "name": "Name"}, "instanceName": "InstanceName", "logFileDirectoryLocation": "LogFileDirectoryLocation"}, "originalSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "captureTailLogs": false, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "logFileDirectoryLocation": "LogFileDirectoryLocation", "newDatabaseName": "NewDatabaseName"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}`)
				}))
			})
			It(`Invoke CreateRecovery successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.CreateRecovery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotID")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupID")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeMountTarget model
				physicalTargetParamsForRecoverVolumeMountTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget)
				physicalTargetParamsForRecoverVolumeMountTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverVolumeMapping model
				recoverVolumeMappingModel := new(backuprecoveryv1.RecoverVolumeMapping)
				recoverVolumeMappingModel.SourceVolumeGuid = core.StringPtr("sourceVolumeGuid")
				recoverVolumeMappingModel.DestinationVolumeGuid = core.StringPtr("destinationVolumeGuid")

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeVlanConfig model
				physicalTargetParamsForRecoverVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeVlanConfig)
				physicalTargetParamsForRecoverVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalVolumeParamsPhysicalTargetParams model
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalVolumeParamsPhysicalTargetParams)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.MountTarget = physicalTargetParamsForRecoverVolumeMountTargetModel
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeMapping = []backuprecoveryv1.RecoverVolumeMapping{*recoverVolumeMappingModel}
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.ForceUnmountVolume = core.BoolPtr(true)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsRecoverVolumeParams model
				recoverPhysicalParamsRecoverVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverVolumeParams)
				recoverPhysicalParamsRecoverVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverVolumeParamsModel.PhysicalTargetParams = recoverPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the PhysicalMountVolumesOriginalTargetConfigServerCredentials model
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesOriginalTargetConfigServerCredentials)
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeOriginalTargetConfig model
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeOriginalTargetConfig)
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel.ServerCredentials = physicalMountVolumesOriginalTargetConfigServerCredentialsModel

				// Construct an instance of the RecoverTarget model
				recoverTargetModel := new(backuprecoveryv1.RecoverTarget)
				recoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalMountVolumesNewTargetConfigServerCredentials model
				physicalMountVolumesNewTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesNewTargetConfigServerCredentials)
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeNewTargetConfig model
				physicalTargetParamsForMountVolumeNewTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeNewTargetConfig)
				physicalTargetParamsForMountVolumeNewTargetConfigModel.MountTarget = recoverTargetModel
				physicalTargetParamsForMountVolumeNewTargetConfigModel.ServerCredentials = physicalMountVolumesNewTargetConfigServerCredentialsModel

				// Construct an instance of the PhysicalTargetParamsForMountVolumeVlanConfig model
				physicalTargetParamsForMountVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeVlanConfig)
				physicalTargetParamsForMountVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForMountVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the MountPhysicalVolumeParamsPhysicalTargetParams model
				mountPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.MountPhysicalVolumeParamsPhysicalTargetParams)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.MountToOriginalTarget = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.OriginalTargetConfig = physicalTargetParamsForMountVolumeOriginalTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.NewTargetConfig = physicalTargetParamsForMountVolumeNewTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.ReadOnlyMount = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeNames = []string{"volume1"}
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForMountVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsMountVolumeParams model
				recoverPhysicalParamsMountVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsMountVolumeParams)
				recoverPhysicalParamsMountVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsMountVolumeParamsModel.PhysicalTargetParams = mountPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the CommonRecoverFileAndFolderInfo model
				commonRecoverFileAndFolderInfoModel := new(backuprecoveryv1.CommonRecoverFileAndFolderInfo)
				commonRecoverFileAndFolderInfoModel.AbsolutePath = core.StringPtr("~/folder1")
				commonRecoverFileAndFolderInfoModel.IsDirectory = core.BoolPtr(true)
				commonRecoverFileAndFolderInfoModel.IsViewFileRecovery = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget model
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget)
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderVlanConfig model
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderVlanConfig)
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalFileAndFolderParamsPhysicalTargetParams model
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalFileAndFolderParamsPhysicalTargetParams)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RecoverTarget = physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreToOriginalPaths = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.OverwriteExisting = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.AlternateRestoreDirectory = core.StringPtr("~/dirAlt")
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAttributes = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveTimestamps = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAcls = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.ContinueOnError = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.SaveSuccessFiles = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverFileAndFolderVlanConfigModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreEntityType = core.StringPtr("kRegular")

				// Construct an instance of the RecoverPhysicalParamsRecoverFileAndFolderParams model
				recoverPhysicalParamsRecoverFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverFileAndFolderParams)
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.PhysicalTargetParams = recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel

				// Construct an instance of the RecoverPhysicalParamsDownloadFileAndFolderParams model
				recoverPhysicalParamsDownloadFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsDownloadFileAndFolderParams)
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.ExpiryTimeUsecs = core.Int64Ptr(int64(26))
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.DownloadFilePath = core.StringPtr("~/downloadFile")

				// Construct an instance of the RecoverPhysicalParamsSystemRecoveryParams model
				recoverPhysicalParamsSystemRecoveryParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsSystemRecoveryParams)
				recoverPhysicalParamsSystemRecoveryParamsModel.FullNasPath = core.StringPtr("~/nas")

				// Construct an instance of the RecoverPhysicalParams model
				recoverPhysicalParamsModel := new(backuprecoveryv1.RecoverPhysicalParams)
				recoverPhysicalParamsModel.Objects = []backuprecoveryv1.CommonRecoverObjectSnapshotParams{*commonRecoverObjectSnapshotParamsModel}
				recoverPhysicalParamsModel.RecoveryAction = core.StringPtr("RecoverPhysicalVolumes")
				recoverPhysicalParamsModel.RecoverVolumeParams = recoverPhysicalParamsRecoverVolumeParamsModel
				recoverPhysicalParamsModel.MountVolumeParams = recoverPhysicalParamsMountVolumeParamsModel
				recoverPhysicalParamsModel.RecoverFileAndFolderParams = recoverPhysicalParamsRecoverFileAndFolderParamsModel
				recoverPhysicalParamsModel.DownloadFileAndFolderParams = recoverPhysicalParamsDownloadFileAndFolderParamsModel
				recoverPhysicalParamsModel.SystemRecoveryParams = recoverPhysicalParamsSystemRecoveryParamsModel

				// Construct an instance of the AAGInfo model
				aagInfoModel := new(backuprecoveryv1.AAGInfo)
				aagInfoModel.Name = core.StringPtr("aagInfoName")
				aagInfoModel.ObjectID = core.Int64Ptr(int64(26))

				// Construct an instance of the HostInformation model
				hostInformationModel := new(backuprecoveryv1.HostInformation)
				hostInformationModel.ID = core.StringPtr("hostInfoId")
				hostInformationModel.Name = core.StringPtr("hostInfoName")
				hostInformationModel.Environment = core.StringPtr("kPhysical")

				// Construct an instance of the MultiStageRestoreOptions model
				multiStageRestoreOptionsModel := new(backuprecoveryv1.MultiStageRestoreOptions)
				multiStageRestoreOptionsModel.EnableAutoSync = core.BoolPtr(true)
				multiStageRestoreOptionsModel.EnableMultiStageRestore = core.BoolPtr(true)

				// Construct an instance of the FilenamePatternToDirectory model
				filenamePatternToDirectoryModel := new(backuprecoveryv1.FilenamePatternToDirectory)
				filenamePatternToDirectoryModel.Directory = core.StringPtr("~/dir1")
				filenamePatternToDirectoryModel.FilenamePattern = core.StringPtr(".sql")

				// Construct an instance of the RecoveryObjectIdentifier model
				recoveryObjectIdentifierModel := new(backuprecoveryv1.RecoveryObjectIdentifier)
				recoveryObjectIdentifierModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverSqlAppNewSourceConfig model
				recoverSqlAppNewSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppNewSourceConfig)
				recoverSqlAppNewSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppNewSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppNewSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppNewSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppNewSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppNewSourceConfigModel.DatabaseName = core.StringPtr("recovery-database-sql")
				recoverSqlAppNewSourceConfigModel.Host = recoveryObjectIdentifierModel
				recoverSqlAppNewSourceConfigModel.InstanceName = core.StringPtr("database-instance-1")
				recoverSqlAppNewSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")

				// Construct an instance of the RecoverSqlAppOriginalSourceConfig model
				recoverSqlAppOriginalSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppOriginalSourceConfig)
				recoverSqlAppOriginalSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppOriginalSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppOriginalSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppOriginalSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppOriginalSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.CaptureTailLogs = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppOriginalSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")
				recoverSqlAppOriginalSourceConfigModel.NewDatabaseName = core.StringPtr("recovery-database-sql-new")

				// Construct an instance of the SqlTargetParamsForRecoverSqlApp model
				sqlTargetParamsForRecoverSqlAppModel := new(backuprecoveryv1.SqlTargetParamsForRecoverSqlApp)
				sqlTargetParamsForRecoverSqlAppModel.NewSourceConfig = recoverSqlAppNewSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.OriginalSourceConfig = recoverSqlAppOriginalSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.RecoverToNewSource = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlAppParams model
				recoverSqlAppParamsModel := new(backuprecoveryv1.RecoverSqlAppParams)
				recoverSqlAppParamsModel.SnapshotID = core.StringPtr("snapshotId")
				recoverSqlAppParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				recoverSqlAppParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				recoverSqlAppParamsModel.RecoverFromStandby = core.BoolPtr(true)
				recoverSqlAppParamsModel.AagInfo = aagInfoModel
				recoverSqlAppParamsModel.HostInfo = hostInformationModel
				recoverSqlAppParamsModel.IsEncrypted = core.BoolPtr(true)
				recoverSqlAppParamsModel.SqlTargetParams = sqlTargetParamsForRecoverSqlAppModel
				recoverSqlAppParamsModel.TargetEnvironment = core.StringPtr("kSQL")

				// Construct an instance of the RecoveryVlanConfig model
				recoveryVlanConfigModel := new(backuprecoveryv1.RecoveryVlanConfig)
				recoveryVlanConfigModel.ID = core.Int64Ptr(int64(38))
				recoveryVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlParams model
				recoverSqlParamsModel := new(backuprecoveryv1.RecoverSqlParams)
				recoverSqlParamsModel.RecoverAppParams = []backuprecoveryv1.RecoverSqlAppParams{*recoverSqlAppParamsModel}
				recoverSqlParamsModel.RecoveryAction = core.StringPtr("RecoverApps")
				recoverSqlParamsModel.VlanConfig = recoveryVlanConfigModel

				// Construct an instance of the CreateRecoveryOptions model
				createRecoveryOptionsModel := new(backuprecoveryv1.CreateRecoveryOptions)
				createRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createRecoveryOptionsModel.Name = core.StringPtr("create-recovery")
				createRecoveryOptionsModel.SnapshotEnvironment = core.StringPtr("kPhysical")
				createRecoveryOptionsModel.PhysicalParams = recoverPhysicalParamsModel
				createRecoveryOptionsModel.MssqlParams = recoverSqlParamsModel
				createRecoveryOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				createRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.CreateRecovery(createRecoveryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateRecovery with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotID")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupID")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeMountTarget model
				physicalTargetParamsForRecoverVolumeMountTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget)
				physicalTargetParamsForRecoverVolumeMountTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverVolumeMapping model
				recoverVolumeMappingModel := new(backuprecoveryv1.RecoverVolumeMapping)
				recoverVolumeMappingModel.SourceVolumeGuid = core.StringPtr("sourceVolumeGuid")
				recoverVolumeMappingModel.DestinationVolumeGuid = core.StringPtr("destinationVolumeGuid")

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeVlanConfig model
				physicalTargetParamsForRecoverVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeVlanConfig)
				physicalTargetParamsForRecoverVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalVolumeParamsPhysicalTargetParams model
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalVolumeParamsPhysicalTargetParams)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.MountTarget = physicalTargetParamsForRecoverVolumeMountTargetModel
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeMapping = []backuprecoveryv1.RecoverVolumeMapping{*recoverVolumeMappingModel}
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.ForceUnmountVolume = core.BoolPtr(true)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsRecoverVolumeParams model
				recoverPhysicalParamsRecoverVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverVolumeParams)
				recoverPhysicalParamsRecoverVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverVolumeParamsModel.PhysicalTargetParams = recoverPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the PhysicalMountVolumesOriginalTargetConfigServerCredentials model
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesOriginalTargetConfigServerCredentials)
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeOriginalTargetConfig model
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeOriginalTargetConfig)
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel.ServerCredentials = physicalMountVolumesOriginalTargetConfigServerCredentialsModel

				// Construct an instance of the RecoverTarget model
				recoverTargetModel := new(backuprecoveryv1.RecoverTarget)
				recoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalMountVolumesNewTargetConfigServerCredentials model
				physicalMountVolumesNewTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesNewTargetConfigServerCredentials)
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeNewTargetConfig model
				physicalTargetParamsForMountVolumeNewTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeNewTargetConfig)
				physicalTargetParamsForMountVolumeNewTargetConfigModel.MountTarget = recoverTargetModel
				physicalTargetParamsForMountVolumeNewTargetConfigModel.ServerCredentials = physicalMountVolumesNewTargetConfigServerCredentialsModel

				// Construct an instance of the PhysicalTargetParamsForMountVolumeVlanConfig model
				physicalTargetParamsForMountVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeVlanConfig)
				physicalTargetParamsForMountVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForMountVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the MountPhysicalVolumeParamsPhysicalTargetParams model
				mountPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.MountPhysicalVolumeParamsPhysicalTargetParams)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.MountToOriginalTarget = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.OriginalTargetConfig = physicalTargetParamsForMountVolumeOriginalTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.NewTargetConfig = physicalTargetParamsForMountVolumeNewTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.ReadOnlyMount = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeNames = []string{"volume1"}
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForMountVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsMountVolumeParams model
				recoverPhysicalParamsMountVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsMountVolumeParams)
				recoverPhysicalParamsMountVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsMountVolumeParamsModel.PhysicalTargetParams = mountPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the CommonRecoverFileAndFolderInfo model
				commonRecoverFileAndFolderInfoModel := new(backuprecoveryv1.CommonRecoverFileAndFolderInfo)
				commonRecoverFileAndFolderInfoModel.AbsolutePath = core.StringPtr("~/folder1")
				commonRecoverFileAndFolderInfoModel.IsDirectory = core.BoolPtr(true)
				commonRecoverFileAndFolderInfoModel.IsViewFileRecovery = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget model
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget)
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderVlanConfig model
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderVlanConfig)
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalFileAndFolderParamsPhysicalTargetParams model
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalFileAndFolderParamsPhysicalTargetParams)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RecoverTarget = physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreToOriginalPaths = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.OverwriteExisting = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.AlternateRestoreDirectory = core.StringPtr("~/dirAlt")
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAttributes = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveTimestamps = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAcls = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.ContinueOnError = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.SaveSuccessFiles = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverFileAndFolderVlanConfigModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreEntityType = core.StringPtr("kRegular")

				// Construct an instance of the RecoverPhysicalParamsRecoverFileAndFolderParams model
				recoverPhysicalParamsRecoverFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverFileAndFolderParams)
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.PhysicalTargetParams = recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel

				// Construct an instance of the RecoverPhysicalParamsDownloadFileAndFolderParams model
				recoverPhysicalParamsDownloadFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsDownloadFileAndFolderParams)
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.ExpiryTimeUsecs = core.Int64Ptr(int64(26))
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.DownloadFilePath = core.StringPtr("~/downloadFile")

				// Construct an instance of the RecoverPhysicalParamsSystemRecoveryParams model
				recoverPhysicalParamsSystemRecoveryParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsSystemRecoveryParams)
				recoverPhysicalParamsSystemRecoveryParamsModel.FullNasPath = core.StringPtr("~/nas")

				// Construct an instance of the RecoverPhysicalParams model
				recoverPhysicalParamsModel := new(backuprecoveryv1.RecoverPhysicalParams)
				recoverPhysicalParamsModel.Objects = []backuprecoveryv1.CommonRecoverObjectSnapshotParams{*commonRecoverObjectSnapshotParamsModel}
				recoverPhysicalParamsModel.RecoveryAction = core.StringPtr("RecoverPhysicalVolumes")
				recoverPhysicalParamsModel.RecoverVolumeParams = recoverPhysicalParamsRecoverVolumeParamsModel
				recoverPhysicalParamsModel.MountVolumeParams = recoverPhysicalParamsMountVolumeParamsModel
				recoverPhysicalParamsModel.RecoverFileAndFolderParams = recoverPhysicalParamsRecoverFileAndFolderParamsModel
				recoverPhysicalParamsModel.DownloadFileAndFolderParams = recoverPhysicalParamsDownloadFileAndFolderParamsModel
				recoverPhysicalParamsModel.SystemRecoveryParams = recoverPhysicalParamsSystemRecoveryParamsModel

				// Construct an instance of the AAGInfo model
				aagInfoModel := new(backuprecoveryv1.AAGInfo)
				aagInfoModel.Name = core.StringPtr("aagInfoName")
				aagInfoModel.ObjectID = core.Int64Ptr(int64(26))

				// Construct an instance of the HostInformation model
				hostInformationModel := new(backuprecoveryv1.HostInformation)
				hostInformationModel.ID = core.StringPtr("hostInfoId")
				hostInformationModel.Name = core.StringPtr("hostInfoName")
				hostInformationModel.Environment = core.StringPtr("kPhysical")

				// Construct an instance of the MultiStageRestoreOptions model
				multiStageRestoreOptionsModel := new(backuprecoveryv1.MultiStageRestoreOptions)
				multiStageRestoreOptionsModel.EnableAutoSync = core.BoolPtr(true)
				multiStageRestoreOptionsModel.EnableMultiStageRestore = core.BoolPtr(true)

				// Construct an instance of the FilenamePatternToDirectory model
				filenamePatternToDirectoryModel := new(backuprecoveryv1.FilenamePatternToDirectory)
				filenamePatternToDirectoryModel.Directory = core.StringPtr("~/dir1")
				filenamePatternToDirectoryModel.FilenamePattern = core.StringPtr(".sql")

				// Construct an instance of the RecoveryObjectIdentifier model
				recoveryObjectIdentifierModel := new(backuprecoveryv1.RecoveryObjectIdentifier)
				recoveryObjectIdentifierModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverSqlAppNewSourceConfig model
				recoverSqlAppNewSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppNewSourceConfig)
				recoverSqlAppNewSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppNewSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppNewSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppNewSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppNewSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppNewSourceConfigModel.DatabaseName = core.StringPtr("recovery-database-sql")
				recoverSqlAppNewSourceConfigModel.Host = recoveryObjectIdentifierModel
				recoverSqlAppNewSourceConfigModel.InstanceName = core.StringPtr("database-instance-1")
				recoverSqlAppNewSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")

				// Construct an instance of the RecoverSqlAppOriginalSourceConfig model
				recoverSqlAppOriginalSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppOriginalSourceConfig)
				recoverSqlAppOriginalSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppOriginalSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppOriginalSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppOriginalSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppOriginalSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.CaptureTailLogs = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppOriginalSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")
				recoverSqlAppOriginalSourceConfigModel.NewDatabaseName = core.StringPtr("recovery-database-sql-new")

				// Construct an instance of the SqlTargetParamsForRecoverSqlApp model
				sqlTargetParamsForRecoverSqlAppModel := new(backuprecoveryv1.SqlTargetParamsForRecoverSqlApp)
				sqlTargetParamsForRecoverSqlAppModel.NewSourceConfig = recoverSqlAppNewSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.OriginalSourceConfig = recoverSqlAppOriginalSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.RecoverToNewSource = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlAppParams model
				recoverSqlAppParamsModel := new(backuprecoveryv1.RecoverSqlAppParams)
				recoverSqlAppParamsModel.SnapshotID = core.StringPtr("snapshotId")
				recoverSqlAppParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				recoverSqlAppParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				recoverSqlAppParamsModel.RecoverFromStandby = core.BoolPtr(true)
				recoverSqlAppParamsModel.AagInfo = aagInfoModel
				recoverSqlAppParamsModel.HostInfo = hostInformationModel
				recoverSqlAppParamsModel.IsEncrypted = core.BoolPtr(true)
				recoverSqlAppParamsModel.SqlTargetParams = sqlTargetParamsForRecoverSqlAppModel
				recoverSqlAppParamsModel.TargetEnvironment = core.StringPtr("kSQL")

				// Construct an instance of the RecoveryVlanConfig model
				recoveryVlanConfigModel := new(backuprecoveryv1.RecoveryVlanConfig)
				recoveryVlanConfigModel.ID = core.Int64Ptr(int64(38))
				recoveryVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlParams model
				recoverSqlParamsModel := new(backuprecoveryv1.RecoverSqlParams)
				recoverSqlParamsModel.RecoverAppParams = []backuprecoveryv1.RecoverSqlAppParams{*recoverSqlAppParamsModel}
				recoverSqlParamsModel.RecoveryAction = core.StringPtr("RecoverApps")
				recoverSqlParamsModel.VlanConfig = recoveryVlanConfigModel

				// Construct an instance of the CreateRecoveryOptions model
				createRecoveryOptionsModel := new(backuprecoveryv1.CreateRecoveryOptions)
				createRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createRecoveryOptionsModel.Name = core.StringPtr("create-recovery")
				createRecoveryOptionsModel.SnapshotEnvironment = core.StringPtr("kPhysical")
				createRecoveryOptionsModel.PhysicalParams = recoverPhysicalParamsModel
				createRecoveryOptionsModel.MssqlParams = recoverSqlParamsModel
				createRecoveryOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				createRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.CreateRecovery(createRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateRecoveryOptions model with no property values
				createRecoveryOptionsModelNew := new(backuprecoveryv1.CreateRecoveryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.CreateRecovery(createRecoveryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateRecovery successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotID")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupID")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeMountTarget model
				physicalTargetParamsForRecoverVolumeMountTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget)
				physicalTargetParamsForRecoverVolumeMountTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverVolumeMapping model
				recoverVolumeMappingModel := new(backuprecoveryv1.RecoverVolumeMapping)
				recoverVolumeMappingModel.SourceVolumeGuid = core.StringPtr("sourceVolumeGuid")
				recoverVolumeMappingModel.DestinationVolumeGuid = core.StringPtr("destinationVolumeGuid")

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeVlanConfig model
				physicalTargetParamsForRecoverVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeVlanConfig)
				physicalTargetParamsForRecoverVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalVolumeParamsPhysicalTargetParams model
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalVolumeParamsPhysicalTargetParams)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.MountTarget = physicalTargetParamsForRecoverVolumeMountTargetModel
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeMapping = []backuprecoveryv1.RecoverVolumeMapping{*recoverVolumeMappingModel}
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.ForceUnmountVolume = core.BoolPtr(true)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsRecoverVolumeParams model
				recoverPhysicalParamsRecoverVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverVolumeParams)
				recoverPhysicalParamsRecoverVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverVolumeParamsModel.PhysicalTargetParams = recoverPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the PhysicalMountVolumesOriginalTargetConfigServerCredentials model
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesOriginalTargetConfigServerCredentials)
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeOriginalTargetConfig model
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeOriginalTargetConfig)
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel.ServerCredentials = physicalMountVolumesOriginalTargetConfigServerCredentialsModel

				// Construct an instance of the RecoverTarget model
				recoverTargetModel := new(backuprecoveryv1.RecoverTarget)
				recoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalMountVolumesNewTargetConfigServerCredentials model
				physicalMountVolumesNewTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesNewTargetConfigServerCredentials)
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")

				// Construct an instance of the PhysicalTargetParamsForMountVolumeNewTargetConfig model
				physicalTargetParamsForMountVolumeNewTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeNewTargetConfig)
				physicalTargetParamsForMountVolumeNewTargetConfigModel.MountTarget = recoverTargetModel
				physicalTargetParamsForMountVolumeNewTargetConfigModel.ServerCredentials = physicalMountVolumesNewTargetConfigServerCredentialsModel

				// Construct an instance of the PhysicalTargetParamsForMountVolumeVlanConfig model
				physicalTargetParamsForMountVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeVlanConfig)
				physicalTargetParamsForMountVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForMountVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the MountPhysicalVolumeParamsPhysicalTargetParams model
				mountPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.MountPhysicalVolumeParamsPhysicalTargetParams)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.MountToOriginalTarget = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.OriginalTargetConfig = physicalTargetParamsForMountVolumeOriginalTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.NewTargetConfig = physicalTargetParamsForMountVolumeNewTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.ReadOnlyMount = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeNames = []string{"volume1"}
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForMountVolumeVlanConfigModel

				// Construct an instance of the RecoverPhysicalParamsMountVolumeParams model
				recoverPhysicalParamsMountVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsMountVolumeParams)
				recoverPhysicalParamsMountVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsMountVolumeParamsModel.PhysicalTargetParams = mountPhysicalVolumeParamsPhysicalTargetParamsModel

				// Construct an instance of the CommonRecoverFileAndFolderInfo model
				commonRecoverFileAndFolderInfoModel := new(backuprecoveryv1.CommonRecoverFileAndFolderInfo)
				commonRecoverFileAndFolderInfoModel.AbsolutePath = core.StringPtr("~/folder1")
				commonRecoverFileAndFolderInfoModel.IsDirectory = core.BoolPtr(true)
				commonRecoverFileAndFolderInfoModel.IsViewFileRecovery = core.BoolPtr(true)

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget model
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget)
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderVlanConfig model
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderVlanConfig)
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverPhysicalFileAndFolderParamsPhysicalTargetParams model
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalFileAndFolderParamsPhysicalTargetParams)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RecoverTarget = physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreToOriginalPaths = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.OverwriteExisting = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.AlternateRestoreDirectory = core.StringPtr("~/dirAlt")
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAttributes = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveTimestamps = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAcls = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.ContinueOnError = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.SaveSuccessFiles = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverFileAndFolderVlanConfigModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreEntityType = core.StringPtr("kRegular")

				// Construct an instance of the RecoverPhysicalParamsRecoverFileAndFolderParams model
				recoverPhysicalParamsRecoverFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverFileAndFolderParams)
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.PhysicalTargetParams = recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel

				// Construct an instance of the RecoverPhysicalParamsDownloadFileAndFolderParams model
				recoverPhysicalParamsDownloadFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsDownloadFileAndFolderParams)
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.ExpiryTimeUsecs = core.Int64Ptr(int64(26))
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.DownloadFilePath = core.StringPtr("~/downloadFile")

				// Construct an instance of the RecoverPhysicalParamsSystemRecoveryParams model
				recoverPhysicalParamsSystemRecoveryParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsSystemRecoveryParams)
				recoverPhysicalParamsSystemRecoveryParamsModel.FullNasPath = core.StringPtr("~/nas")

				// Construct an instance of the RecoverPhysicalParams model
				recoverPhysicalParamsModel := new(backuprecoveryv1.RecoverPhysicalParams)
				recoverPhysicalParamsModel.Objects = []backuprecoveryv1.CommonRecoverObjectSnapshotParams{*commonRecoverObjectSnapshotParamsModel}
				recoverPhysicalParamsModel.RecoveryAction = core.StringPtr("RecoverPhysicalVolumes")
				recoverPhysicalParamsModel.RecoverVolumeParams = recoverPhysicalParamsRecoverVolumeParamsModel
				recoverPhysicalParamsModel.MountVolumeParams = recoverPhysicalParamsMountVolumeParamsModel
				recoverPhysicalParamsModel.RecoverFileAndFolderParams = recoverPhysicalParamsRecoverFileAndFolderParamsModel
				recoverPhysicalParamsModel.DownloadFileAndFolderParams = recoverPhysicalParamsDownloadFileAndFolderParamsModel
				recoverPhysicalParamsModel.SystemRecoveryParams = recoverPhysicalParamsSystemRecoveryParamsModel

				// Construct an instance of the AAGInfo model
				aagInfoModel := new(backuprecoveryv1.AAGInfo)
				aagInfoModel.Name = core.StringPtr("aagInfoName")
				aagInfoModel.ObjectID = core.Int64Ptr(int64(26))

				// Construct an instance of the HostInformation model
				hostInformationModel := new(backuprecoveryv1.HostInformation)
				hostInformationModel.ID = core.StringPtr("hostInfoId")
				hostInformationModel.Name = core.StringPtr("hostInfoName")
				hostInformationModel.Environment = core.StringPtr("kPhysical")

				// Construct an instance of the MultiStageRestoreOptions model
				multiStageRestoreOptionsModel := new(backuprecoveryv1.MultiStageRestoreOptions)
				multiStageRestoreOptionsModel.EnableAutoSync = core.BoolPtr(true)
				multiStageRestoreOptionsModel.EnableMultiStageRestore = core.BoolPtr(true)

				// Construct an instance of the FilenamePatternToDirectory model
				filenamePatternToDirectoryModel := new(backuprecoveryv1.FilenamePatternToDirectory)
				filenamePatternToDirectoryModel.Directory = core.StringPtr("~/dir1")
				filenamePatternToDirectoryModel.FilenamePattern = core.StringPtr(".sql")

				// Construct an instance of the RecoveryObjectIdentifier model
				recoveryObjectIdentifierModel := new(backuprecoveryv1.RecoveryObjectIdentifier)
				recoveryObjectIdentifierModel.ID = core.Int64Ptr(int64(26))

				// Construct an instance of the RecoverSqlAppNewSourceConfig model
				recoverSqlAppNewSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppNewSourceConfig)
				recoverSqlAppNewSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppNewSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppNewSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppNewSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppNewSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppNewSourceConfigModel.DatabaseName = core.StringPtr("recovery-database-sql")
				recoverSqlAppNewSourceConfigModel.Host = recoveryObjectIdentifierModel
				recoverSqlAppNewSourceConfigModel.InstanceName = core.StringPtr("database-instance-1")
				recoverSqlAppNewSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")

				// Construct an instance of the RecoverSqlAppOriginalSourceConfig model
				recoverSqlAppOriginalSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppOriginalSourceConfig)
				recoverSqlAppOriginalSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppOriginalSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppOriginalSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppOriginalSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppOriginalSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.CaptureTailLogs = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppOriginalSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")
				recoverSqlAppOriginalSourceConfigModel.NewDatabaseName = core.StringPtr("recovery-database-sql-new")

				// Construct an instance of the SqlTargetParamsForRecoverSqlApp model
				sqlTargetParamsForRecoverSqlAppModel := new(backuprecoveryv1.SqlTargetParamsForRecoverSqlApp)
				sqlTargetParamsForRecoverSqlAppModel.NewSourceConfig = recoverSqlAppNewSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.OriginalSourceConfig = recoverSqlAppOriginalSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.RecoverToNewSource = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlAppParams model
				recoverSqlAppParamsModel := new(backuprecoveryv1.RecoverSqlAppParams)
				recoverSqlAppParamsModel.SnapshotID = core.StringPtr("snapshotId")
				recoverSqlAppParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				recoverSqlAppParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				recoverSqlAppParamsModel.RecoverFromStandby = core.BoolPtr(true)
				recoverSqlAppParamsModel.AagInfo = aagInfoModel
				recoverSqlAppParamsModel.HostInfo = hostInformationModel
				recoverSqlAppParamsModel.IsEncrypted = core.BoolPtr(true)
				recoverSqlAppParamsModel.SqlTargetParams = sqlTargetParamsForRecoverSqlAppModel
				recoverSqlAppParamsModel.TargetEnvironment = core.StringPtr("kSQL")

				// Construct an instance of the RecoveryVlanConfig model
				recoveryVlanConfigModel := new(backuprecoveryv1.RecoveryVlanConfig)
				recoveryVlanConfigModel.ID = core.Int64Ptr(int64(38))
				recoveryVlanConfigModel.DisableVlan = core.BoolPtr(true)

				// Construct an instance of the RecoverSqlParams model
				recoverSqlParamsModel := new(backuprecoveryv1.RecoverSqlParams)
				recoverSqlParamsModel.RecoverAppParams = []backuprecoveryv1.RecoverSqlAppParams{*recoverSqlAppParamsModel}
				recoverSqlParamsModel.RecoveryAction = core.StringPtr("RecoverApps")
				recoverSqlParamsModel.VlanConfig = recoveryVlanConfigModel

				// Construct an instance of the CreateRecoveryOptions model
				createRecoveryOptionsModel := new(backuprecoveryv1.CreateRecoveryOptions)
				createRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createRecoveryOptionsModel.Name = core.StringPtr("create-recovery")
				createRecoveryOptionsModel.SnapshotEnvironment = core.StringPtr("kPhysical")
				createRecoveryOptionsModel.PhysicalParams = recoverPhysicalParamsModel
				createRecoveryOptionsModel.MssqlParams = recoverSqlParamsModel
				createRecoveryOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				createRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.CreateRecovery(createRecoveryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptions *CreateDownloadFilesAndFoldersRecoveryOptions) - Operation response error`, func() {
		createDownloadFilesAndFoldersRecoveryPath := "/data-protect/recoveries/download-files-folders"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDownloadFilesAndFoldersRecoveryPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDownloadFilesAndFoldersRecovery with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotId")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the FilesAndFoldersObject model
				filesAndFoldersObjectModel := new(backuprecoveryv1.FilesAndFoldersObject)
				filesAndFoldersObjectModel.AbsolutePath = core.StringPtr("~/home/dir1")
				filesAndFoldersObjectModel.IsDirectory = core.BoolPtr(true)

				// Construct an instance of the DocumentObject model
				documentObjectModel := new(backuprecoveryv1.DocumentObject)
				documentObjectModel.IsDirectory = core.BoolPtr(true)
				documentObjectModel.ItemID = core.StringPtr("item1")

				// Construct an instance of the CreateDownloadFilesAndFoldersRecoveryOptions model
				createDownloadFilesAndFoldersRecoveryOptionsModel := new(backuprecoveryv1.CreateDownloadFilesAndFoldersRecoveryOptions)
				createDownloadFilesAndFoldersRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Name = core.StringPtr("create-download-files-and-folders-recovery")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Object = commonRecoverObjectSnapshotParamsModel
				createDownloadFilesAndFoldersRecoveryOptionsModel.FilesAndFolders = []backuprecoveryv1.FilesAndFoldersObject{*filesAndFoldersObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.Documents = []backuprecoveryv1.DocumentObject{*documentObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.ParentRecoveryID = core.StringPtr("parentRecoveryId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.GlacierRetrievalType = core.StringPtr("kStandard")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptions *CreateDownloadFilesAndFoldersRecoveryOptions)`, func() {
		createDownloadFilesAndFoldersRecoveryPath := "/data-protect/recoveries/download-files-folders"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDownloadFilesAndFoldersRecoveryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "progressTaskId": "ProgressTaskID", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "creationInfo": {"userName": "UserName"}, "canTearDown": false, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "TearDownMessage", "messages": ["Messages"], "isParentRecovery": true, "parentRecoveryId": "ParentRecoveryID", "retrieveArchiveTasks": [{"taskUid": "TaskUid", "uptierExpiryTimes": [17]}], "isMultiStageRestore": false, "physicalParams": {"objects": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 2, "name": "Name"}, "volumeMapping": [{"sourceVolumeGuid": "SourceVolumeGuid", "destinationVolumeGuid": "DestinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": false, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": false, "volumeNames": ["VolumeNames"], "mountedVolumeMapping": [{"originalVolume": "OriginalVolume", "mountedVolume": "MountedVolume", "fileSystemType": "FileSystemType"}], "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "restoreToOriginalPaths": true, "overwriteExisting": false, "alternateRestoreDirectory": "AlternateRestoreDirectory", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": false, "saveSuccessFiles": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 15, "filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "downloadFilePath": "DownloadFilePath"}, "systemRecoveryParams": {"fullNasPath": "FullNasPath"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13, "aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false, "sqlTargetParams": {"newSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "databaseName": "DatabaseName", "host": {"id": 2, "name": "Name"}, "instanceName": "InstanceName", "logFileDirectoryLocation": "LogFileDirectoryLocation"}, "originalSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "captureTailLogs": false, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "logFileDirectoryLocation": "LogFileDirectoryLocation", "newDatabaseName": "NewDatabaseName"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}`)
				}))
			})
			It(`Invoke CreateDownloadFilesAndFoldersRecovery successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotId")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the FilesAndFoldersObject model
				filesAndFoldersObjectModel := new(backuprecoveryv1.FilesAndFoldersObject)
				filesAndFoldersObjectModel.AbsolutePath = core.StringPtr("~/home/dir1")
				filesAndFoldersObjectModel.IsDirectory = core.BoolPtr(true)

				// Construct an instance of the DocumentObject model
				documentObjectModel := new(backuprecoveryv1.DocumentObject)
				documentObjectModel.IsDirectory = core.BoolPtr(true)
				documentObjectModel.ItemID = core.StringPtr("item1")

				// Construct an instance of the CreateDownloadFilesAndFoldersRecoveryOptions model
				createDownloadFilesAndFoldersRecoveryOptionsModel := new(backuprecoveryv1.CreateDownloadFilesAndFoldersRecoveryOptions)
				createDownloadFilesAndFoldersRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Name = core.StringPtr("create-download-files-and-folders-recovery")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Object = commonRecoverObjectSnapshotParamsModel
				createDownloadFilesAndFoldersRecoveryOptionsModel.FilesAndFolders = []backuprecoveryv1.FilesAndFoldersObject{*filesAndFoldersObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.Documents = []backuprecoveryv1.DocumentObject{*documentObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.ParentRecoveryID = core.StringPtr("parentRecoveryId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.GlacierRetrievalType = core.StringPtr("kStandard")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.CreateDownloadFilesAndFoldersRecoveryWithContext(ctx, createDownloadFilesAndFoldersRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.CreateDownloadFilesAndFoldersRecoveryWithContext(ctx, createDownloadFilesAndFoldersRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDownloadFilesAndFoldersRecoveryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "progressTaskId": "ProgressTaskID", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "creationInfo": {"userName": "UserName"}, "canTearDown": false, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "TearDownMessage", "messages": ["Messages"], "isParentRecovery": true, "parentRecoveryId": "ParentRecoveryID", "retrieveArchiveTasks": [{"taskUid": "TaskUid", "uptierExpiryTimes": [17]}], "isMultiStageRestore": false, "physicalParams": {"objects": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 2, "name": "Name"}, "volumeMapping": [{"sourceVolumeGuid": "SourceVolumeGuid", "destinationVolumeGuid": "DestinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": false, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": false, "volumeNames": ["VolumeNames"], "mountedVolumeMapping": [{"originalVolume": "OriginalVolume", "mountedVolume": "MountedVolume", "fileSystemType": "FileSystemType"}], "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "restoreToOriginalPaths": true, "overwriteExisting": false, "alternateRestoreDirectory": "AlternateRestoreDirectory", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": false, "saveSuccessFiles": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 15, "filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "downloadFilePath": "DownloadFilePath"}, "systemRecoveryParams": {"fullNasPath": "FullNasPath"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13, "aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false, "sqlTargetParams": {"newSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "databaseName": "DatabaseName", "host": {"id": 2, "name": "Name"}, "instanceName": "InstanceName", "logFileDirectoryLocation": "LogFileDirectoryLocation"}, "originalSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "captureTailLogs": false, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "logFileDirectoryLocation": "LogFileDirectoryLocation", "newDatabaseName": "NewDatabaseName"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}`)
				}))
			})
			It(`Invoke CreateDownloadFilesAndFoldersRecovery successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.CreateDownloadFilesAndFoldersRecovery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotId")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the FilesAndFoldersObject model
				filesAndFoldersObjectModel := new(backuprecoveryv1.FilesAndFoldersObject)
				filesAndFoldersObjectModel.AbsolutePath = core.StringPtr("~/home/dir1")
				filesAndFoldersObjectModel.IsDirectory = core.BoolPtr(true)

				// Construct an instance of the DocumentObject model
				documentObjectModel := new(backuprecoveryv1.DocumentObject)
				documentObjectModel.IsDirectory = core.BoolPtr(true)
				documentObjectModel.ItemID = core.StringPtr("item1")

				// Construct an instance of the CreateDownloadFilesAndFoldersRecoveryOptions model
				createDownloadFilesAndFoldersRecoveryOptionsModel := new(backuprecoveryv1.CreateDownloadFilesAndFoldersRecoveryOptions)
				createDownloadFilesAndFoldersRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Name = core.StringPtr("create-download-files-and-folders-recovery")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Object = commonRecoverObjectSnapshotParamsModel
				createDownloadFilesAndFoldersRecoveryOptionsModel.FilesAndFolders = []backuprecoveryv1.FilesAndFoldersObject{*filesAndFoldersObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.Documents = []backuprecoveryv1.DocumentObject{*documentObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.ParentRecoveryID = core.StringPtr("parentRecoveryId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.GlacierRetrievalType = core.StringPtr("kStandard")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDownloadFilesAndFoldersRecovery with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotId")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the FilesAndFoldersObject model
				filesAndFoldersObjectModel := new(backuprecoveryv1.FilesAndFoldersObject)
				filesAndFoldersObjectModel.AbsolutePath = core.StringPtr("~/home/dir1")
				filesAndFoldersObjectModel.IsDirectory = core.BoolPtr(true)

				// Construct an instance of the DocumentObject model
				documentObjectModel := new(backuprecoveryv1.DocumentObject)
				documentObjectModel.IsDirectory = core.BoolPtr(true)
				documentObjectModel.ItemID = core.StringPtr("item1")

				// Construct an instance of the CreateDownloadFilesAndFoldersRecoveryOptions model
				createDownloadFilesAndFoldersRecoveryOptionsModel := new(backuprecoveryv1.CreateDownloadFilesAndFoldersRecoveryOptions)
				createDownloadFilesAndFoldersRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Name = core.StringPtr("create-download-files-and-folders-recovery")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Object = commonRecoverObjectSnapshotParamsModel
				createDownloadFilesAndFoldersRecoveryOptionsModel.FilesAndFolders = []backuprecoveryv1.FilesAndFoldersObject{*filesAndFoldersObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.Documents = []backuprecoveryv1.DocumentObject{*documentObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.ParentRecoveryID = core.StringPtr("parentRecoveryId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.GlacierRetrievalType = core.StringPtr("kStandard")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDownloadFilesAndFoldersRecoveryOptions model with no property values
				createDownloadFilesAndFoldersRecoveryOptionsModelNew := new(backuprecoveryv1.CreateDownloadFilesAndFoldersRecoveryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateDownloadFilesAndFoldersRecovery successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotId")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)

				// Construct an instance of the FilesAndFoldersObject model
				filesAndFoldersObjectModel := new(backuprecoveryv1.FilesAndFoldersObject)
				filesAndFoldersObjectModel.AbsolutePath = core.StringPtr("~/home/dir1")
				filesAndFoldersObjectModel.IsDirectory = core.BoolPtr(true)

				// Construct an instance of the DocumentObject model
				documentObjectModel := new(backuprecoveryv1.DocumentObject)
				documentObjectModel.IsDirectory = core.BoolPtr(true)
				documentObjectModel.ItemID = core.StringPtr("item1")

				// Construct an instance of the CreateDownloadFilesAndFoldersRecoveryOptions model
				createDownloadFilesAndFoldersRecoveryOptionsModel := new(backuprecoveryv1.CreateDownloadFilesAndFoldersRecoveryOptions)
				createDownloadFilesAndFoldersRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Name = core.StringPtr("create-download-files-and-folders-recovery")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Object = commonRecoverObjectSnapshotParamsModel
				createDownloadFilesAndFoldersRecoveryOptionsModel.FilesAndFolders = []backuprecoveryv1.FilesAndFoldersObject{*filesAndFoldersObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.Documents = []backuprecoveryv1.DocumentObject{*documentObjectModel}
				createDownloadFilesAndFoldersRecoveryOptionsModel.ParentRecoveryID = core.StringPtr("parentRecoveryId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.GlacierRetrievalType = core.StringPtr("kStandard")
				createDownloadFilesAndFoldersRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.CreateDownloadFilesAndFoldersRecovery(createDownloadFilesAndFoldersRecoveryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRecoveryByID(getRecoveryByIdOptions *GetRecoveryByIdOptions) - Operation response error`, func() {
		getRecoveryByIDPath := "/data-protect/recoveries/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRecoveryByIDPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRecoveryByID with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRecoveryByIdOptions model
				getRecoveryByIdOptionsModel := new(backuprecoveryv1.GetRecoveryByIdOptions)
				getRecoveryByIdOptionsModel.ID = core.StringPtr("testString")
				getRecoveryByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveryByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetRecoveryByID(getRecoveryByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetRecoveryByID(getRecoveryByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRecoveryByID(getRecoveryByIdOptions *GetRecoveryByIdOptions)`, func() {
		getRecoveryByIDPath := "/data-protect/recoveries/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRecoveryByIDPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "progressTaskId": "ProgressTaskID", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "creationInfo": {"userName": "UserName"}, "canTearDown": false, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "TearDownMessage", "messages": ["Messages"], "isParentRecovery": true, "parentRecoveryId": "ParentRecoveryID", "retrieveArchiveTasks": [{"taskUid": "TaskUid", "uptierExpiryTimes": [17]}], "isMultiStageRestore": false, "physicalParams": {"objects": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 2, "name": "Name"}, "volumeMapping": [{"sourceVolumeGuid": "SourceVolumeGuid", "destinationVolumeGuid": "DestinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": false, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": false, "volumeNames": ["VolumeNames"], "mountedVolumeMapping": [{"originalVolume": "OriginalVolume", "mountedVolume": "MountedVolume", "fileSystemType": "FileSystemType"}], "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "restoreToOriginalPaths": true, "overwriteExisting": false, "alternateRestoreDirectory": "AlternateRestoreDirectory", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": false, "saveSuccessFiles": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 15, "filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "downloadFilePath": "DownloadFilePath"}, "systemRecoveryParams": {"fullNasPath": "FullNasPath"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13, "aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false, "sqlTargetParams": {"newSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "databaseName": "DatabaseName", "host": {"id": 2, "name": "Name"}, "instanceName": "InstanceName", "logFileDirectoryLocation": "LogFileDirectoryLocation"}, "originalSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "captureTailLogs": false, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "logFileDirectoryLocation": "LogFileDirectoryLocation", "newDatabaseName": "NewDatabaseName"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}`)
				}))
			})
			It(`Invoke GetRecoveryByID successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetRecoveryByIdOptions model
				getRecoveryByIdOptionsModel := new(backuprecoveryv1.GetRecoveryByIdOptions)
				getRecoveryByIdOptionsModel.ID = core.StringPtr("testString")
				getRecoveryByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveryByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetRecoveryByIDWithContext(ctx, getRecoveryByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetRecoveryByID(getRecoveryByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetRecoveryByIDWithContext(ctx, getRecoveryByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRecoveryByIDPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "startTimeUsecs": 14, "endTimeUsecs": 12, "status": "Accepted", "progressTaskId": "ProgressTaskID", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}], "creationInfo": {"userName": "UserName"}, "canTearDown": false, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "TearDownMessage", "messages": ["Messages"], "isParentRecovery": true, "parentRecoveryId": "ParentRecoveryID", "retrieveArchiveTasks": [{"taskUid": "TaskUid", "uptierExpiryTimes": [17]}], "isMultiStageRestore": false, "physicalParams": {"objects": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 2, "name": "Name"}, "volumeMapping": [{"sourceVolumeGuid": "SourceVolumeGuid", "destinationVolumeGuid": "DestinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": false, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": false, "volumeNames": ["VolumeNames"], "mountedVolumeMapping": [{"originalVolume": "OriginalVolume", "mountedVolume": "MountedVolume", "fileSystemType": "FileSystemType"}], "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 2, "name": "Name", "parentSourceId": 14, "parentSourceName": "ParentSourceName"}, "restoreToOriginalPaths": true, "overwriteExisting": false, "alternateRestoreDirectory": "AlternateRestoreDirectory", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": false, "saveSuccessFiles": true, "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 15, "filesAndFolders": [{"absolutePath": "AbsolutePath", "destinationDir": "DestinationDir", "isDirectory": false, "status": "NotStarted", "messages": ["Messages"], "isViewFileRecovery": true}], "downloadFilePath": "DownloadFilePath"}, "systemRecoveryParams": {"fullNasPath": "FullNasPath"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "SnapshotID", "pointInTimeUsecs": 16, "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "snapshotCreationTimeUsecs": 25, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "ProgressTaskID", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 14, "endTimeUsecs": 12, "messages": ["Messages"], "bytesRestored": 13, "aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false, "sqlTargetParams": {"newSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "databaseName": "DatabaseName", "host": {"id": 2, "name": "Name"}, "instanceName": "InstanceName", "logFileDirectoryLocation": "LogFileDirectoryLocation"}, "originalSourceConfig": {"keepCdc": false, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": false}, "nativeLogRecoveryWithClause": "NativeLogRecoveryWithClause", "nativeRecoveryWithClause": "NativeRecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": false, "restoreTimeUsecs": 16, "secondaryDataFilesDirList": [{"directory": "Directory", "filenamePattern": "FilenamePattern"}], "withNoRecovery": true, "captureTailLogs": false, "dataFileDirectoryLocation": "DataFileDirectoryLocation", "logFileDirectoryLocation": "LogFileDirectoryLocation", "newDatabaseName": "NewDatabaseName"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 2, "disableVlan": false, "interfaceName": "InterfaceName"}}}`)
				}))
			})
			It(`Invoke GetRecoveryByID successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetRecoveryByID(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRecoveryByIdOptions model
				getRecoveryByIdOptionsModel := new(backuprecoveryv1.GetRecoveryByIdOptions)
				getRecoveryByIdOptionsModel.ID = core.StringPtr("testString")
				getRecoveryByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveryByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetRecoveryByID(getRecoveryByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRecoveryByID with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRecoveryByIdOptions model
				getRecoveryByIdOptionsModel := new(backuprecoveryv1.GetRecoveryByIdOptions)
				getRecoveryByIdOptionsModel.ID = core.StringPtr("testString")
				getRecoveryByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveryByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetRecoveryByID(getRecoveryByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRecoveryByIdOptions model with no property values
				getRecoveryByIdOptionsModelNew := new(backuprecoveryv1.GetRecoveryByIdOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetRecoveryByID(getRecoveryByIdOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRecoveryByID successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRecoveryByIdOptions model
				getRecoveryByIdOptionsModel := new(backuprecoveryv1.GetRecoveryByIdOptions)
				getRecoveryByIdOptionsModel.ID = core.StringPtr("testString")
				getRecoveryByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRecoveryByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetRecoveryByID(getRecoveryByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DownloadFilesFromRecovery(downloadFilesFromRecoveryOptions *DownloadFilesFromRecoveryOptions)`, func() {
		downloadFilesFromRecoveryPath := "/data-protect/recoveries/testString/download-files"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(downloadFilesFromRecoveryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for startOffset query parameter
					// TODO: Add check for length query parameter
					Expect(req.URL.Query()["fileType"]).To(Equal([]string{"fileType"}))
					Expect(req.URL.Query()["sourceName"]).To(Equal([]string{"sourceName"}))
					Expect(req.URL.Query()["startTime"]).To(Equal([]string{"startTime"}))
					// TODO: Add check for includeTenants query parameter
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DownloadFilesFromRecovery successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := backupRecoveryService.DownloadFilesFromRecovery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DownloadFilesFromRecoveryOptions model
				downloadFilesFromRecoveryOptionsModel := new(backuprecoveryv1.DownloadFilesFromRecoveryOptions)
				downloadFilesFromRecoveryOptionsModel.ID = core.StringPtr("testString")
				downloadFilesFromRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				downloadFilesFromRecoveryOptionsModel.StartOffset = core.Int64Ptr(int64(26))
				downloadFilesFromRecoveryOptionsModel.Length = core.Int64Ptr(int64(26))
				downloadFilesFromRecoveryOptionsModel.FileType = core.StringPtr("fileType")
				downloadFilesFromRecoveryOptionsModel.SourceName = core.StringPtr("sourceName")
				downloadFilesFromRecoveryOptionsModel.StartTime = core.StringPtr("startTime")
				downloadFilesFromRecoveryOptionsModel.IncludeTenants = core.BoolPtr(true)
				downloadFilesFromRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = backupRecoveryService.DownloadFilesFromRecovery(downloadFilesFromRecoveryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DownloadFilesFromRecovery with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the DownloadFilesFromRecoveryOptions model
				downloadFilesFromRecoveryOptionsModel := new(backuprecoveryv1.DownloadFilesFromRecoveryOptions)
				downloadFilesFromRecoveryOptionsModel.ID = core.StringPtr("testString")
				downloadFilesFromRecoveryOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				downloadFilesFromRecoveryOptionsModel.StartOffset = core.Int64Ptr(int64(26))
				downloadFilesFromRecoveryOptionsModel.Length = core.Int64Ptr(int64(26))
				downloadFilesFromRecoveryOptionsModel.FileType = core.StringPtr("fileType")
				downloadFilesFromRecoveryOptionsModel.SourceName = core.StringPtr("sourceName")
				downloadFilesFromRecoveryOptionsModel.StartTime = core.StringPtr("startTime")
				downloadFilesFromRecoveryOptionsModel.IncludeTenants = core.BoolPtr(true)
				downloadFilesFromRecoveryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := backupRecoveryService.DownloadFilesFromRecovery(downloadFilesFromRecoveryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DownloadFilesFromRecoveryOptions model with no property values
				downloadFilesFromRecoveryOptionsModelNew := new(backuprecoveryv1.DownloadFilesFromRecoveryOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = backupRecoveryService.DownloadFilesFromRecovery(downloadFilesFromRecoveryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptions *GetRestorePointsInTimeRangeOptions) - Operation response error`, func() {
		getRestorePointsInTimeRangePath := "/data-protect/snapshots/restore-points"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRestorePointsInTimeRangePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRestorePointsInTimeRange with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRestorePointsInTimeRangeOptions model
				getRestorePointsInTimeRangeOptionsModel := new(backuprecoveryv1.GetRestorePointsInTimeRangeOptions)
				getRestorePointsInTimeRangeOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRestorePointsInTimeRangeOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(45))
				getRestorePointsInTimeRangeOptionsModel.Environment = core.StringPtr("kVMware")
				getRestorePointsInTimeRangeOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getRestorePointsInTimeRangeOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(15))
				getRestorePointsInTimeRangeOptionsModel.SourceID = core.Int64Ptr(int64(26))
				getRestorePointsInTimeRangeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptions *GetRestorePointsInTimeRangeOptions)`, func() {
		getRestorePointsInTimeRangePath := "/data-protect/snapshots/restore-points"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRestorePointsInTimeRangePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"fullSnapshotInfo": [{"restoreInfo": {"archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "attemptNumber": 13, "cloudDeployTarget": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}, "cloudReplicationTarget": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "parentObjectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "protectionGroupId": "ProtectionGroupID", "runStartTimeUsecs": 17, "snapshotRelativeDirPath": "SnapshotRelativeDirPath", "viewName": "ViewName", "vmHadIndependentDisks": false}, "targetsConfiguration": [{"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}]}], "timeRangeInfo": {"errorMessage": "ErrorMessage", "timeRanges": [{"endTimeUsecs": 12, "protectionGroupId": "ProtectionGroupID", "startTimeUsecs": 14}], "userMessage": "UserMessage"}}`)
				}))
			})
			It(`Invoke GetRestorePointsInTimeRange successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetRestorePointsInTimeRangeOptions model
				getRestorePointsInTimeRangeOptionsModel := new(backuprecoveryv1.GetRestorePointsInTimeRangeOptions)
				getRestorePointsInTimeRangeOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRestorePointsInTimeRangeOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(45))
				getRestorePointsInTimeRangeOptionsModel.Environment = core.StringPtr("kVMware")
				getRestorePointsInTimeRangeOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getRestorePointsInTimeRangeOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(15))
				getRestorePointsInTimeRangeOptionsModel.SourceID = core.Int64Ptr(int64(26))
				getRestorePointsInTimeRangeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetRestorePointsInTimeRangeWithContext(ctx, getRestorePointsInTimeRangeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetRestorePointsInTimeRangeWithContext(ctx, getRestorePointsInTimeRangeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRestorePointsInTimeRangePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"fullSnapshotInfo": [{"restoreInfo": {"archivalTargetInfo": {"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "attemptNumber": 13, "cloudDeployTarget": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}, "cloudReplicationTarget": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}, "objectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "parentObjectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "protectionGroupId": "ProtectionGroupID", "runStartTimeUsecs": 17, "snapshotRelativeDirPath": "SnapshotRelativeDirPath", "viewName": "ViewName", "vmHadIndependentDisks": false}, "targetsConfiguration": [{"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "Name", "region": 6, "regionName": "RegionName", "sourceId": 8}, "azureTargetConfig": {"name": "Name", "resourceGroup": 13, "resourceGroupName": "ResourceGroupName", "sourceId": 8, "storageAccount": 14, "storageAccountName": "StorageAccountName", "storageContainer": 16, "storageContainerName": "StorageContainerName", "storageResourceGroup": 20, "storageResourceGroupName": "StorageResourceGroupName"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 9, "clusterName": "ClusterName"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "ConfigID"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "Key", "value": "Value"}], "region": 6, "subnetId": 8, "vpcId": 5}, "azureParams": {"availabilitySetId": 17, "networkResourceGroupId": 22, "resourceGroupId": 15, "storageAccountId": 16, "storageContainerId": 18, "storageResourceGroupId": 22, "tempVmResourceGroupId": 21, "tempVmStorageAccountId": 22, "tempVmStorageContainerId": 24, "tempVmSubnetId": 14, "tempVmVirtualNetworkId": 22}, "id": 2, "name": "Name"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 2}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "ConfigID", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 11, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 8, "targetName": "TargetName", "targetType": "Tape"}]}]}], "timeRangeInfo": {"errorMessage": "ErrorMessage", "timeRanges": [{"endTimeUsecs": 12, "protectionGroupId": "ProtectionGroupID", "startTimeUsecs": 14}], "userMessage": "UserMessage"}}`)
				}))
			})
			It(`Invoke GetRestorePointsInTimeRange successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetRestorePointsInTimeRange(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRestorePointsInTimeRangeOptions model
				getRestorePointsInTimeRangeOptionsModel := new(backuprecoveryv1.GetRestorePointsInTimeRangeOptions)
				getRestorePointsInTimeRangeOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRestorePointsInTimeRangeOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(45))
				getRestorePointsInTimeRangeOptionsModel.Environment = core.StringPtr("kVMware")
				getRestorePointsInTimeRangeOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getRestorePointsInTimeRangeOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(15))
				getRestorePointsInTimeRangeOptionsModel.SourceID = core.Int64Ptr(int64(26))
				getRestorePointsInTimeRangeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRestorePointsInTimeRange with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRestorePointsInTimeRangeOptions model
				getRestorePointsInTimeRangeOptionsModel := new(backuprecoveryv1.GetRestorePointsInTimeRangeOptions)
				getRestorePointsInTimeRangeOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRestorePointsInTimeRangeOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(45))
				getRestorePointsInTimeRangeOptionsModel.Environment = core.StringPtr("kVMware")
				getRestorePointsInTimeRangeOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getRestorePointsInTimeRangeOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(15))
				getRestorePointsInTimeRangeOptionsModel.SourceID = core.Int64Ptr(int64(26))
				getRestorePointsInTimeRangeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRestorePointsInTimeRangeOptions model with no property values
				getRestorePointsInTimeRangeOptionsModelNew := new(backuprecoveryv1.GetRestorePointsInTimeRangeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke GetRestorePointsInTimeRange successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetRestorePointsInTimeRangeOptions model
				getRestorePointsInTimeRangeOptionsModel := new(backuprecoveryv1.GetRestorePointsInTimeRangeOptions)
				getRestorePointsInTimeRangeOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getRestorePointsInTimeRangeOptionsModel.EndTimeUsecs = core.Int64Ptr(int64(45))
				getRestorePointsInTimeRangeOptionsModel.Environment = core.StringPtr("kVMware")
				getRestorePointsInTimeRangeOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				getRestorePointsInTimeRangeOptionsModel.StartTimeUsecs = core.Int64Ptr(int64(15))
				getRestorePointsInTimeRangeOptionsModel.SourceID = core.Int64Ptr(int64(26))
				getRestorePointsInTimeRangeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetRestorePointsInTimeRange(getRestorePointsInTimeRangeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DownloadIndexedFile(downloadIndexedFileOptions *DownloadIndexedFileOptions)`, func() {
		downloadIndexedFilePath := "/data-protect/snapshots/snapshotId1/download-file"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(downloadIndexedFilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.URL.Query()["filePath"]).To(Equal([]string{"~/home/downloadFile"}))
					// TODO: Add check for nvramFile query parameter
					// TODO: Add check for retryAttempt query parameter
					// TODO: Add check for startOffset query parameter
					// TODO: Add check for length query parameter
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DownloadIndexedFile successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := backupRecoveryService.DownloadIndexedFile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DownloadIndexedFileOptions model
				downloadIndexedFileOptionsModel := new(backuprecoveryv1.DownloadIndexedFileOptions)
				downloadIndexedFileOptionsModel.SnapshotsID = core.StringPtr("snapshotId1")
				downloadIndexedFileOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				downloadIndexedFileOptionsModel.FilePath = core.StringPtr("~/home/downloadFile")
				downloadIndexedFileOptionsModel.NvramFile = core.BoolPtr(true)
				downloadIndexedFileOptionsModel.RetryAttempt = core.Int64Ptr(int64(26))
				downloadIndexedFileOptionsModel.StartOffset = core.Int64Ptr(int64(26))
				downloadIndexedFileOptionsModel.Length = core.Int64Ptr(int64(26))
				downloadIndexedFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = backupRecoveryService.DownloadIndexedFile(downloadIndexedFileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DownloadIndexedFile with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the DownloadIndexedFileOptions model
				downloadIndexedFileOptionsModel := new(backuprecoveryv1.DownloadIndexedFileOptions)
				downloadIndexedFileOptionsModel.SnapshotsID = core.StringPtr("snapshotId1")
				downloadIndexedFileOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				downloadIndexedFileOptionsModel.FilePath = core.StringPtr("~/home/downloadFile")
				downloadIndexedFileOptionsModel.NvramFile = core.BoolPtr(true)
				downloadIndexedFileOptionsModel.RetryAttempt = core.Int64Ptr(int64(26))
				downloadIndexedFileOptionsModel.StartOffset = core.Int64Ptr(int64(26))
				downloadIndexedFileOptionsModel.Length = core.Int64Ptr(int64(26))
				downloadIndexedFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := backupRecoveryService.DownloadIndexedFile(downloadIndexedFileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DownloadIndexedFileOptions model with no property values
				downloadIndexedFileOptionsModelNew := new(backuprecoveryv1.DownloadIndexedFileOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = backupRecoveryService.DownloadIndexedFile(downloadIndexedFileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SearchIndexedObjects(searchIndexedObjectsOptions *SearchIndexedObjectsOptions) - Operation response error`, func() {
		searchIndexedObjectsPath := "/data-protect/search/indexed-objects"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchIndexedObjectsPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SearchIndexedObjects with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CassandraOnPremSearchParams model
				cassandraOnPremSearchParamsModel := new(backuprecoveryv1.CassandraOnPremSearchParams)
				cassandraOnPremSearchParamsModel.CassandraObjectTypes = []string{"CassandraKeyspaces"}
				cassandraOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				cassandraOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the CouchBaseOnPremSearchParams model
				couchBaseOnPremSearchParamsModel := new(backuprecoveryv1.CouchBaseOnPremSearchParams)
				couchBaseOnPremSearchParamsModel.CouchbaseObjectTypes = []string{"CouchbaseBuckets"}
				couchBaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				couchBaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the O365SearchEmailsRequestParams model
				o365SearchEmailsRequestParamsModel := new(backuprecoveryv1.O365SearchEmailsRequestParams)
				o365SearchEmailsRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchEmailsRequestParamsModel.MailboxIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParams model
				searchEmailRequestParamsModel := new(backuprecoveryv1.SearchEmailRequestParams)
				searchEmailRequestParamsModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsModel.Types = []string{"Email"}
				searchEmailRequestParamsModel.O365Params = o365SearchEmailsRequestParamsModel

				// Construct an instance of the SearchExchangeObjectsRequestParams model
				searchExchangeObjectsRequestParamsModel := new(backuprecoveryv1.SearchExchangeObjectsRequestParams)
				searchExchangeObjectsRequestParamsModel.SearchString = core.StringPtr("searchString")

				// Construct an instance of the SearchFileRequestParams model
				searchFileRequestParamsModel := new(backuprecoveryv1.SearchFileRequestParams)
				searchFileRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchFileRequestParamsModel.Types = []string{"File"}
				searchFileRequestParamsModel.SourceEnvironments = []string{"kVMware"}
				searchFileRequestParamsModel.SourceIds = []int64{int64(26)}
				searchFileRequestParamsModel.ObjectIds = []int64{int64(26)}

				// Construct an instance of the HbaseOnPremSearchParams model
				hbaseOnPremSearchParamsModel := new(backuprecoveryv1.HbaseOnPremSearchParams)
				hbaseOnPremSearchParamsModel.HbaseObjectTypes = []string{"HbaseNamespaces"}
				hbaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hbaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HDFSOnPremSearchParams model
				hdfsOnPremSearchParamsModel := new(backuprecoveryv1.HDFSOnPremSearchParams)
				hdfsOnPremSearchParamsModel.HdfsTypes = []string{"HDFSFolders"}
				hdfsOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hdfsOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HiveOnPremSearchParams model
				hiveOnPremSearchParamsModel := new(backuprecoveryv1.HiveOnPremSearchParams)
				hiveOnPremSearchParamsModel.HiveObjectTypes = []string{"HiveDatabases"}
				hiveOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hiveOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the MongoDbOnPremSearchParams model
				mongoDbOnPremSearchParamsModel := new(backuprecoveryv1.MongoDbOnPremSearchParams)
				mongoDbOnPremSearchParamsModel.MongoDBObjectTypes = []string{"MongoDatabases"}
				mongoDbOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				mongoDbOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParamsBase model
				searchEmailRequestParamsBaseModel := new(backuprecoveryv1.SearchEmailRequestParamsBase)
				searchEmailRequestParamsBaseModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsBaseModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsBaseModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsBaseModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsBaseModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsBaseModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsBaseModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsBaseModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsBaseModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsBaseModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsBaseModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsBaseModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsBaseModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsBaseModel.Types = []string{"Email"}

				// Construct an instance of the O365SearchRequestParams model
				o365SearchRequestParamsModel := new(backuprecoveryv1.O365SearchRequestParams)
				o365SearchRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchRequestParamsModel.GroupIds = []int64{int64(26)}
				o365SearchRequestParamsModel.SiteIds = []int64{int64(26)}
				o365SearchRequestParamsModel.TeamsIds = []int64{int64(26)}
				o365SearchRequestParamsModel.UserIds = []int64{int64(26)}

				// Construct an instance of the SearchDocumentLibraryRequestParams model
				searchDocumentLibraryRequestParamsModel := new(backuprecoveryv1.SearchDocumentLibraryRequestParams)
				searchDocumentLibraryRequestParamsModel.CategoryTypes = []string{"Document"}
				searchDocumentLibraryRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.IncludeFiles = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.IncludeFolders = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchDocumentLibraryRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchDocumentLibraryRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchDocumentLibraryRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchMsGroupsRequestParams model
				searchMsGroupsRequestParamsModel := new(backuprecoveryv1.SearchMsGroupsRequestParams)
				searchMsGroupsRequestParamsModel.MailboxParams = searchEmailRequestParamsBaseModel
				searchMsGroupsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsGroupsRequestParamsModel.SiteParams = searchDocumentLibraryRequestParamsModel

				// Construct an instance of the O365TeamsChannelsSearchRequestParams model
				o365TeamsChannelsSearchRequestParamsModel := new(backuprecoveryv1.O365TeamsChannelsSearchRequestParams)
				o365TeamsChannelsSearchRequestParamsModel.ChannelEmail = core.StringPtr("channel@domain.com")
				o365TeamsChannelsSearchRequestParamsModel.ChannelID = core.StringPtr("channelId")
				o365TeamsChannelsSearchRequestParamsModel.ChannelName = core.StringPtr("channelName")
				o365TeamsChannelsSearchRequestParamsModel.IncludePrivateChannels = core.BoolPtr(true)
				o365TeamsChannelsSearchRequestParamsModel.IncludePublicChannels = core.BoolPtr(true)

				// Construct an instance of the SearchMsTeamsRequestParams model
				searchMsTeamsRequestParamsModel := new(backuprecoveryv1.SearchMsTeamsRequestParams)
				searchMsTeamsRequestParamsModel.CategoryTypes = []string{"Document"}
				searchMsTeamsRequestParamsModel.ChannelNames = []string{"channelName1"}
				searchMsTeamsRequestParamsModel.ChannelParams = o365TeamsChannelsSearchRequestParamsModel
				searchMsTeamsRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsTeamsRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchMsTeamsRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchMsTeamsRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.Types = []string{"Channel"}

				// Construct an instance of the SearchPublicFolderRequestParams model
				searchPublicFolderRequestParamsModel := new(backuprecoveryv1.SearchPublicFolderRequestParams)
				searchPublicFolderRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchPublicFolderRequestParamsModel.Types = []string{"Calendar"}
				searchPublicFolderRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchPublicFolderRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchPublicFolderRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchPublicFolderRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchPublicFolderRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchSfdcRecordsRequestParams model
				searchSfdcRecordsRequestParamsModel := new(backuprecoveryv1.SearchSfdcRecordsRequestParams)
				searchSfdcRecordsRequestParamsModel.MutationTypes = []string{"All"}
				searchSfdcRecordsRequestParamsModel.ObjectName = core.StringPtr("objectName")
				searchSfdcRecordsRequestParamsModel.QueryString = core.StringPtr("queryString")
				searchSfdcRecordsRequestParamsModel.SnapshotID = core.StringPtr("snapshotId")

				// Construct an instance of the UdaOnPremSearchParams model
				udaOnPremSearchParamsModel := new(backuprecoveryv1.UdaOnPremSearchParams)
				udaOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				udaOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchIndexedObjectsOptions model
				searchIndexedObjectsOptionsModel := new(backuprecoveryv1.SearchIndexedObjectsOptions)
				searchIndexedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.ObjectType = core.StringPtr("Emails")
				searchIndexedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchIndexedObjectsOptionsModel.StorageDomainIds = []int64{int64(26)}
				searchIndexedObjectsOptionsModel.TenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.IncludeTenants = core.BoolPtr(false)
				searchIndexedObjectsOptionsModel.Tags = []string{"123:456:ABC-123", "123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.SnapshotTags = []string{"123:456:DEF-123", "123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchIndexedObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchIndexedObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchIndexedObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchIndexedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchIndexedObjectsOptionsModel.CassandraParams = cassandraOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.CouchbaseParams = couchBaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.EmailParams = searchEmailRequestParamsModel
				searchIndexedObjectsOptionsModel.ExchangeParams = searchExchangeObjectsRequestParamsModel
				searchIndexedObjectsOptionsModel.FileParams = searchFileRequestParamsModel
				searchIndexedObjectsOptionsModel.HbaseParams = hbaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HdfsParams = hdfsOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HiveParams = hiveOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MongodbParams = mongoDbOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MsGroupsParams = searchMsGroupsRequestParamsModel
				searchIndexedObjectsOptionsModel.MsTeamsParams = searchMsTeamsRequestParamsModel
				searchIndexedObjectsOptionsModel.OneDriveParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.PublicFolderParams = searchPublicFolderRequestParamsModel
				searchIndexedObjectsOptionsModel.SfdcParams = searchSfdcRecordsRequestParamsModel
				searchIndexedObjectsOptionsModel.SharepointParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.UdaParams = udaOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.SearchIndexedObjects(searchIndexedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.SearchIndexedObjects(searchIndexedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SearchIndexedObjects(searchIndexedObjectsOptions *SearchIndexedObjectsOptions)`, func() {
		searchIndexedObjectsPath := "/data-protect/search/indexed-objects"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchIndexedObjectsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objectType": "Emails", "count": 5, "paginationCookie": "PaginationCookie", "cassandraObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "keyspaceType": "kRegular", "type": "CassandraKeyspaces"}], "couchbaseObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "type": "CouchbaseBuckets"}], "emails": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "bccRecipientAddresses": ["BccRecipientAddresses"], "ccRecipientAddresses": ["CcRecipientAddresses"], "createdTimeSecs": 15, "directoryPath": "DirectoryPath", "emailAddresses": ["EmailAddresses"], "emailSubject": "EmailSubject", "firstName": "FirstName", "folderName": "FolderName", "hasAttachment": false, "id": "ID", "lastModificationName": "LastModificationName", "lastModificationTimeSecs": 24, "lastName": "LastName", "optionalAttendeesAddresses": ["OptionalAttendeesAddresses"], "organizerAddress": "OrganizerAddress", "parentFolderId": 14, "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "receivedTimeSecs": 16, "recipientAddresses": ["RecipientAddresses"], "requiredAttendeesAddresses": ["RequiredAttendeesAddresses"], "senderAddress": "SenderAddress", "sentTimeSecs": 12, "storageDomainId": 15, "taskCompletionDateTimeSecs": 26, "taskDueDateTimeSecs": 19, "taskStatus": "NotStarted", "tenantId": "TenantID", "type": "Email", "userObjectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}}], "exchangeObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "databaseName": "DatabaseName", "email": "Email", "objectName": "ObjectName"}], "files": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "type": "File", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}}], "hbaseObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "type": "HbaseNamespaces"}], "hdfsObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "type": "HDFSFolders"}], "hiveObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "type": "HiveDatabases"}], "mongoObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "cdpInfo": {"allowReEnableCdp": true, "cdpEnabled": true, "lastRunInfo": {"localBackupInfo": {"endTimeInUsecs": 14, "startTimeInUsecs": 16}}, "protectionGroupId": "ProtectionGroupID"}, "id": "ID", "type": "MongoDatabases"}], "msGroupItems": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "mailboxItem": {"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "bccRecipientAddresses": ["BccRecipientAddresses"], "ccRecipientAddresses": ["CcRecipientAddresses"], "createdTimeSecs": 15, "directoryPath": "DirectoryPath", "emailAddresses": ["EmailAddresses"], "emailSubject": "EmailSubject", "firstName": "FirstName", "folderName": "FolderName", "hasAttachment": false, "id": "ID", "lastModificationName": "LastModificationName", "lastModificationTimeSecs": 24, "lastName": "LastName", "optionalAttendeesAddresses": ["OptionalAttendeesAddresses"], "organizerAddress": "OrganizerAddress", "parentFolderId": 14, "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "receivedTimeSecs": 16, "recipientAddresses": ["RecipientAddresses"], "requiredAttendeesAddresses": ["RequiredAttendeesAddresses"], "senderAddress": "SenderAddress", "sentTimeSecs": 12, "storageDomainId": 15, "taskCompletionDateTimeSecs": 26, "taskDueDateTimeSecs": 19, "taskStatus": "NotStarted", "tenantId": "TenantID", "type": "Email", "userObjectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}}, "siteItem": {"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "creationTimeSecs": 16, "fileType": "File", "itemId": "ItemID", "itemSize": 8, "ownerEmail": "OwnerEmail", "ownerName": "OwnerName"}, "type": "Email"}], "oneDriveItems": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "creationTimeSecs": 16, "fileType": "File", "itemId": "ItemID", "itemSize": 8, "ownerEmail": "OwnerEmail", "ownerName": "OwnerName"}], "publicFolderItems": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "type": "Type", "id": "ID", "subject": "Subject", "hasAttachments": true, "itemClass": "ItemClass", "receivedTimeSecs": 16, "itemSize": 8, "parentFolderId": "ParentFolderID"}], "sfdcRecords": {"columnNames": ["ColumnNames"], "records": ["Records"]}, "sharepointItems": [{"documentLibraryItem": {"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "creationTimeSecs": 16, "fileType": "File", "itemId": "ItemID", "itemSize": 8, "ownerEmail": "OwnerEmail", "ownerName": "OwnerName"}}], "teamsItems": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "channelItem": {"channelEmail": "ChannelEmail", "channelId": "ChannelID", "channelName": "ChannelName", "channelType": "Private", "creationTimeSecs": 16, "ownerNames": ["OwnerNames"]}, "fileItem": {"creationTimeSecs": 16, "driveName": "DriveName", "fileType": "File", "itemSize": 8}, "type": "Channel"}], "udaObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "fullName": "FullName", "id": "ID", "objectType": "ObjectType"}]}`)
				}))
			})
			It(`Invoke SearchIndexedObjects successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the CassandraOnPremSearchParams model
				cassandraOnPremSearchParamsModel := new(backuprecoveryv1.CassandraOnPremSearchParams)
				cassandraOnPremSearchParamsModel.CassandraObjectTypes = []string{"CassandraKeyspaces"}
				cassandraOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				cassandraOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the CouchBaseOnPremSearchParams model
				couchBaseOnPremSearchParamsModel := new(backuprecoveryv1.CouchBaseOnPremSearchParams)
				couchBaseOnPremSearchParamsModel.CouchbaseObjectTypes = []string{"CouchbaseBuckets"}
				couchBaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				couchBaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the O365SearchEmailsRequestParams model
				o365SearchEmailsRequestParamsModel := new(backuprecoveryv1.O365SearchEmailsRequestParams)
				o365SearchEmailsRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchEmailsRequestParamsModel.MailboxIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParams model
				searchEmailRequestParamsModel := new(backuprecoveryv1.SearchEmailRequestParams)
				searchEmailRequestParamsModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsModel.Types = []string{"Email"}
				searchEmailRequestParamsModel.O365Params = o365SearchEmailsRequestParamsModel

				// Construct an instance of the SearchExchangeObjectsRequestParams model
				searchExchangeObjectsRequestParamsModel := new(backuprecoveryv1.SearchExchangeObjectsRequestParams)
				searchExchangeObjectsRequestParamsModel.SearchString = core.StringPtr("searchString")

				// Construct an instance of the SearchFileRequestParams model
				searchFileRequestParamsModel := new(backuprecoveryv1.SearchFileRequestParams)
				searchFileRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchFileRequestParamsModel.Types = []string{"File"}
				searchFileRequestParamsModel.SourceEnvironments = []string{"kVMware"}
				searchFileRequestParamsModel.SourceIds = []int64{int64(26)}
				searchFileRequestParamsModel.ObjectIds = []int64{int64(26)}

				// Construct an instance of the HbaseOnPremSearchParams model
				hbaseOnPremSearchParamsModel := new(backuprecoveryv1.HbaseOnPremSearchParams)
				hbaseOnPremSearchParamsModel.HbaseObjectTypes = []string{"HbaseNamespaces"}
				hbaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hbaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HDFSOnPremSearchParams model
				hdfsOnPremSearchParamsModel := new(backuprecoveryv1.HDFSOnPremSearchParams)
				hdfsOnPremSearchParamsModel.HdfsTypes = []string{"HDFSFolders"}
				hdfsOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hdfsOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HiveOnPremSearchParams model
				hiveOnPremSearchParamsModel := new(backuprecoveryv1.HiveOnPremSearchParams)
				hiveOnPremSearchParamsModel.HiveObjectTypes = []string{"HiveDatabases"}
				hiveOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hiveOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the MongoDbOnPremSearchParams model
				mongoDbOnPremSearchParamsModel := new(backuprecoveryv1.MongoDbOnPremSearchParams)
				mongoDbOnPremSearchParamsModel.MongoDBObjectTypes = []string{"MongoDatabases"}
				mongoDbOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				mongoDbOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParamsBase model
				searchEmailRequestParamsBaseModel := new(backuprecoveryv1.SearchEmailRequestParamsBase)
				searchEmailRequestParamsBaseModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsBaseModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsBaseModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsBaseModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsBaseModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsBaseModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsBaseModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsBaseModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsBaseModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsBaseModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsBaseModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsBaseModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsBaseModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsBaseModel.Types = []string{"Email"}

				// Construct an instance of the O365SearchRequestParams model
				o365SearchRequestParamsModel := new(backuprecoveryv1.O365SearchRequestParams)
				o365SearchRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchRequestParamsModel.GroupIds = []int64{int64(26)}
				o365SearchRequestParamsModel.SiteIds = []int64{int64(26)}
				o365SearchRequestParamsModel.TeamsIds = []int64{int64(26)}
				o365SearchRequestParamsModel.UserIds = []int64{int64(26)}

				// Construct an instance of the SearchDocumentLibraryRequestParams model
				searchDocumentLibraryRequestParamsModel := new(backuprecoveryv1.SearchDocumentLibraryRequestParams)
				searchDocumentLibraryRequestParamsModel.CategoryTypes = []string{"Document"}
				searchDocumentLibraryRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.IncludeFiles = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.IncludeFolders = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchDocumentLibraryRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchDocumentLibraryRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchDocumentLibraryRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchMsGroupsRequestParams model
				searchMsGroupsRequestParamsModel := new(backuprecoveryv1.SearchMsGroupsRequestParams)
				searchMsGroupsRequestParamsModel.MailboxParams = searchEmailRequestParamsBaseModel
				searchMsGroupsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsGroupsRequestParamsModel.SiteParams = searchDocumentLibraryRequestParamsModel

				// Construct an instance of the O365TeamsChannelsSearchRequestParams model
				o365TeamsChannelsSearchRequestParamsModel := new(backuprecoveryv1.O365TeamsChannelsSearchRequestParams)
				o365TeamsChannelsSearchRequestParamsModel.ChannelEmail = core.StringPtr("channel@domain.com")
				o365TeamsChannelsSearchRequestParamsModel.ChannelID = core.StringPtr("channelId")
				o365TeamsChannelsSearchRequestParamsModel.ChannelName = core.StringPtr("channelName")
				o365TeamsChannelsSearchRequestParamsModel.IncludePrivateChannels = core.BoolPtr(true)
				o365TeamsChannelsSearchRequestParamsModel.IncludePublicChannels = core.BoolPtr(true)

				// Construct an instance of the SearchMsTeamsRequestParams model
				searchMsTeamsRequestParamsModel := new(backuprecoveryv1.SearchMsTeamsRequestParams)
				searchMsTeamsRequestParamsModel.CategoryTypes = []string{"Document"}
				searchMsTeamsRequestParamsModel.ChannelNames = []string{"channelName1"}
				searchMsTeamsRequestParamsModel.ChannelParams = o365TeamsChannelsSearchRequestParamsModel
				searchMsTeamsRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsTeamsRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchMsTeamsRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchMsTeamsRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.Types = []string{"Channel"}

				// Construct an instance of the SearchPublicFolderRequestParams model
				searchPublicFolderRequestParamsModel := new(backuprecoveryv1.SearchPublicFolderRequestParams)
				searchPublicFolderRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchPublicFolderRequestParamsModel.Types = []string{"Calendar"}
				searchPublicFolderRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchPublicFolderRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchPublicFolderRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchPublicFolderRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchPublicFolderRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchSfdcRecordsRequestParams model
				searchSfdcRecordsRequestParamsModel := new(backuprecoveryv1.SearchSfdcRecordsRequestParams)
				searchSfdcRecordsRequestParamsModel.MutationTypes = []string{"All"}
				searchSfdcRecordsRequestParamsModel.ObjectName = core.StringPtr("objectName")
				searchSfdcRecordsRequestParamsModel.QueryString = core.StringPtr("queryString")
				searchSfdcRecordsRequestParamsModel.SnapshotID = core.StringPtr("snapshotId")

				// Construct an instance of the UdaOnPremSearchParams model
				udaOnPremSearchParamsModel := new(backuprecoveryv1.UdaOnPremSearchParams)
				udaOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				udaOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchIndexedObjectsOptions model
				searchIndexedObjectsOptionsModel := new(backuprecoveryv1.SearchIndexedObjectsOptions)
				searchIndexedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.ObjectType = core.StringPtr("Emails")
				searchIndexedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchIndexedObjectsOptionsModel.StorageDomainIds = []int64{int64(26)}
				searchIndexedObjectsOptionsModel.TenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.IncludeTenants = core.BoolPtr(false)
				searchIndexedObjectsOptionsModel.Tags = []string{"123:456:ABC-123", "123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.SnapshotTags = []string{"123:456:DEF-123", "123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchIndexedObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchIndexedObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchIndexedObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchIndexedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchIndexedObjectsOptionsModel.CassandraParams = cassandraOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.CouchbaseParams = couchBaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.EmailParams = searchEmailRequestParamsModel
				searchIndexedObjectsOptionsModel.ExchangeParams = searchExchangeObjectsRequestParamsModel
				searchIndexedObjectsOptionsModel.FileParams = searchFileRequestParamsModel
				searchIndexedObjectsOptionsModel.HbaseParams = hbaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HdfsParams = hdfsOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HiveParams = hiveOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MongodbParams = mongoDbOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MsGroupsParams = searchMsGroupsRequestParamsModel
				searchIndexedObjectsOptionsModel.MsTeamsParams = searchMsTeamsRequestParamsModel
				searchIndexedObjectsOptionsModel.OneDriveParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.PublicFolderParams = searchPublicFolderRequestParamsModel
				searchIndexedObjectsOptionsModel.SfdcParams = searchSfdcRecordsRequestParamsModel
				searchIndexedObjectsOptionsModel.SharepointParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.UdaParams = udaOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.SearchIndexedObjectsWithContext(ctx, searchIndexedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.SearchIndexedObjects(searchIndexedObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.SearchIndexedObjectsWithContext(ctx, searchIndexedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchIndexedObjectsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objectType": "Emails", "count": 5, "paginationCookie": "PaginationCookie", "cassandraObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "keyspaceType": "kRegular", "type": "CassandraKeyspaces"}], "couchbaseObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "type": "CouchbaseBuckets"}], "emails": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "bccRecipientAddresses": ["BccRecipientAddresses"], "ccRecipientAddresses": ["CcRecipientAddresses"], "createdTimeSecs": 15, "directoryPath": "DirectoryPath", "emailAddresses": ["EmailAddresses"], "emailSubject": "EmailSubject", "firstName": "FirstName", "folderName": "FolderName", "hasAttachment": false, "id": "ID", "lastModificationName": "LastModificationName", "lastModificationTimeSecs": 24, "lastName": "LastName", "optionalAttendeesAddresses": ["OptionalAttendeesAddresses"], "organizerAddress": "OrganizerAddress", "parentFolderId": 14, "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "receivedTimeSecs": 16, "recipientAddresses": ["RecipientAddresses"], "requiredAttendeesAddresses": ["RequiredAttendeesAddresses"], "senderAddress": "SenderAddress", "sentTimeSecs": 12, "storageDomainId": 15, "taskCompletionDateTimeSecs": 26, "taskDueDateTimeSecs": 19, "taskStatus": "NotStarted", "tenantId": "TenantID", "type": "Email", "userObjectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}}], "exchangeObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "databaseName": "DatabaseName", "email": "Email", "objectName": "ObjectName"}], "files": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "type": "File", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}}], "hbaseObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "type": "HbaseNamespaces"}], "hdfsObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "type": "HDFSFolders"}], "hiveObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "id": "ID", "type": "HiveDatabases"}], "mongoObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "cdpInfo": {"allowReEnableCdp": true, "cdpEnabled": true, "lastRunInfo": {"localBackupInfo": {"endTimeInUsecs": 14, "startTimeInUsecs": 16}}, "protectionGroupId": "ProtectionGroupID"}, "id": "ID", "type": "MongoDatabases"}], "msGroupItems": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "mailboxItem": {"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "bccRecipientAddresses": ["BccRecipientAddresses"], "ccRecipientAddresses": ["CcRecipientAddresses"], "createdTimeSecs": 15, "directoryPath": "DirectoryPath", "emailAddresses": ["EmailAddresses"], "emailSubject": "EmailSubject", "firstName": "FirstName", "folderName": "FolderName", "hasAttachment": false, "id": "ID", "lastModificationName": "LastModificationName", "lastModificationTimeSecs": 24, "lastName": "LastName", "optionalAttendeesAddresses": ["OptionalAttendeesAddresses"], "organizerAddress": "OrganizerAddress", "parentFolderId": 14, "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "receivedTimeSecs": 16, "recipientAddresses": ["RecipientAddresses"], "requiredAttendeesAddresses": ["RequiredAttendeesAddresses"], "senderAddress": "SenderAddress", "sentTimeSecs": 12, "storageDomainId": 15, "taskCompletionDateTimeSecs": 26, "taskDueDateTimeSecs": 19, "taskStatus": "NotStarted", "tenantId": "TenantID", "type": "Email", "userObjectInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}}, "siteItem": {"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "creationTimeSecs": 16, "fileType": "File", "itemId": "ItemID", "itemSize": 8, "ownerEmail": "OwnerEmail", "ownerName": "OwnerName"}, "type": "Email"}], "oneDriveItems": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "creationTimeSecs": 16, "fileType": "File", "itemId": "ItemID", "itemSize": 8, "ownerEmail": "OwnerEmail", "ownerName": "OwnerName"}], "publicFolderItems": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "type": "Type", "id": "ID", "subject": "Subject", "hasAttachments": true, "itemClass": "ItemClass", "receivedTimeSecs": 16, "itemSize": 8, "parentFolderId": "ParentFolderID"}], "sfdcRecords": {"columnNames": ["ColumnNames"], "records": ["Records"]}, "sharepointItems": [{"documentLibraryItem": {"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "creationTimeSecs": 16, "fileType": "File", "itemId": "ItemID", "itemSize": 8, "ownerEmail": "OwnerEmail", "ownerName": "OwnerName"}}], "teamsItems": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "channelItem": {"channelEmail": "ChannelEmail", "channelId": "ChannelID", "channelName": "ChannelName", "channelType": "Private", "creationTimeSecs": 16, "ownerNames": ["OwnerNames"]}, "fileItem": {"creationTimeSecs": 16, "driveName": "DriveName", "fileType": "File", "itemSize": 8}, "type": "Channel"}], "udaObjects": [{"tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "name": "Name", "path": "Path", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "policyId": "PolicyID", "policyName": "PolicyName", "storageDomainId": 15, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "fullName": "FullName", "id": "ID", "objectType": "ObjectType"}]}`)
				}))
			})
			It(`Invoke SearchIndexedObjects successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.SearchIndexedObjects(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CassandraOnPremSearchParams model
				cassandraOnPremSearchParamsModel := new(backuprecoveryv1.CassandraOnPremSearchParams)
				cassandraOnPremSearchParamsModel.CassandraObjectTypes = []string{"CassandraKeyspaces"}
				cassandraOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				cassandraOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the CouchBaseOnPremSearchParams model
				couchBaseOnPremSearchParamsModel := new(backuprecoveryv1.CouchBaseOnPremSearchParams)
				couchBaseOnPremSearchParamsModel.CouchbaseObjectTypes = []string{"CouchbaseBuckets"}
				couchBaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				couchBaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the O365SearchEmailsRequestParams model
				o365SearchEmailsRequestParamsModel := new(backuprecoveryv1.O365SearchEmailsRequestParams)
				o365SearchEmailsRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchEmailsRequestParamsModel.MailboxIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParams model
				searchEmailRequestParamsModel := new(backuprecoveryv1.SearchEmailRequestParams)
				searchEmailRequestParamsModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsModel.Types = []string{"Email"}
				searchEmailRequestParamsModel.O365Params = o365SearchEmailsRequestParamsModel

				// Construct an instance of the SearchExchangeObjectsRequestParams model
				searchExchangeObjectsRequestParamsModel := new(backuprecoveryv1.SearchExchangeObjectsRequestParams)
				searchExchangeObjectsRequestParamsModel.SearchString = core.StringPtr("searchString")

				// Construct an instance of the SearchFileRequestParams model
				searchFileRequestParamsModel := new(backuprecoveryv1.SearchFileRequestParams)
				searchFileRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchFileRequestParamsModel.Types = []string{"File"}
				searchFileRequestParamsModel.SourceEnvironments = []string{"kVMware"}
				searchFileRequestParamsModel.SourceIds = []int64{int64(26)}
				searchFileRequestParamsModel.ObjectIds = []int64{int64(26)}

				// Construct an instance of the HbaseOnPremSearchParams model
				hbaseOnPremSearchParamsModel := new(backuprecoveryv1.HbaseOnPremSearchParams)
				hbaseOnPremSearchParamsModel.HbaseObjectTypes = []string{"HbaseNamespaces"}
				hbaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hbaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HDFSOnPremSearchParams model
				hdfsOnPremSearchParamsModel := new(backuprecoveryv1.HDFSOnPremSearchParams)
				hdfsOnPremSearchParamsModel.HdfsTypes = []string{"HDFSFolders"}
				hdfsOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hdfsOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HiveOnPremSearchParams model
				hiveOnPremSearchParamsModel := new(backuprecoveryv1.HiveOnPremSearchParams)
				hiveOnPremSearchParamsModel.HiveObjectTypes = []string{"HiveDatabases"}
				hiveOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hiveOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the MongoDbOnPremSearchParams model
				mongoDbOnPremSearchParamsModel := new(backuprecoveryv1.MongoDbOnPremSearchParams)
				mongoDbOnPremSearchParamsModel.MongoDBObjectTypes = []string{"MongoDatabases"}
				mongoDbOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				mongoDbOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParamsBase model
				searchEmailRequestParamsBaseModel := new(backuprecoveryv1.SearchEmailRequestParamsBase)
				searchEmailRequestParamsBaseModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsBaseModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsBaseModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsBaseModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsBaseModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsBaseModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsBaseModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsBaseModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsBaseModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsBaseModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsBaseModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsBaseModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsBaseModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsBaseModel.Types = []string{"Email"}

				// Construct an instance of the O365SearchRequestParams model
				o365SearchRequestParamsModel := new(backuprecoveryv1.O365SearchRequestParams)
				o365SearchRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchRequestParamsModel.GroupIds = []int64{int64(26)}
				o365SearchRequestParamsModel.SiteIds = []int64{int64(26)}
				o365SearchRequestParamsModel.TeamsIds = []int64{int64(26)}
				o365SearchRequestParamsModel.UserIds = []int64{int64(26)}

				// Construct an instance of the SearchDocumentLibraryRequestParams model
				searchDocumentLibraryRequestParamsModel := new(backuprecoveryv1.SearchDocumentLibraryRequestParams)
				searchDocumentLibraryRequestParamsModel.CategoryTypes = []string{"Document"}
				searchDocumentLibraryRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.IncludeFiles = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.IncludeFolders = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchDocumentLibraryRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchDocumentLibraryRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchDocumentLibraryRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchMsGroupsRequestParams model
				searchMsGroupsRequestParamsModel := new(backuprecoveryv1.SearchMsGroupsRequestParams)
				searchMsGroupsRequestParamsModel.MailboxParams = searchEmailRequestParamsBaseModel
				searchMsGroupsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsGroupsRequestParamsModel.SiteParams = searchDocumentLibraryRequestParamsModel

				// Construct an instance of the O365TeamsChannelsSearchRequestParams model
				o365TeamsChannelsSearchRequestParamsModel := new(backuprecoveryv1.O365TeamsChannelsSearchRequestParams)
				o365TeamsChannelsSearchRequestParamsModel.ChannelEmail = core.StringPtr("channel@domain.com")
				o365TeamsChannelsSearchRequestParamsModel.ChannelID = core.StringPtr("channelId")
				o365TeamsChannelsSearchRequestParamsModel.ChannelName = core.StringPtr("channelName")
				o365TeamsChannelsSearchRequestParamsModel.IncludePrivateChannels = core.BoolPtr(true)
				o365TeamsChannelsSearchRequestParamsModel.IncludePublicChannels = core.BoolPtr(true)

				// Construct an instance of the SearchMsTeamsRequestParams model
				searchMsTeamsRequestParamsModel := new(backuprecoveryv1.SearchMsTeamsRequestParams)
				searchMsTeamsRequestParamsModel.CategoryTypes = []string{"Document"}
				searchMsTeamsRequestParamsModel.ChannelNames = []string{"channelName1"}
				searchMsTeamsRequestParamsModel.ChannelParams = o365TeamsChannelsSearchRequestParamsModel
				searchMsTeamsRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsTeamsRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchMsTeamsRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchMsTeamsRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.Types = []string{"Channel"}

				// Construct an instance of the SearchPublicFolderRequestParams model
				searchPublicFolderRequestParamsModel := new(backuprecoveryv1.SearchPublicFolderRequestParams)
				searchPublicFolderRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchPublicFolderRequestParamsModel.Types = []string{"Calendar"}
				searchPublicFolderRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchPublicFolderRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchPublicFolderRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchPublicFolderRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchPublicFolderRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchSfdcRecordsRequestParams model
				searchSfdcRecordsRequestParamsModel := new(backuprecoveryv1.SearchSfdcRecordsRequestParams)
				searchSfdcRecordsRequestParamsModel.MutationTypes = []string{"All"}
				searchSfdcRecordsRequestParamsModel.ObjectName = core.StringPtr("objectName")
				searchSfdcRecordsRequestParamsModel.QueryString = core.StringPtr("queryString")
				searchSfdcRecordsRequestParamsModel.SnapshotID = core.StringPtr("snapshotId")

				// Construct an instance of the UdaOnPremSearchParams model
				udaOnPremSearchParamsModel := new(backuprecoveryv1.UdaOnPremSearchParams)
				udaOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				udaOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchIndexedObjectsOptions model
				searchIndexedObjectsOptionsModel := new(backuprecoveryv1.SearchIndexedObjectsOptions)
				searchIndexedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.ObjectType = core.StringPtr("Emails")
				searchIndexedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchIndexedObjectsOptionsModel.StorageDomainIds = []int64{int64(26)}
				searchIndexedObjectsOptionsModel.TenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.IncludeTenants = core.BoolPtr(false)
				searchIndexedObjectsOptionsModel.Tags = []string{"123:456:ABC-123", "123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.SnapshotTags = []string{"123:456:DEF-123", "123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchIndexedObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchIndexedObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchIndexedObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchIndexedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchIndexedObjectsOptionsModel.CassandraParams = cassandraOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.CouchbaseParams = couchBaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.EmailParams = searchEmailRequestParamsModel
				searchIndexedObjectsOptionsModel.ExchangeParams = searchExchangeObjectsRequestParamsModel
				searchIndexedObjectsOptionsModel.FileParams = searchFileRequestParamsModel
				searchIndexedObjectsOptionsModel.HbaseParams = hbaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HdfsParams = hdfsOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HiveParams = hiveOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MongodbParams = mongoDbOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MsGroupsParams = searchMsGroupsRequestParamsModel
				searchIndexedObjectsOptionsModel.MsTeamsParams = searchMsTeamsRequestParamsModel
				searchIndexedObjectsOptionsModel.OneDriveParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.PublicFolderParams = searchPublicFolderRequestParamsModel
				searchIndexedObjectsOptionsModel.SfdcParams = searchSfdcRecordsRequestParamsModel
				searchIndexedObjectsOptionsModel.SharepointParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.UdaParams = udaOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.SearchIndexedObjects(searchIndexedObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SearchIndexedObjects with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CassandraOnPremSearchParams model
				cassandraOnPremSearchParamsModel := new(backuprecoveryv1.CassandraOnPremSearchParams)
				cassandraOnPremSearchParamsModel.CassandraObjectTypes = []string{"CassandraKeyspaces"}
				cassandraOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				cassandraOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the CouchBaseOnPremSearchParams model
				couchBaseOnPremSearchParamsModel := new(backuprecoveryv1.CouchBaseOnPremSearchParams)
				couchBaseOnPremSearchParamsModel.CouchbaseObjectTypes = []string{"CouchbaseBuckets"}
				couchBaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				couchBaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the O365SearchEmailsRequestParams model
				o365SearchEmailsRequestParamsModel := new(backuprecoveryv1.O365SearchEmailsRequestParams)
				o365SearchEmailsRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchEmailsRequestParamsModel.MailboxIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParams model
				searchEmailRequestParamsModel := new(backuprecoveryv1.SearchEmailRequestParams)
				searchEmailRequestParamsModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsModel.Types = []string{"Email"}
				searchEmailRequestParamsModel.O365Params = o365SearchEmailsRequestParamsModel

				// Construct an instance of the SearchExchangeObjectsRequestParams model
				searchExchangeObjectsRequestParamsModel := new(backuprecoveryv1.SearchExchangeObjectsRequestParams)
				searchExchangeObjectsRequestParamsModel.SearchString = core.StringPtr("searchString")

				// Construct an instance of the SearchFileRequestParams model
				searchFileRequestParamsModel := new(backuprecoveryv1.SearchFileRequestParams)
				searchFileRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchFileRequestParamsModel.Types = []string{"File"}
				searchFileRequestParamsModel.SourceEnvironments = []string{"kVMware"}
				searchFileRequestParamsModel.SourceIds = []int64{int64(26)}
				searchFileRequestParamsModel.ObjectIds = []int64{int64(26)}

				// Construct an instance of the HbaseOnPremSearchParams model
				hbaseOnPremSearchParamsModel := new(backuprecoveryv1.HbaseOnPremSearchParams)
				hbaseOnPremSearchParamsModel.HbaseObjectTypes = []string{"HbaseNamespaces"}
				hbaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hbaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HDFSOnPremSearchParams model
				hdfsOnPremSearchParamsModel := new(backuprecoveryv1.HDFSOnPremSearchParams)
				hdfsOnPremSearchParamsModel.HdfsTypes = []string{"HDFSFolders"}
				hdfsOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hdfsOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HiveOnPremSearchParams model
				hiveOnPremSearchParamsModel := new(backuprecoveryv1.HiveOnPremSearchParams)
				hiveOnPremSearchParamsModel.HiveObjectTypes = []string{"HiveDatabases"}
				hiveOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hiveOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the MongoDbOnPremSearchParams model
				mongoDbOnPremSearchParamsModel := new(backuprecoveryv1.MongoDbOnPremSearchParams)
				mongoDbOnPremSearchParamsModel.MongoDBObjectTypes = []string{"MongoDatabases"}
				mongoDbOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				mongoDbOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParamsBase model
				searchEmailRequestParamsBaseModel := new(backuprecoveryv1.SearchEmailRequestParamsBase)
				searchEmailRequestParamsBaseModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsBaseModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsBaseModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsBaseModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsBaseModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsBaseModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsBaseModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsBaseModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsBaseModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsBaseModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsBaseModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsBaseModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsBaseModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsBaseModel.Types = []string{"Email"}

				// Construct an instance of the O365SearchRequestParams model
				o365SearchRequestParamsModel := new(backuprecoveryv1.O365SearchRequestParams)
				o365SearchRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchRequestParamsModel.GroupIds = []int64{int64(26)}
				o365SearchRequestParamsModel.SiteIds = []int64{int64(26)}
				o365SearchRequestParamsModel.TeamsIds = []int64{int64(26)}
				o365SearchRequestParamsModel.UserIds = []int64{int64(26)}

				// Construct an instance of the SearchDocumentLibraryRequestParams model
				searchDocumentLibraryRequestParamsModel := new(backuprecoveryv1.SearchDocumentLibraryRequestParams)
				searchDocumentLibraryRequestParamsModel.CategoryTypes = []string{"Document"}
				searchDocumentLibraryRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.IncludeFiles = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.IncludeFolders = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchDocumentLibraryRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchDocumentLibraryRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchDocumentLibraryRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchMsGroupsRequestParams model
				searchMsGroupsRequestParamsModel := new(backuprecoveryv1.SearchMsGroupsRequestParams)
				searchMsGroupsRequestParamsModel.MailboxParams = searchEmailRequestParamsBaseModel
				searchMsGroupsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsGroupsRequestParamsModel.SiteParams = searchDocumentLibraryRequestParamsModel

				// Construct an instance of the O365TeamsChannelsSearchRequestParams model
				o365TeamsChannelsSearchRequestParamsModel := new(backuprecoveryv1.O365TeamsChannelsSearchRequestParams)
				o365TeamsChannelsSearchRequestParamsModel.ChannelEmail = core.StringPtr("channel@domain.com")
				o365TeamsChannelsSearchRequestParamsModel.ChannelID = core.StringPtr("channelId")
				o365TeamsChannelsSearchRequestParamsModel.ChannelName = core.StringPtr("channelName")
				o365TeamsChannelsSearchRequestParamsModel.IncludePrivateChannels = core.BoolPtr(true)
				o365TeamsChannelsSearchRequestParamsModel.IncludePublicChannels = core.BoolPtr(true)

				// Construct an instance of the SearchMsTeamsRequestParams model
				searchMsTeamsRequestParamsModel := new(backuprecoveryv1.SearchMsTeamsRequestParams)
				searchMsTeamsRequestParamsModel.CategoryTypes = []string{"Document"}
				searchMsTeamsRequestParamsModel.ChannelNames = []string{"channelName1"}
				searchMsTeamsRequestParamsModel.ChannelParams = o365TeamsChannelsSearchRequestParamsModel
				searchMsTeamsRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsTeamsRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchMsTeamsRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchMsTeamsRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.Types = []string{"Channel"}

				// Construct an instance of the SearchPublicFolderRequestParams model
				searchPublicFolderRequestParamsModel := new(backuprecoveryv1.SearchPublicFolderRequestParams)
				searchPublicFolderRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchPublicFolderRequestParamsModel.Types = []string{"Calendar"}
				searchPublicFolderRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchPublicFolderRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchPublicFolderRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchPublicFolderRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchPublicFolderRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchSfdcRecordsRequestParams model
				searchSfdcRecordsRequestParamsModel := new(backuprecoveryv1.SearchSfdcRecordsRequestParams)
				searchSfdcRecordsRequestParamsModel.MutationTypes = []string{"All"}
				searchSfdcRecordsRequestParamsModel.ObjectName = core.StringPtr("objectName")
				searchSfdcRecordsRequestParamsModel.QueryString = core.StringPtr("queryString")
				searchSfdcRecordsRequestParamsModel.SnapshotID = core.StringPtr("snapshotId")

				// Construct an instance of the UdaOnPremSearchParams model
				udaOnPremSearchParamsModel := new(backuprecoveryv1.UdaOnPremSearchParams)
				udaOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				udaOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchIndexedObjectsOptions model
				searchIndexedObjectsOptionsModel := new(backuprecoveryv1.SearchIndexedObjectsOptions)
				searchIndexedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.ObjectType = core.StringPtr("Emails")
				searchIndexedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchIndexedObjectsOptionsModel.StorageDomainIds = []int64{int64(26)}
				searchIndexedObjectsOptionsModel.TenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.IncludeTenants = core.BoolPtr(false)
				searchIndexedObjectsOptionsModel.Tags = []string{"123:456:ABC-123", "123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.SnapshotTags = []string{"123:456:DEF-123", "123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchIndexedObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchIndexedObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchIndexedObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchIndexedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchIndexedObjectsOptionsModel.CassandraParams = cassandraOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.CouchbaseParams = couchBaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.EmailParams = searchEmailRequestParamsModel
				searchIndexedObjectsOptionsModel.ExchangeParams = searchExchangeObjectsRequestParamsModel
				searchIndexedObjectsOptionsModel.FileParams = searchFileRequestParamsModel
				searchIndexedObjectsOptionsModel.HbaseParams = hbaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HdfsParams = hdfsOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HiveParams = hiveOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MongodbParams = mongoDbOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MsGroupsParams = searchMsGroupsRequestParamsModel
				searchIndexedObjectsOptionsModel.MsTeamsParams = searchMsTeamsRequestParamsModel
				searchIndexedObjectsOptionsModel.OneDriveParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.PublicFolderParams = searchPublicFolderRequestParamsModel
				searchIndexedObjectsOptionsModel.SfdcParams = searchSfdcRecordsRequestParamsModel
				searchIndexedObjectsOptionsModel.SharepointParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.UdaParams = udaOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.SearchIndexedObjects(searchIndexedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SearchIndexedObjectsOptions model with no property values
				searchIndexedObjectsOptionsModelNew := new(backuprecoveryv1.SearchIndexedObjectsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.SearchIndexedObjects(searchIndexedObjectsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SearchIndexedObjects successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the CassandraOnPremSearchParams model
				cassandraOnPremSearchParamsModel := new(backuprecoveryv1.CassandraOnPremSearchParams)
				cassandraOnPremSearchParamsModel.CassandraObjectTypes = []string{"CassandraKeyspaces"}
				cassandraOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				cassandraOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the CouchBaseOnPremSearchParams model
				couchBaseOnPremSearchParamsModel := new(backuprecoveryv1.CouchBaseOnPremSearchParams)
				couchBaseOnPremSearchParamsModel.CouchbaseObjectTypes = []string{"CouchbaseBuckets"}
				couchBaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				couchBaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the O365SearchEmailsRequestParams model
				o365SearchEmailsRequestParamsModel := new(backuprecoveryv1.O365SearchEmailsRequestParams)
				o365SearchEmailsRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchEmailsRequestParamsModel.MailboxIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParams model
				searchEmailRequestParamsModel := new(backuprecoveryv1.SearchEmailRequestParams)
				searchEmailRequestParamsModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsModel.Types = []string{"Email"}
				searchEmailRequestParamsModel.O365Params = o365SearchEmailsRequestParamsModel

				// Construct an instance of the SearchExchangeObjectsRequestParams model
				searchExchangeObjectsRequestParamsModel := new(backuprecoveryv1.SearchExchangeObjectsRequestParams)
				searchExchangeObjectsRequestParamsModel.SearchString = core.StringPtr("searchString")

				// Construct an instance of the SearchFileRequestParams model
				searchFileRequestParamsModel := new(backuprecoveryv1.SearchFileRequestParams)
				searchFileRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchFileRequestParamsModel.Types = []string{"File"}
				searchFileRequestParamsModel.SourceEnvironments = []string{"kVMware"}
				searchFileRequestParamsModel.SourceIds = []int64{int64(26)}
				searchFileRequestParamsModel.ObjectIds = []int64{int64(26)}

				// Construct an instance of the HbaseOnPremSearchParams model
				hbaseOnPremSearchParamsModel := new(backuprecoveryv1.HbaseOnPremSearchParams)
				hbaseOnPremSearchParamsModel.HbaseObjectTypes = []string{"HbaseNamespaces"}
				hbaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hbaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HDFSOnPremSearchParams model
				hdfsOnPremSearchParamsModel := new(backuprecoveryv1.HDFSOnPremSearchParams)
				hdfsOnPremSearchParamsModel.HdfsTypes = []string{"HDFSFolders"}
				hdfsOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hdfsOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the HiveOnPremSearchParams model
				hiveOnPremSearchParamsModel := new(backuprecoveryv1.HiveOnPremSearchParams)
				hiveOnPremSearchParamsModel.HiveObjectTypes = []string{"HiveDatabases"}
				hiveOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hiveOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the MongoDbOnPremSearchParams model
				mongoDbOnPremSearchParamsModel := new(backuprecoveryv1.MongoDbOnPremSearchParams)
				mongoDbOnPremSearchParamsModel.MongoDBObjectTypes = []string{"MongoDatabases"}
				mongoDbOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				mongoDbOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchEmailRequestParamsBase model
				searchEmailRequestParamsBaseModel := new(backuprecoveryv1.SearchEmailRequestParamsBase)
				searchEmailRequestParamsBaseModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsBaseModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsBaseModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsBaseModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsBaseModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsBaseModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsBaseModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsBaseModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsBaseModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsBaseModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsBaseModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsBaseModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsBaseModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsBaseModel.Types = []string{"Email"}

				// Construct an instance of the O365SearchRequestParams model
				o365SearchRequestParamsModel := new(backuprecoveryv1.O365SearchRequestParams)
				o365SearchRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchRequestParamsModel.GroupIds = []int64{int64(26)}
				o365SearchRequestParamsModel.SiteIds = []int64{int64(26)}
				o365SearchRequestParamsModel.TeamsIds = []int64{int64(26)}
				o365SearchRequestParamsModel.UserIds = []int64{int64(26)}

				// Construct an instance of the SearchDocumentLibraryRequestParams model
				searchDocumentLibraryRequestParamsModel := new(backuprecoveryv1.SearchDocumentLibraryRequestParams)
				searchDocumentLibraryRequestParamsModel.CategoryTypes = []string{"Document"}
				searchDocumentLibraryRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.IncludeFiles = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.IncludeFolders = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchDocumentLibraryRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchDocumentLibraryRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchDocumentLibraryRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchMsGroupsRequestParams model
				searchMsGroupsRequestParamsModel := new(backuprecoveryv1.SearchMsGroupsRequestParams)
				searchMsGroupsRequestParamsModel.MailboxParams = searchEmailRequestParamsBaseModel
				searchMsGroupsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsGroupsRequestParamsModel.SiteParams = searchDocumentLibraryRequestParamsModel

				// Construct an instance of the O365TeamsChannelsSearchRequestParams model
				o365TeamsChannelsSearchRequestParamsModel := new(backuprecoveryv1.O365TeamsChannelsSearchRequestParams)
				o365TeamsChannelsSearchRequestParamsModel.ChannelEmail = core.StringPtr("channel@domain.com")
				o365TeamsChannelsSearchRequestParamsModel.ChannelID = core.StringPtr("channelId")
				o365TeamsChannelsSearchRequestParamsModel.ChannelName = core.StringPtr("channelName")
				o365TeamsChannelsSearchRequestParamsModel.IncludePrivateChannels = core.BoolPtr(true)
				o365TeamsChannelsSearchRequestParamsModel.IncludePublicChannels = core.BoolPtr(true)

				// Construct an instance of the SearchMsTeamsRequestParams model
				searchMsTeamsRequestParamsModel := new(backuprecoveryv1.SearchMsTeamsRequestParams)
				searchMsTeamsRequestParamsModel.CategoryTypes = []string{"Document"}
				searchMsTeamsRequestParamsModel.ChannelNames = []string{"channelName1"}
				searchMsTeamsRequestParamsModel.ChannelParams = o365TeamsChannelsSearchRequestParamsModel
				searchMsTeamsRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsTeamsRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchMsTeamsRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchMsTeamsRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.Types = []string{"Channel"}

				// Construct an instance of the SearchPublicFolderRequestParams model
				searchPublicFolderRequestParamsModel := new(backuprecoveryv1.SearchPublicFolderRequestParams)
				searchPublicFolderRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchPublicFolderRequestParamsModel.Types = []string{"Calendar"}
				searchPublicFolderRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchPublicFolderRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchPublicFolderRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchPublicFolderRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchPublicFolderRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))

				// Construct an instance of the SearchSfdcRecordsRequestParams model
				searchSfdcRecordsRequestParamsModel := new(backuprecoveryv1.SearchSfdcRecordsRequestParams)
				searchSfdcRecordsRequestParamsModel.MutationTypes = []string{"All"}
				searchSfdcRecordsRequestParamsModel.ObjectName = core.StringPtr("objectName")
				searchSfdcRecordsRequestParamsModel.QueryString = core.StringPtr("queryString")
				searchSfdcRecordsRequestParamsModel.SnapshotID = core.StringPtr("snapshotId")

				// Construct an instance of the UdaOnPremSearchParams model
				udaOnPremSearchParamsModel := new(backuprecoveryv1.UdaOnPremSearchParams)
				udaOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				udaOnPremSearchParamsModel.SourceIds = []int64{int64(26)}

				// Construct an instance of the SearchIndexedObjectsOptions model
				searchIndexedObjectsOptionsModel := new(backuprecoveryv1.SearchIndexedObjectsOptions)
				searchIndexedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.ObjectType = core.StringPtr("Emails")
				searchIndexedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchIndexedObjectsOptionsModel.StorageDomainIds = []int64{int64(26)}
				searchIndexedObjectsOptionsModel.TenantID = core.StringPtr("tenantId")
				searchIndexedObjectsOptionsModel.IncludeTenants = core.BoolPtr(false)
				searchIndexedObjectsOptionsModel.Tags = []string{"123:456:ABC-123", "123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.SnapshotTags = []string{"123:456:DEF-123", "123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchIndexedObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchIndexedObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchIndexedObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchIndexedObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchIndexedObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchIndexedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchIndexedObjectsOptionsModel.CassandraParams = cassandraOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.CouchbaseParams = couchBaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.EmailParams = searchEmailRequestParamsModel
				searchIndexedObjectsOptionsModel.ExchangeParams = searchExchangeObjectsRequestParamsModel
				searchIndexedObjectsOptionsModel.FileParams = searchFileRequestParamsModel
				searchIndexedObjectsOptionsModel.HbaseParams = hbaseOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HdfsParams = hdfsOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.HiveParams = hiveOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MongodbParams = mongoDbOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.MsGroupsParams = searchMsGroupsRequestParamsModel
				searchIndexedObjectsOptionsModel.MsTeamsParams = searchMsTeamsRequestParamsModel
				searchIndexedObjectsOptionsModel.OneDriveParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.PublicFolderParams = searchPublicFolderRequestParamsModel
				searchIndexedObjectsOptionsModel.SfdcParams = searchSfdcRecordsRequestParamsModel
				searchIndexedObjectsOptionsModel.SharepointParams = searchDocumentLibraryRequestParamsModel
				searchIndexedObjectsOptionsModel.UdaParams = udaOnPremSearchParamsModel
				searchIndexedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.SearchIndexedObjects(searchIndexedObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SearchObjects(searchObjectsOptions *SearchObjectsOptions) - Operation response error`, func() {
		searchObjectsPath := "/data-protect/search/objects"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchObjectsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["searchString"]).To(Equal([]string{"searchString"}))
					// TODO: Add check for isProtected query parameter
					// TODO: Add check for isDeleted query parameter
					// TODO: Add check for includeDeletedObjects query parameter
					Expect(req.URL.Query()["paginationCookie"]).To(Equal([]string{"paginationCookie"}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["tagSearchName"]).To(Equal([]string{"tagName"}))
					// TODO: Add check for includeHeliosTagInfoForObjects query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SearchObjects with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the SearchObjectsOptions model
				searchObjectsOptionsModel := new(backuprecoveryv1.SearchObjectsOptions)
				searchObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchObjectsOptionsModel.ProtectionTypes = []string{"kAgent"}
				searchObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchObjectsOptionsModel.SourceUUIDs = []string{"sourceUuid1"}
				searchObjectsOptionsModel.IsProtected = core.BoolPtr(true)
				searchObjectsOptionsModel.IsDeleted = core.BoolPtr(true)
				searchObjectsOptionsModel.LastRunStatusList = []string{"Accepted"}
				searchObjectsOptionsModel.ClusterIdentifiers = []string{"clusterIdentifier1"}
				searchObjectsOptionsModel.IncludeDeletedObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchObjectsOptionsModel.TagSearchName = core.StringPtr("tagName")
				searchObjectsOptionsModel.TagNames = []string{"tag1"}
				searchObjectsOptionsModel.TagTypes = []string{"System"}
				searchObjectsOptionsModel.TagCategories = []string{"Security"}
				searchObjectsOptionsModel.TagSubCategories = []string{"Classification"}
				searchObjectsOptionsModel.IncludeHeliosTagInfoForObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.ExternalFilters = []string{"filter1"}
				searchObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.SearchObjects(searchObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.SearchObjects(searchObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SearchObjects(searchObjectsOptions *SearchObjectsOptions)`, func() {
		searchObjectsPath := "/data-protect/search/objects"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchObjectsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["searchString"]).To(Equal([]string{"searchString"}))
					// TODO: Add check for isProtected query parameter
					// TODO: Add check for isDeleted query parameter
					// TODO: Add check for includeDeletedObjects query parameter
					Expect(req.URL.Query()["paginationCookie"]).To(Equal([]string{"paginationCookie"}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["tagSearchName"]).To(Equal([]string{"tagName"}))
					// TODO: Add check for includeHeliosTagInfoForObjects query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}, "tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "heliosTags": [{"category": "Security", "name": "Name", "subCategory": "Classification", "thirdPartyName": "ThirdPartyName", "type": "System", "uiColor": "UiColor", "updatedTimeUsecs": 16, "uuid": "UUID"}], "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "objectProtectionInfos": [{"objectId": 8, "sourceId": 8, "viewId": 6, "regionId": "RegionID", "clusterId": 9, "clusterIncarnationId": 20, "tenantIds": ["TenantIds"], "isDeleted": false, "protectionGroups": [{"name": "Name", "id": "ID", "protectionEnvType": "kAgent", "policyName": "PolicyName", "policyId": "PolicyID", "lastBackupRunStatus": "Accepted", "lastArchivalRunStatus": "Accepted", "lastReplicationRunStatus": "Accepted", "lastRunSlaViolated": true}], "objectBackupConfiguration": [{"policyName": "PolicyName", "policyId": "PolicyID", "lastBackupRunStatus": "Accepted", "lastArchivalRunStatus": "Accepted", "lastReplicationRunStatus": "Accepted", "lastRunSlaViolated": true}], "lastRunStatus": "Accepted"}], "secondaryIds": [{"name": "Name", "value": "Value"}], "taggedSnapshots": [{"clusterId": 9, "clusterIncarnationId": 20, "jobId": 5, "objectUuid": "ObjectUUID", "runStartTimeUsecs": 17, "tags": [{"category": "Security", "name": "Name", "subCategory": "Classification", "thirdPartyName": "ThirdPartyName", "type": "System", "uiColor": "UiColor", "updatedTimeUsecs": 16, "uuid": "UUID"}]}]}], "paginationCookie": "PaginationCookie", "count": 5}`)
				}))
			})
			It(`Invoke SearchObjects successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the SearchObjectsOptions model
				searchObjectsOptionsModel := new(backuprecoveryv1.SearchObjectsOptions)
				searchObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchObjectsOptionsModel.ProtectionTypes = []string{"kAgent"}
				searchObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchObjectsOptionsModel.SourceUUIDs = []string{"sourceUuid1"}
				searchObjectsOptionsModel.IsProtected = core.BoolPtr(true)
				searchObjectsOptionsModel.IsDeleted = core.BoolPtr(true)
				searchObjectsOptionsModel.LastRunStatusList = []string{"Accepted"}
				searchObjectsOptionsModel.ClusterIdentifiers = []string{"clusterIdentifier1"}
				searchObjectsOptionsModel.IncludeDeletedObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchObjectsOptionsModel.TagSearchName = core.StringPtr("tagName")
				searchObjectsOptionsModel.TagNames = []string{"tag1"}
				searchObjectsOptionsModel.TagTypes = []string{"System"}
				searchObjectsOptionsModel.TagCategories = []string{"Security"}
				searchObjectsOptionsModel.TagSubCategories = []string{"Classification"}
				searchObjectsOptionsModel.IncludeHeliosTagInfoForObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.ExternalFilters = []string{"filter1"}
				searchObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.SearchObjectsWithContext(ctx, searchObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.SearchObjects(searchObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.SearchObjectsWithContext(ctx, searchObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchObjectsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["searchString"]).To(Equal([]string{"searchString"}))
					// TODO: Add check for isProtected query parameter
					// TODO: Add check for isDeleted query parameter
					// TODO: Add check for includeDeletedObjects query parameter
					Expect(req.URL.Query()["paginationCookie"]).To(Equal([]string{"paginationCookie"}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["tagSearchName"]).To(Equal([]string{"tagName"}))
					// TODO: Add check for includeHeliosTagInfoForObjects query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}, "tags": [{"tagId": "TagID"}], "snapshotTags": [{"tagId": "TagID", "runIds": ["RunIds"]}], "heliosTags": [{"category": "Security", "name": "Name", "subCategory": "Classification", "thirdPartyName": "ThirdPartyName", "type": "System", "uiColor": "UiColor", "updatedTimeUsecs": 16, "uuid": "UUID"}], "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "objectProtectionInfos": [{"objectId": 8, "sourceId": 8, "viewId": 6, "regionId": "RegionID", "clusterId": 9, "clusterIncarnationId": 20, "tenantIds": ["TenantIds"], "isDeleted": false, "protectionGroups": [{"name": "Name", "id": "ID", "protectionEnvType": "kAgent", "policyName": "PolicyName", "policyId": "PolicyID", "lastBackupRunStatus": "Accepted", "lastArchivalRunStatus": "Accepted", "lastReplicationRunStatus": "Accepted", "lastRunSlaViolated": true}], "objectBackupConfiguration": [{"policyName": "PolicyName", "policyId": "PolicyID", "lastBackupRunStatus": "Accepted", "lastArchivalRunStatus": "Accepted", "lastReplicationRunStatus": "Accepted", "lastRunSlaViolated": true}], "lastRunStatus": "Accepted"}], "secondaryIds": [{"name": "Name", "value": "Value"}], "taggedSnapshots": [{"clusterId": 9, "clusterIncarnationId": 20, "jobId": 5, "objectUuid": "ObjectUUID", "runStartTimeUsecs": 17, "tags": [{"category": "Security", "name": "Name", "subCategory": "Classification", "thirdPartyName": "ThirdPartyName", "type": "System", "uiColor": "UiColor", "updatedTimeUsecs": 16, "uuid": "UUID"}]}]}], "paginationCookie": "PaginationCookie", "count": 5}`)
				}))
			})
			It(`Invoke SearchObjects successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.SearchObjects(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SearchObjectsOptions model
				searchObjectsOptionsModel := new(backuprecoveryv1.SearchObjectsOptions)
				searchObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchObjectsOptionsModel.ProtectionTypes = []string{"kAgent"}
				searchObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchObjectsOptionsModel.SourceUUIDs = []string{"sourceUuid1"}
				searchObjectsOptionsModel.IsProtected = core.BoolPtr(true)
				searchObjectsOptionsModel.IsDeleted = core.BoolPtr(true)
				searchObjectsOptionsModel.LastRunStatusList = []string{"Accepted"}
				searchObjectsOptionsModel.ClusterIdentifiers = []string{"clusterIdentifier1"}
				searchObjectsOptionsModel.IncludeDeletedObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchObjectsOptionsModel.TagSearchName = core.StringPtr("tagName")
				searchObjectsOptionsModel.TagNames = []string{"tag1"}
				searchObjectsOptionsModel.TagTypes = []string{"System"}
				searchObjectsOptionsModel.TagCategories = []string{"Security"}
				searchObjectsOptionsModel.TagSubCategories = []string{"Classification"}
				searchObjectsOptionsModel.IncludeHeliosTagInfoForObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.ExternalFilters = []string{"filter1"}
				searchObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.SearchObjects(searchObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SearchObjects with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the SearchObjectsOptions model
				searchObjectsOptionsModel := new(backuprecoveryv1.SearchObjectsOptions)
				searchObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchObjectsOptionsModel.ProtectionTypes = []string{"kAgent"}
				searchObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchObjectsOptionsModel.SourceUUIDs = []string{"sourceUuid1"}
				searchObjectsOptionsModel.IsProtected = core.BoolPtr(true)
				searchObjectsOptionsModel.IsDeleted = core.BoolPtr(true)
				searchObjectsOptionsModel.LastRunStatusList = []string{"Accepted"}
				searchObjectsOptionsModel.ClusterIdentifiers = []string{"clusterIdentifier1"}
				searchObjectsOptionsModel.IncludeDeletedObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchObjectsOptionsModel.TagSearchName = core.StringPtr("tagName")
				searchObjectsOptionsModel.TagNames = []string{"tag1"}
				searchObjectsOptionsModel.TagTypes = []string{"System"}
				searchObjectsOptionsModel.TagCategories = []string{"Security"}
				searchObjectsOptionsModel.TagSubCategories = []string{"Classification"}
				searchObjectsOptionsModel.IncludeHeliosTagInfoForObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.ExternalFilters = []string{"filter1"}
				searchObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.SearchObjects(searchObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SearchObjectsOptions model with no property values
				searchObjectsOptionsModelNew := new(backuprecoveryv1.SearchObjectsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.SearchObjects(searchObjectsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SearchObjects successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the SearchObjectsOptions model
				searchObjectsOptionsModel := new(backuprecoveryv1.SearchObjectsOptions)
				searchObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchObjectsOptionsModel.ProtectionTypes = []string{"kAgent"}
				searchObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchObjectsOptionsModel.SourceUUIDs = []string{"sourceUuid1"}
				searchObjectsOptionsModel.IsProtected = core.BoolPtr(true)
				searchObjectsOptionsModel.IsDeleted = core.BoolPtr(true)
				searchObjectsOptionsModel.LastRunStatusList = []string{"Accepted"}
				searchObjectsOptionsModel.ClusterIdentifiers = []string{"clusterIdentifier1"}
				searchObjectsOptionsModel.IncludeDeletedObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.PaginationCookie = core.StringPtr("paginationCookie")
				searchObjectsOptionsModel.Count = core.Int64Ptr(int64(38))
				searchObjectsOptionsModel.MustHaveTagIds = []string{"123:456:ABC-123"}
				searchObjectsOptionsModel.MightHaveTagIds = []string{"123:456:ABC-456"}
				searchObjectsOptionsModel.MustHaveSnapshotTagIds = []string{"123:456:DEF-123"}
				searchObjectsOptionsModel.MightHaveSnapshotTagIds = []string{"123:456:DEF-456"}
				searchObjectsOptionsModel.TagSearchName = core.StringPtr("tagName")
				searchObjectsOptionsModel.TagNames = []string{"tag1"}
				searchObjectsOptionsModel.TagTypes = []string{"System"}
				searchObjectsOptionsModel.TagCategories = []string{"Security"}
				searchObjectsOptionsModel.TagSubCategories = []string{"Classification"}
				searchObjectsOptionsModel.IncludeHeliosTagInfoForObjects = core.BoolPtr(true)
				searchObjectsOptionsModel.ExternalFilters = []string{"filter1"}
				searchObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.SearchObjects(searchObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SearchProtectedObjects(searchProtectedObjectsOptions *SearchProtectedObjectsOptions) - Operation response error`, func() {
		searchProtectedObjectsPath := "/data-protect/search/protected-objects"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchProtectedObjectsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["searchString"]).To(Equal([]string{"searchString"}))
					Expect(req.URL.Query()["objectActionKey"]).To(Equal([]string{"kPhysical"}))
					Expect(req.URL.Query()["subResultSize"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					// TODO: Add check for filterSnapshotFromUsecs query parameter
					// TODO: Add check for filterSnapshotToUsecs query parameter
					// TODO: Add check for cdpProtectedOnly query parameter
					// TODO: Add check for useCachedData query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SearchProtectedObjects with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the SearchProtectedObjectsOptions model
				searchProtectedObjectsOptionsModel := new(backuprecoveryv1.SearchProtectedObjectsOptions)
				searchProtectedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchProtectedObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchProtectedObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchProtectedObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchProtectedObjectsOptionsModel.SnapshotActions = []string{"RecoverVMs"}
				searchProtectedObjectsOptionsModel.ObjectActionKey = core.StringPtr("kPhysical")
				searchProtectedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchProtectedObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.SubResultSize = core.Int64Ptr(int64(38))
				searchProtectedObjectsOptionsModel.FilterSnapshotFromUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.FilterSnapshotToUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchProtectedObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.RunInstanceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.CdpProtectedOnly = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.SearchProtectedObjects(searchProtectedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.SearchProtectedObjects(searchProtectedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SearchProtectedObjects(searchProtectedObjectsOptions *SearchProtectedObjectsOptions)`, func() {
		searchProtectedObjectsPath := "/data-protect/search/protected-objects"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchProtectedObjectsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["searchString"]).To(Equal([]string{"searchString"}))
					Expect(req.URL.Query()["objectActionKey"]).To(Equal([]string{"kPhysical"}))
					Expect(req.URL.Query()["subResultSize"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					// TODO: Add check for filterSnapshotFromUsecs query parameter
					// TODO: Add check for filterSnapshotToUsecs query parameter
					// TODO: Add check for cdpProtectedOnly query parameter
					// TODO: Add check for useCachedData query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "latestSnapshotsInfo": [{"localSnapshotInfo": {"snapshotId": "SnapshotID", "logicalSizeBytes": 16}, "archivalSnapshotsInfo": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "snapshotId": "SnapshotID", "logicalSizeBytes": 16}], "indexingStatus": "InProgress", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "runInstanceId": 13, "sourceGroupId": "SourceGroupID", "protectionRunId": "ProtectionRunID", "runType": "kRegular", "protectionRunStartTimeUsecs": 27, "protectionRunEndTimeUsecs": 25}]}], "metadata": {"uniqueProtectionGroupIdentifiers": [{"protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName"}]}, "numResults": 10}`)
				}))
			})
			It(`Invoke SearchProtectedObjects successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the SearchProtectedObjectsOptions model
				searchProtectedObjectsOptionsModel := new(backuprecoveryv1.SearchProtectedObjectsOptions)
				searchProtectedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchProtectedObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchProtectedObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchProtectedObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchProtectedObjectsOptionsModel.SnapshotActions = []string{"RecoverVMs"}
				searchProtectedObjectsOptionsModel.ObjectActionKey = core.StringPtr("kPhysical")
				searchProtectedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchProtectedObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.SubResultSize = core.Int64Ptr(int64(38))
				searchProtectedObjectsOptionsModel.FilterSnapshotFromUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.FilterSnapshotToUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchProtectedObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.RunInstanceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.CdpProtectedOnly = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.SearchProtectedObjectsWithContext(ctx, searchProtectedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.SearchProtectedObjects(searchProtectedObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.SearchProtectedObjectsWithContext(ctx, searchProtectedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(searchProtectedObjectsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					Expect(req.URL.Query()["searchString"]).To(Equal([]string{"searchString"}))
					Expect(req.URL.Query()["objectActionKey"]).To(Equal([]string{"kPhysical"}))
					Expect(req.URL.Query()["subResultSize"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					// TODO: Add check for filterSnapshotFromUsecs query parameter
					// TODO: Add check for filterSnapshotToUsecs query parameter
					// TODO: Add check for cdpProtectedOnly query parameter
					// TODO: Add check for useCachedData query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}, "latestSnapshotsInfo": [{"localSnapshotInfo": {"snapshotId": "SnapshotID", "logicalSizeBytes": 16}, "archivalSnapshotsInfo": [{"targetId": 8, "archivalTaskId": "ArchivalTaskID", "targetName": "TargetName", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 9, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "snapshotId": "SnapshotID", "logicalSizeBytes": 16}], "indexingStatus": "InProgress", "protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName", "runInstanceId": 13, "sourceGroupId": "SourceGroupID", "protectionRunId": "ProtectionRunID", "runType": "kRegular", "protectionRunStartTimeUsecs": 27, "protectionRunEndTimeUsecs": 25}]}], "metadata": {"uniqueProtectionGroupIdentifiers": [{"protectionGroupId": "ProtectionGroupID", "protectionGroupName": "ProtectionGroupName"}]}, "numResults": 10}`)
				}))
			})
			It(`Invoke SearchProtectedObjects successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.SearchProtectedObjects(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SearchProtectedObjectsOptions model
				searchProtectedObjectsOptionsModel := new(backuprecoveryv1.SearchProtectedObjectsOptions)
				searchProtectedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchProtectedObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchProtectedObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchProtectedObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchProtectedObjectsOptionsModel.SnapshotActions = []string{"RecoverVMs"}
				searchProtectedObjectsOptionsModel.ObjectActionKey = core.StringPtr("kPhysical")
				searchProtectedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchProtectedObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.SubResultSize = core.Int64Ptr(int64(38))
				searchProtectedObjectsOptionsModel.FilterSnapshotFromUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.FilterSnapshotToUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchProtectedObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.RunInstanceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.CdpProtectedOnly = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.SearchProtectedObjects(searchProtectedObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SearchProtectedObjects with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the SearchProtectedObjectsOptions model
				searchProtectedObjectsOptionsModel := new(backuprecoveryv1.SearchProtectedObjectsOptions)
				searchProtectedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchProtectedObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchProtectedObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchProtectedObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchProtectedObjectsOptionsModel.SnapshotActions = []string{"RecoverVMs"}
				searchProtectedObjectsOptionsModel.ObjectActionKey = core.StringPtr("kPhysical")
				searchProtectedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchProtectedObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.SubResultSize = core.Int64Ptr(int64(38))
				searchProtectedObjectsOptionsModel.FilterSnapshotFromUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.FilterSnapshotToUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchProtectedObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.RunInstanceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.CdpProtectedOnly = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.SearchProtectedObjects(searchProtectedObjectsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SearchProtectedObjectsOptions model with no property values
				searchProtectedObjectsOptionsModelNew := new(backuprecoveryv1.SearchProtectedObjectsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.SearchProtectedObjects(searchProtectedObjectsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SearchProtectedObjects successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the SearchProtectedObjectsOptions model
				searchProtectedObjectsOptionsModel := new(backuprecoveryv1.SearchProtectedObjectsOptions)
				searchProtectedObjectsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				searchProtectedObjectsOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				searchProtectedObjectsOptionsModel.SearchString = core.StringPtr("searchString")
				searchProtectedObjectsOptionsModel.Environments = []string{"kPhysical"}
				searchProtectedObjectsOptionsModel.SnapshotActions = []string{"RecoverVMs"}
				searchProtectedObjectsOptionsModel.ObjectActionKey = core.StringPtr("kPhysical")
				searchProtectedObjectsOptionsModel.ProtectionGroupIds = []string{"protectionGroupId1"}
				searchProtectedObjectsOptionsModel.ObjectIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.SubResultSize = core.Int64Ptr(int64(38))
				searchProtectedObjectsOptionsModel.FilterSnapshotFromUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.FilterSnapshotToUsecs = core.Int64Ptr(int64(26))
				searchProtectedObjectsOptionsModel.OsTypes = []string{"kLinux"}
				searchProtectedObjectsOptionsModel.SourceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.RunInstanceIds = []int64{int64(26)}
				searchProtectedObjectsOptionsModel.CdpProtectedOnly = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.UseCachedData = core.BoolPtr(true)
				searchProtectedObjectsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.SearchProtectedObjects(searchProtectedObjectsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSourceRegistrations(getSourceRegistrationsOptions *GetSourceRegistrationsOptions) - Operation response error`, func() {
		getSourceRegistrationsPath := "/data-protect/sources/registrations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSourceRegistrationsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for includeSourceCredentials query parameter
					Expect(req.URL.Query()["encryptionKey"]).To(Equal([]string{"encryptionKey"}))
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for includeExternalMetadata query parameter
					// TODO: Add check for ignoreTenantMigrationInProgressCheck query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSourceRegistrations with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetSourceRegistrationsOptions model
				getSourceRegistrationsOptionsModel := new(backuprecoveryv1.GetSourceRegistrationsOptions)
				getSourceRegistrationsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getSourceRegistrationsOptionsModel.Ids = []int64{int64(38)}
				getSourceRegistrationsOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				getSourceRegistrationsOptionsModel.UseCachedData = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IncludeExternalMetadata = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IgnoreTenantMigrationInProgressCheck = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetSourceRegistrations(getSourceRegistrationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetSourceRegistrations(getSourceRegistrationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSourceRegistrations(getSourceRegistrationsOptions *GetSourceRegistrationsOptions)`, func() {
		getSourceRegistrationsPath := "/data-protect/sources/registrations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSourceRegistrationsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for includeSourceCredentials query parameter
					Expect(req.URL.Query()["encryptionKey"]).To(Equal([]string{"encryptionKey"}))
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for includeExternalMetadata query parameter
					// TODO: Add check for ignoreTenantMigrationInProgressCheck query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"registrations": [{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}]}`)
				}))
			})
			It(`Invoke GetSourceRegistrations successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetSourceRegistrationsOptions model
				getSourceRegistrationsOptionsModel := new(backuprecoveryv1.GetSourceRegistrationsOptions)
				getSourceRegistrationsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getSourceRegistrationsOptionsModel.Ids = []int64{int64(38)}
				getSourceRegistrationsOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				getSourceRegistrationsOptionsModel.UseCachedData = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IncludeExternalMetadata = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IgnoreTenantMigrationInProgressCheck = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetSourceRegistrationsWithContext(ctx, getSourceRegistrationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetSourceRegistrations(getSourceRegistrationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetSourceRegistrationsWithContext(ctx, getSourceRegistrationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSourceRegistrationsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// TODO: Add check for includeSourceCredentials query parameter
					Expect(req.URL.Query()["encryptionKey"]).To(Equal([]string{"encryptionKey"}))
					// TODO: Add check for useCachedData query parameter
					// TODO: Add check for includeExternalMetadata query parameter
					// TODO: Add check for ignoreTenantMigrationInProgressCheck query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"registrations": [{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}]}`)
				}))
			})
			It(`Invoke GetSourceRegistrations successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetSourceRegistrations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSourceRegistrationsOptions model
				getSourceRegistrationsOptionsModel := new(backuprecoveryv1.GetSourceRegistrationsOptions)
				getSourceRegistrationsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getSourceRegistrationsOptionsModel.Ids = []int64{int64(38)}
				getSourceRegistrationsOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				getSourceRegistrationsOptionsModel.UseCachedData = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IncludeExternalMetadata = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IgnoreTenantMigrationInProgressCheck = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetSourceRegistrations(getSourceRegistrationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSourceRegistrations with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetSourceRegistrationsOptions model
				getSourceRegistrationsOptionsModel := new(backuprecoveryv1.GetSourceRegistrationsOptions)
				getSourceRegistrationsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getSourceRegistrationsOptionsModel.Ids = []int64{int64(38)}
				getSourceRegistrationsOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				getSourceRegistrationsOptionsModel.UseCachedData = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IncludeExternalMetadata = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IgnoreTenantMigrationInProgressCheck = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetSourceRegistrations(getSourceRegistrationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSourceRegistrationsOptions model with no property values
				getSourceRegistrationsOptionsModelNew := new(backuprecoveryv1.GetSourceRegistrationsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetSourceRegistrations(getSourceRegistrationsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSourceRegistrations successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetSourceRegistrationsOptions model
				getSourceRegistrationsOptionsModel := new(backuprecoveryv1.GetSourceRegistrationsOptions)
				getSourceRegistrationsOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getSourceRegistrationsOptionsModel.Ids = []int64{int64(38)}
				getSourceRegistrationsOptionsModel.IncludeSourceCredentials = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				getSourceRegistrationsOptionsModel.UseCachedData = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IncludeExternalMetadata = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.IgnoreTenantMigrationInProgressCheck = core.BoolPtr(true)
				getSourceRegistrationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetSourceRegistrations(getSourceRegistrationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterProtectionSource(registerProtectionSourceOptions *RegisterProtectionSourceOptions) - Operation response error`, func() {
		registerProtectionSourcePath := "/data-protect/sources/registrations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerProtectionSourcePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RegisterProtectionSource with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the RegisterProtectionSourceOptions model
				registerProtectionSourceOptionsModel := new(backuprecoveryv1.RegisterProtectionSourceOptions)
				registerProtectionSourceOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				registerProtectionSourceOptionsModel.Environment = core.StringPtr("kPhysical")
				registerProtectionSourceOptionsModel.Name = core.StringPtr("register-protection-source")
				registerProtectionSourceOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				registerProtectionSourceOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				registerProtectionSourceOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				registerProtectionSourceOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				registerProtectionSourceOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				registerProtectionSourceOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				registerProtectionSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.RegisterProtectionSource(registerProtectionSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.RegisterProtectionSource(registerProtectionSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterProtectionSource(registerProtectionSourceOptions *RegisterProtectionSourceOptions)`, func() {
		registerProtectionSourcePath := "/data-protect/sources/registrations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerProtectionSourcePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))
			})
			It(`Invoke RegisterProtectionSource successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the RegisterProtectionSourceOptions model
				registerProtectionSourceOptionsModel := new(backuprecoveryv1.RegisterProtectionSourceOptions)
				registerProtectionSourceOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				registerProtectionSourceOptionsModel.Environment = core.StringPtr("kPhysical")
				registerProtectionSourceOptionsModel.Name = core.StringPtr("register-protection-source")
				registerProtectionSourceOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				registerProtectionSourceOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				registerProtectionSourceOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				registerProtectionSourceOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				registerProtectionSourceOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				registerProtectionSourceOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				registerProtectionSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.RegisterProtectionSourceWithContext(ctx, registerProtectionSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.RegisterProtectionSource(registerProtectionSourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.RegisterProtectionSourceWithContext(ctx, registerProtectionSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerProtectionSourcePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))
			})
			It(`Invoke RegisterProtectionSource successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.RegisterProtectionSource(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the RegisterProtectionSourceOptions model
				registerProtectionSourceOptionsModel := new(backuprecoveryv1.RegisterProtectionSourceOptions)
				registerProtectionSourceOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				registerProtectionSourceOptionsModel.Environment = core.StringPtr("kPhysical")
				registerProtectionSourceOptionsModel.Name = core.StringPtr("register-protection-source")
				registerProtectionSourceOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				registerProtectionSourceOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				registerProtectionSourceOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				registerProtectionSourceOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				registerProtectionSourceOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				registerProtectionSourceOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				registerProtectionSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.RegisterProtectionSource(registerProtectionSourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RegisterProtectionSource with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the RegisterProtectionSourceOptions model
				registerProtectionSourceOptionsModel := new(backuprecoveryv1.RegisterProtectionSourceOptions)
				registerProtectionSourceOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				registerProtectionSourceOptionsModel.Environment = core.StringPtr("kPhysical")
				registerProtectionSourceOptionsModel.Name = core.StringPtr("register-protection-source")
				registerProtectionSourceOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				registerProtectionSourceOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				registerProtectionSourceOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				registerProtectionSourceOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				registerProtectionSourceOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				registerProtectionSourceOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				registerProtectionSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.RegisterProtectionSource(registerProtectionSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RegisterProtectionSourceOptions model with no property values
				registerProtectionSourceOptionsModelNew := new(backuprecoveryv1.RegisterProtectionSourceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.RegisterProtectionSource(registerProtectionSourceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke RegisterProtectionSource successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the RegisterProtectionSourceOptions model
				registerProtectionSourceOptionsModel := new(backuprecoveryv1.RegisterProtectionSourceOptions)
				registerProtectionSourceOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				registerProtectionSourceOptionsModel.Environment = core.StringPtr("kPhysical")
				registerProtectionSourceOptionsModel.Name = core.StringPtr("register-protection-source")
				registerProtectionSourceOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				registerProtectionSourceOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				registerProtectionSourceOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				registerProtectionSourceOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				registerProtectionSourceOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				registerProtectionSourceOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				registerProtectionSourceOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				registerProtectionSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.RegisterProtectionSource(registerProtectionSourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionSourceRegistration(getProtectionSourceRegistrationOptions *GetProtectionSourceRegistrationOptions) - Operation response error`, func() {
		getProtectionSourceRegistrationPath := "/data-protect/sources/registrations/26"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProtectionSourceRegistration with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionSourceRegistrationOptions model
				getProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.GetProtectionSourceRegistrationOptions)
				getProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				getProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionSourceRegistrationOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.GetProtectionSourceRegistration(getProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.GetProtectionSourceRegistration(getProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProtectionSourceRegistration(getProtectionSourceRegistrationOptions *GetProtectionSourceRegistrationOptions)`, func() {
		getProtectionSourceRegistrationPath := "/data-protect/sources/registrations/26"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))
			})
			It(`Invoke GetProtectionSourceRegistration successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the GetProtectionSourceRegistrationOptions model
				getProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.GetProtectionSourceRegistrationOptions)
				getProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				getProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionSourceRegistrationOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.GetProtectionSourceRegistrationWithContext(ctx, getProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.GetProtectionSourceRegistration(getProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.GetProtectionSourceRegistrationWithContext(ctx, getProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					Expect(req.Header["Requestinitiatortype"]).ToNot(BeNil())
					Expect(req.Header["Requestinitiatortype"][0]).To(Equal(fmt.Sprintf("%v", "UIUser")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))
			})
			It(`Invoke GetProtectionSourceRegistration successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.GetProtectionSourceRegistration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProtectionSourceRegistrationOptions model
				getProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.GetProtectionSourceRegistrationOptions)
				getProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				getProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionSourceRegistrationOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.GetProtectionSourceRegistration(getProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetProtectionSourceRegistration with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionSourceRegistrationOptions model
				getProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.GetProtectionSourceRegistrationOptions)
				getProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				getProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionSourceRegistrationOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.GetProtectionSourceRegistration(getProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProtectionSourceRegistrationOptions model with no property values
				getProtectionSourceRegistrationOptionsModelNew := new(backuprecoveryv1.GetProtectionSourceRegistrationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.GetProtectionSourceRegistration(getProtectionSourceRegistrationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProtectionSourceRegistration successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the GetProtectionSourceRegistrationOptions model
				getProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.GetProtectionSourceRegistrationOptions)
				getProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				getProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				getProtectionSourceRegistrationOptionsModel.RequestInitiatorType = core.StringPtr("UIUser")
				getProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.GetProtectionSourceRegistration(getProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptions *UpdateProtectionSourceRegistrationOptions) - Operation response error`, func() {
		updateProtectionSourceRegistrationPath := "/data-protect/sources/registrations/26"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateProtectionSourceRegistration with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the UpdateProtectionSourceRegistrationOptions model
				updateProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.UpdateProtectionSourceRegistrationOptions)
				updateProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionSourceRegistrationOptionsModel.Name = core.StringPtr("update-protection-source")
				updateProtectionSourceRegistrationOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				updateProtectionSourceRegistrationOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				updateProtectionSourceRegistrationOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				updateProtectionSourceRegistrationOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionSourceRegistrationOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				updateProtectionSourceRegistrationOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				updateProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptions *UpdateProtectionSourceRegistrationOptions)`, func() {
		updateProtectionSourceRegistrationPath := "/data-protect/sources/registrations/26"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))
			})
			It(`Invoke UpdateProtectionSourceRegistration successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the UpdateProtectionSourceRegistrationOptions model
				updateProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.UpdateProtectionSourceRegistrationOptions)
				updateProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionSourceRegistrationOptionsModel.Name = core.StringPtr("update-protection-source")
				updateProtectionSourceRegistrationOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				updateProtectionSourceRegistrationOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				updateProtectionSourceRegistrationOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				updateProtectionSourceRegistrationOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionSourceRegistrationOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				updateProtectionSourceRegistrationOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				updateProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.UpdateProtectionSourceRegistrationWithContext(ctx, updateProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.UpdateProtectionSourceRegistrationWithContext(ctx, updateProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))
			})
			It(`Invoke UpdateProtectionSourceRegistration successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.UpdateProtectionSourceRegistration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the UpdateProtectionSourceRegistrationOptions model
				updateProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.UpdateProtectionSourceRegistrationOptions)
				updateProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionSourceRegistrationOptionsModel.Name = core.StringPtr("update-protection-source")
				updateProtectionSourceRegistrationOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				updateProtectionSourceRegistrationOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				updateProtectionSourceRegistrationOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				updateProtectionSourceRegistrationOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionSourceRegistrationOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				updateProtectionSourceRegistrationOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				updateProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateProtectionSourceRegistration with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the UpdateProtectionSourceRegistrationOptions model
				updateProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.UpdateProtectionSourceRegistrationOptions)
				updateProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionSourceRegistrationOptionsModel.Name = core.StringPtr("update-protection-source")
				updateProtectionSourceRegistrationOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				updateProtectionSourceRegistrationOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				updateProtectionSourceRegistrationOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				updateProtectionSourceRegistrationOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionSourceRegistrationOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				updateProtectionSourceRegistrationOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				updateProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateProtectionSourceRegistrationOptions model with no property values
				updateProtectionSourceRegistrationOptionsModelNew := new(backuprecoveryv1.UpdateProtectionSourceRegistrationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateProtectionSourceRegistration successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}

				// Construct an instance of the UpdateProtectionSourceRegistrationOptions model
				updateProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.UpdateProtectionSourceRegistrationOptions)
				updateProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				updateProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				updateProtectionSourceRegistrationOptionsModel.Name = core.StringPtr("update-protection-source")
				updateProtectionSourceRegistrationOptionsModel.IsInternalEncrypted = core.BoolPtr(true)
				updateProtectionSourceRegistrationOptionsModel.EncryptionKey = core.StringPtr("encryptionKey")
				updateProtectionSourceRegistrationOptionsModel.ConnectionID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.Connections = []backuprecoveryv1.ConnectionConfig{*connectionConfigModel}
				updateProtectionSourceRegistrationOptionsModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.AdvancedConfigs = []backuprecoveryv1.KeyValuePair{*keyValuePairModel}
				updateProtectionSourceRegistrationOptionsModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				updateProtectionSourceRegistrationOptionsModel.LastModifiedTimestampUsecs = core.Int64Ptr(int64(26))
				updateProtectionSourceRegistrationOptionsModel.PhysicalParams = physicalSourceRegistrationParamsModel
				updateProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.UpdateProtectionSourceRegistration(updateProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptions *PatchProtectionSourceRegistrationOptions) - Operation response error`, func() {
		patchProtectionSourceRegistrationPath := "/data-protect/sources/registrations/26"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PatchProtectionSourceRegistration with error: Operation response processing error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchProtectionSourceRegistrationOptions model
				patchProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.PatchProtectionSourceRegistrationOptions)
				patchProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				patchProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				patchProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := backupRecoveryService.PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				backupRecoveryService.EnableRetries(0, 0)
				result, response, operationErr = backupRecoveryService.PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptions *PatchProtectionSourceRegistrationOptions)`, func() {
		patchProtectionSourceRegistrationPath := "/data-protect/sources/registrations/26"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))
			})
			It(`Invoke PatchProtectionSourceRegistration successfully with retries`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())
				backupRecoveryService.EnableRetries(0, 0)

				// Construct an instance of the PatchProtectionSourceRegistrationOptions model
				patchProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.PatchProtectionSourceRegistrationOptions)
				patchProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				patchProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				patchProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := backupRecoveryService.PatchProtectionSourceRegistrationWithContext(ctx, patchProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				backupRecoveryService.DisableRetries()
				result, response, operationErr := backupRecoveryService.PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = backupRecoveryService.PatchProtectionSourceRegistrationWithContext(ctx, patchProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 2, "sourceId": 8, "sourceInfo": {"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "childObjects": [{"id": 2, "name": "Name", "sourceId": 8, "sourceName": "SourceName", "environment": "kPhysical", "objectHash": "ObjectHash", "objectType": "kCluster", "logicalSizeBytes": 16, "uuid": "UUID", "globalId": "GlobalID", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "SiteWebURL"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "ClusterSourceType"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 14, "unprotectedCount": 16, "deletedProtectedCount": 21, "protectedSizeBytes": 18, "unprotectedSizeBytes": 20}], "permissions": {"objectId": 8, "users": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "groups": [{"name": "Name", "sid": "Sid", "domain": "Domain"}], "tenant": {"createdAtTimeMsecs": 18, "deletedAtTimeMsecs": 18, "description": "Description", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "AccountID", "crn": "Crn", "customProperties": [{"key": "Key", "value": "Value"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "ResourceURL"}, "iamMetricsConfig": {"IAMUrl": "IAMURL", "billingApiKeySecretId": "BillingApiKeySecretID"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 24, "url": "URL"}}, "ownershipMode": "Primary", "planId": "PlanID", "resourceGroupId": "ResourceGroupID", "resourceInstanceId": "ResourceInstanceID"}, "type": "IBM"}, "id": "ID", "isManagedOnHelios": false, "lastUpdatedAtTimeMsecs": 22, "name": "Name", "network": {"connectorEnabled": true, "clusterHostname": "ClusterHostname", "clusterIps": ["ClusterIps"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "Name", "objectId": 8}, "hostInfo": {"id": "ID", "name": "Name", "environment": "kPhysical"}, "isEncrypted": false}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "Name", "connectionId": 12, "connections": [{"connectionId": 12, "entityId": 8, "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID"}], "connectorGroupId": 16, "dataSourceConnectionId": "DataSourceConnectionID", "advancedConfigs": [{"key": "Key", "value": "Value"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 21, "lastRefreshedTimeMsecs": 22, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 4, "minute": 6}, "startTime": {"hour": 4, "minute": 6}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 12, "startTimeUsecs": 14}], "timezone": "Timezone"}, "userMessage": "UserMessage", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "Endpoint", "forceRegister": false, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))
			})
			It(`Invoke PatchProtectionSourceRegistration successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := backupRecoveryService.PatchProtectionSourceRegistration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PatchProtectionSourceRegistrationOptions model
				patchProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.PatchProtectionSourceRegistrationOptions)
				patchProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				patchProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				patchProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = backupRecoveryService.PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PatchProtectionSourceRegistration with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchProtectionSourceRegistrationOptions model
				patchProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.PatchProtectionSourceRegistrationOptions)
				patchProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				patchProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				patchProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := backupRecoveryService.PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PatchProtectionSourceRegistrationOptions model with no property values
				patchProtectionSourceRegistrationOptionsModelNew := new(backuprecoveryv1.PatchProtectionSourceRegistrationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = backupRecoveryService.PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PatchProtectionSourceRegistration successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the PatchProtectionSourceRegistrationOptions model
				patchProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.PatchProtectionSourceRegistrationOptions)
				patchProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				patchProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				patchProtectionSourceRegistrationOptionsModel.Environment = core.StringPtr("kPhysical")
				patchProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := backupRecoveryService.PatchProtectionSourceRegistration(patchProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteProtectionSourceRegistration(deleteProtectionSourceRegistrationOptions *DeleteProtectionSourceRegistrationOptions)`, func() {
		deleteProtectionSourceRegistrationPath := "/data-protect/sources/registrations/26"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteProtectionSourceRegistrationPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteProtectionSourceRegistration successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := backupRecoveryService.DeleteProtectionSourceRegistration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteProtectionSourceRegistrationOptions model
				deleteProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.DeleteProtectionSourceRegistrationOptions)
				deleteProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				deleteProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = backupRecoveryService.DeleteProtectionSourceRegistration(deleteProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteProtectionSourceRegistration with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the DeleteProtectionSourceRegistrationOptions model
				deleteProtectionSourceRegistrationOptionsModel := new(backuprecoveryv1.DeleteProtectionSourceRegistrationOptions)
				deleteProtectionSourceRegistrationOptionsModel.ID = core.Int64Ptr(int64(26))
				deleteProtectionSourceRegistrationOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				deleteProtectionSourceRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := backupRecoveryService.DeleteProtectionSourceRegistration(deleteProtectionSourceRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteProtectionSourceRegistrationOptions model with no property values
				deleteProtectionSourceRegistrationOptionsModelNew := new(backuprecoveryv1.DeleteProtectionSourceRegistrationOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = backupRecoveryService.DeleteProtectionSourceRegistration(deleteProtectionSourceRegistrationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RefreshProtectionSourceByID(refreshProtectionSourceByIdOptions *RefreshProtectionSourceByIdOptions)`, func() {
		refreshProtectionSourceByIDPath := "/data-protect/sources/26/refresh"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(refreshProtectionSourceByIDPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["X-Ibm-Tenant-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Ibm-Tenant-Id"][0]).To(Equal(fmt.Sprintf("%v", "tenantId")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RefreshProtectionSourceByID successfully`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := backupRecoveryService.RefreshProtectionSourceByID(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RefreshProtectionSourceByIdOptions model
				refreshProtectionSourceByIdOptionsModel := new(backuprecoveryv1.RefreshProtectionSourceByIdOptions)
				refreshProtectionSourceByIdOptionsModel.ID = core.Int64Ptr(int64(26))
				refreshProtectionSourceByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				refreshProtectionSourceByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = backupRecoveryService.RefreshProtectionSourceByID(refreshProtectionSourceByIdOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RefreshProtectionSourceByID with error: Operation validation and request error`, func() {
				backupRecoveryService, serviceErr := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(backupRecoveryService).ToNot(BeNil())

				// Construct an instance of the RefreshProtectionSourceByIdOptions model
				refreshProtectionSourceByIdOptionsModel := new(backuprecoveryv1.RefreshProtectionSourceByIdOptions)
				refreshProtectionSourceByIdOptionsModel.ID = core.Int64Ptr(int64(26))
				refreshProtectionSourceByIdOptionsModel.XIBMTenantID = core.StringPtr("tenantId")
				refreshProtectionSourceByIdOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := backupRecoveryService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := backupRecoveryService.RefreshProtectionSourceByID(refreshProtectionSourceByIdOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RefreshProtectionSourceByIdOptions model with no property values
				refreshProtectionSourceByIdOptionsModelNew := new(backuprecoveryv1.RefreshProtectionSourceByIdOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = backupRecoveryService.RefreshProtectionSourceByID(refreshProtectionSourceByIdOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			backupRecoveryService, _ := backuprecoveryv1.NewBackupRecoveryV1(&backuprecoveryv1.BackupRecoveryV1Options{
				URL:           "http://backuprecoveryv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewAWSTargetConfig successfully`, func() {
				region := int64(26)
				sourceID := int64(26)
				_model, err := backupRecoveryService.NewAWSTargetConfig(region, sourceID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAWSTier successfully`, func() {
				tierType := "kAmazonS3Standard"
				_model, err := backupRecoveryService.NewAWSTier(tierType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAWSTiers successfully`, func() {
				tiers := []backuprecoveryv1.AWSTier{}
				_model, err := backupRecoveryService.NewAWSTiers(tiers)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAlertTarget successfully`, func() {
				emailAddress := "testString"
				_model, err := backupRecoveryService.NewAlertTarget(emailAddress)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewArchivalTargetConfiguration successfully`, func() {
				var schedule *backuprecoveryv1.TargetSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				targetID := int64(26)
				_, err := backupRecoveryService.NewArchivalTargetConfiguration(schedule, retention, targetID)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewAwsCloudSpinParams successfully`, func() {
				region := int64(26)
				_model, err := backupRecoveryService.NewAwsCloudSpinParams(region)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAzureTargetConfig successfully`, func() {
				sourceID := int64(26)
				_model, err := backupRecoveryService.NewAzureTargetConfig(sourceID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAzureTier successfully`, func() {
				tierType := "kAzureTierHot"
				_model, err := backupRecoveryService.NewAzureTier(tierType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewBackupPolicy successfully`, func() {
				var regular *backuprecoveryv1.RegularBackupPolicy = nil
				_, err := backupRecoveryService.NewBackupPolicy(regular)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewBlackoutWindow successfully`, func() {
				day := "Sunday"
				var startTime *backuprecoveryv1.TimeOfDay = nil
				var endTime *backuprecoveryv1.TimeOfDay = nil
				_, err := backupRecoveryService.NewBlackoutWindow(day, startTime, endTime)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewBmrBackupPolicy successfully`, func() {
				var schedule *backuprecoveryv1.BmrSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				_, err := backupRecoveryService.NewBmrBackupPolicy(schedule, retention)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewBmrSchedule successfully`, func() {
				unit := "Days"
				_model, err := backupRecoveryService.NewBmrSchedule(unit)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCancelProtectionGroupRunRequest successfully`, func() {
				runID := "testString"
				_model, err := backupRecoveryService.NewCancelProtectionGroupRunRequest(runID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCascadedTargetConfiguration successfully`, func() {
				sourceClusterID := int64(26)
				var remoteTargets *backuprecoveryv1.TargetsConfiguration = nil
				_, err := backupRecoveryService.NewCascadedTargetConfiguration(sourceClusterID, remoteTargets)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCassandraOnPremSearchParams successfully`, func() {
				cassandraObjectTypes := []string{"CassandraKeyspaces"}
				searchString := "testString"
				_model, err := backupRecoveryService.NewCassandraOnPremSearchParams(cassandraObjectTypes, searchString)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCdpBackupPolicy successfully`, func() {
				var retention *backuprecoveryv1.CdpRetention = nil
				_, err := backupRecoveryService.NewCdpBackupPolicy(retention)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCdpRetention successfully`, func() {
				unit := "Minutes"
				duration := int64(1)
				_model, err := backupRecoveryService.NewCdpRetention(unit, duration)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCloudSpinTargetConfiguration successfully`, func() {
				var schedule *backuprecoveryv1.TargetSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				var target *backuprecoveryv1.CloudSpinTarget = nil
				_, err := backupRecoveryService.NewCloudSpinTargetConfiguration(schedule, retention, target)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCommonPostBackupScriptParams successfully`, func() {
				path := "testString"
				_model, err := backupRecoveryService.NewCommonPostBackupScriptParams(path)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCommonPreBackupScriptParams successfully`, func() {
				path := "testString"
				_model, err := backupRecoveryService.NewCommonPreBackupScriptParams(path)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCommonRecoverFileAndFolderInfo successfully`, func() {
				absolutePath := "testString"
				_model, err := backupRecoveryService.NewCommonRecoverFileAndFolderInfo(absolutePath)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCommonRecoverObjectSnapshotParams successfully`, func() {
				snapshotID := "testString"
				_model, err := backupRecoveryService.NewCommonRecoverObjectSnapshotParams(snapshotID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCouchBaseOnPremSearchParams successfully`, func() {
				couchbaseObjectTypes := []string{"CouchbaseBuckets"}
				searchString := "testString"
				_model, err := backupRecoveryService.NewCouchBaseOnPremSearchParams(couchbaseObjectTypes, searchString)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCreateDataSourceConnectionOptions successfully`, func() {
				// Construct an instance of the CreateDataSourceConnectionOptions model
				createDataSourceConnectionOptionsConnectionName := "data-source-connection"
				createDataSourceConnectionOptionsModel := backupRecoveryService.NewCreateDataSourceConnectionOptions(createDataSourceConnectionOptionsConnectionName)
				createDataSourceConnectionOptionsModel.SetConnectionName("data-source-connection")
				createDataSourceConnectionOptionsModel.SetXIBMTenantID("tenantId")
				createDataSourceConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDataSourceConnectionOptionsModel).ToNot(BeNil())
				Expect(createDataSourceConnectionOptionsModel.ConnectionName).To(Equal(core.StringPtr("data-source-connection")))
				Expect(createDataSourceConnectionOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(createDataSourceConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateDownloadFilesAndFoldersRecoveryOptions successfully`, func() {
				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				Expect(commonRecoverObjectSnapshotParamsModel).ToNot(BeNil())
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotId")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)
				Expect(commonRecoverObjectSnapshotParamsModel.SnapshotID).To(Equal(core.StringPtr("snapshotId")))
				Expect(commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(commonRecoverObjectSnapshotParamsModel.ProtectionGroupID).To(Equal(core.StringPtr("protectionGroupId")))
				Expect(commonRecoverObjectSnapshotParamsModel.ProtectionGroupName).To(Equal(core.StringPtr("protectionGroupName")))
				Expect(commonRecoverObjectSnapshotParamsModel.RecoverFromStandby).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the FilesAndFoldersObject model
				filesAndFoldersObjectModel := new(backuprecoveryv1.FilesAndFoldersObject)
				Expect(filesAndFoldersObjectModel).ToNot(BeNil())
				filesAndFoldersObjectModel.AbsolutePath = core.StringPtr("~/home/dir1")
				filesAndFoldersObjectModel.IsDirectory = core.BoolPtr(true)
				Expect(filesAndFoldersObjectModel.AbsolutePath).To(Equal(core.StringPtr("~/home/dir1")))
				Expect(filesAndFoldersObjectModel.IsDirectory).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the DocumentObject model
				documentObjectModel := new(backuprecoveryv1.DocumentObject)
				Expect(documentObjectModel).ToNot(BeNil())
				documentObjectModel.IsDirectory = core.BoolPtr(true)
				documentObjectModel.ItemID = core.StringPtr("item1")
				Expect(documentObjectModel.IsDirectory).To(Equal(core.BoolPtr(true)))
				Expect(documentObjectModel.ItemID).To(Equal(core.StringPtr("item1")))

				// Construct an instance of the CreateDownloadFilesAndFoldersRecoveryOptions model
				xIbmTenantID := "tenantId"
				createDownloadFilesAndFoldersRecoveryOptionsName := "create-download-files-and-folders-recovery"
				var createDownloadFilesAndFoldersRecoveryOptionsObject *backuprecoveryv1.CommonRecoverObjectSnapshotParams = nil
				createDownloadFilesAndFoldersRecoveryOptionsFilesAndFolders := []backuprecoveryv1.FilesAndFoldersObject{}
				createDownloadFilesAndFoldersRecoveryOptionsModel := backupRecoveryService.NewCreateDownloadFilesAndFoldersRecoveryOptions(xIbmTenantID, createDownloadFilesAndFoldersRecoveryOptionsName, createDownloadFilesAndFoldersRecoveryOptionsObject, createDownloadFilesAndFoldersRecoveryOptionsFilesAndFolders)
				createDownloadFilesAndFoldersRecoveryOptionsModel.SetXIBMTenantID("tenantId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.SetName("create-download-files-and-folders-recovery")
				createDownloadFilesAndFoldersRecoveryOptionsModel.SetObject(commonRecoverObjectSnapshotParamsModel)
				createDownloadFilesAndFoldersRecoveryOptionsModel.SetFilesAndFolders([]backuprecoveryv1.FilesAndFoldersObject{*filesAndFoldersObjectModel})
				createDownloadFilesAndFoldersRecoveryOptionsModel.SetDocuments([]backuprecoveryv1.DocumentObject{*documentObjectModel})
				createDownloadFilesAndFoldersRecoveryOptionsModel.SetParentRecoveryID("parentRecoveryId")
				createDownloadFilesAndFoldersRecoveryOptionsModel.SetGlacierRetrievalType("kStandard")
				createDownloadFilesAndFoldersRecoveryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel).ToNot(BeNil())
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel.Name).To(Equal(core.StringPtr("create-download-files-and-folders-recovery")))
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel.Object).To(Equal(commonRecoverObjectSnapshotParamsModel))
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel.FilesAndFolders).To(Equal([]backuprecoveryv1.FilesAndFoldersObject{*filesAndFoldersObjectModel}))
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel.Documents).To(Equal([]backuprecoveryv1.DocumentObject{*documentObjectModel}))
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel.ParentRecoveryID).To(Equal(core.StringPtr("parentRecoveryId")))
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel.GlacierRetrievalType).To(Equal(core.StringPtr("kStandard")))
				Expect(createDownloadFilesAndFoldersRecoveryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateProtectionGroupOptions successfully`, func() {
				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				Expect(timeOfDayModel).ToNot(BeNil())
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")
				Expect(timeOfDayModel.Hour).To(Equal(core.Int64Ptr(int64(0))))
				Expect(timeOfDayModel.Minute).To(Equal(core.Int64Ptr(int64(0))))
				Expect(timeOfDayModel.TimeZone).To(Equal(core.StringPtr("America/Los_Angeles")))

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				Expect(alertTargetModel).ToNot(BeNil())
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")
				Expect(alertTargetModel.EmailAddress).To(Equal(core.StringPtr("alert1@domain.com")))
				Expect(alertTargetModel.Language).To(Equal(core.StringPtr("en-us")))
				Expect(alertTargetModel.RecipientType).To(Equal(core.StringPtr("kTo")))

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				Expect(protectionGroupAlertingPolicyModel).ToNot(BeNil())
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)
				Expect(protectionGroupAlertingPolicyModel.BackupRunStatus).To(Equal([]string{"kSuccess"}))
				Expect(protectionGroupAlertingPolicyModel.AlertTargets).To(Equal([]backuprecoveryv1.AlertTarget{*alertTargetModel}))
				Expect(protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert).To(Equal(core.BoolPtr(true)))
				Expect(protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt).To(Equal(core.BoolPtr(true)))
				Expect(protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				Expect(slaRuleModel).ToNot(BeNil())
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))
				Expect(slaRuleModel.BackupRunType).To(Equal(core.StringPtr("kIncremental")))
				Expect(slaRuleModel.SlaMinutes).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				Expect(keyValuePairModel).ToNot(BeNil())
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")
				Expect(keyValuePairModel.Key).To(Equal(core.StringPtr("configKey")))
				Expect(keyValuePairModel.Value).To(Equal(core.StringPtr("configValue")))

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				Expect(physicalVolumeProtectionGroupObjectParamsModel).ToNot(BeNil())
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				Expect(physicalVolumeProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(3))))
				Expect(physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids).To(Equal([]string{"volumeGuid1"}))
				Expect(physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters).To(Equal([]string{"writerName1", "writerName2"}))

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				Expect(indexingPolicyModel).ToNot(BeNil())
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}
				Expect(indexingPolicyModel.EnableIndexing).To(Equal(core.BoolPtr(true)))
				Expect(indexingPolicyModel.IncludePaths).To(Equal([]string{"~/dir1"}))
				Expect(indexingPolicyModel.ExcludePaths).To(Equal([]string{"~/dir2"}))

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				Expect(commonPreBackupScriptParamsModel).ToNot(BeNil())
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)
				Expect(commonPreBackupScriptParamsModel.Path).To(Equal(core.StringPtr("~/script1")))
				Expect(commonPreBackupScriptParamsModel.Params).To(Equal(core.StringPtr("param1")))
				Expect(commonPreBackupScriptParamsModel.TimeoutSecs).To(Equal(core.Int64Ptr(int64(1))))
				Expect(commonPreBackupScriptParamsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(commonPreBackupScriptParamsModel.ContinueOnError).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				Expect(commonPostBackupScriptParamsModel).ToNot(BeNil())
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				Expect(commonPostBackupScriptParamsModel.Path).To(Equal(core.StringPtr("~/script2")))
				Expect(commonPostBackupScriptParamsModel.Params).To(Equal(core.StringPtr("param2")))
				Expect(commonPostBackupScriptParamsModel.TimeoutSecs).To(Equal(core.Int64Ptr(int64(1))))
				Expect(commonPostBackupScriptParamsModel.IsActive).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				Expect(prePostScriptParamsModel).ToNot(BeNil())
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel
				Expect(prePostScriptParamsModel.PreScript).To(Equal(commonPreBackupScriptParamsModel))
				Expect(prePostScriptParamsModel.PostScript).To(Equal(commonPostBackupScriptParamsModel))

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				Expect(physicalVolumeProtectionGroupParamsModel).ToNot(BeNil())
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				Expect(physicalVolumeProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}))
				Expect(physicalVolumeProtectionGroupParamsModel.IndexingPolicy).To(Equal(indexingPolicyModel))
				Expect(physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupParamsModel.Quiesce).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds).To(Equal([]int64{int64(26)}))
				Expect(physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters).To(Equal([]string{"writerName1", "writerName2"}))
				Expect(physicalVolumeProtectionGroupParamsModel.CobmrBackup).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				Expect(physicalFileBackupPathParamsModel).ToNot(BeNil())
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)
				Expect(physicalFileBackupPathParamsModel.IncludedPath).To(Equal(core.StringPtr("~/dir1/")))
				Expect(physicalFileBackupPathParamsModel.ExcludedPaths).To(Equal([]string{"~/dir2"}))
				Expect(physicalFileBackupPathParamsModel.SkipNestedVolumes).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				Expect(physicalFileProtectionGroupObjectParamsModel).ToNot(BeNil())
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")
				Expect(physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters).To(Equal([]string{"writerName1", "writerName2"}))
				Expect(physicalFileProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(2))))
				Expect(physicalFileProtectionGroupObjectParamsModel.FilePaths).To(Equal([]backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}))
				Expect(physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip).To(Equal([]string{"volume1"}))
				Expect(physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupObjectParamsModel.MetadataFilePath).To(Equal(core.StringPtr("~/dir3")))

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				Expect(cancellationTimeoutParamsModel).ToNot(BeNil())
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")
				Expect(cancellationTimeoutParamsModel.TimeoutMins).To(Equal(core.Int64Ptr(int64(26))))
				Expect(cancellationTimeoutParamsModel.BackupType).To(Equal(core.StringPtr("kRegular")))

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				Expect(physicalFileProtectionGroupParamsModel).ToNot(BeNil())
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)
				Expect(physicalFileProtectionGroupParamsModel.ExcludedVssWriters).To(Equal([]string{"writerName1", "writerName2"}))
				Expect(physicalFileProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}))
				Expect(physicalFileProtectionGroupParamsModel.IndexingPolicy).To(Equal(indexingPolicyModel))
				Expect(physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.TaskTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(physicalFileProtectionGroupParamsModel.Quiesce).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.CobmrBackup).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds).To(Equal([]int64{int64(26)}))
				Expect(physicalFileProtectionGroupParamsModel.GlobalExcludePaths).To(Equal([]string{"~/dir1"}))
				Expect(physicalFileProtectionGroupParamsModel.GlobalExcludeFS).To(Equal([]string{"~/dir2"}))
				Expect(physicalFileProtectionGroupParamsModel.IgnorableErrors).To(Equal([]string{"kEOF"}))
				Expect(physicalFileProtectionGroupParamsModel.AllowParallelRuns).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				Expect(physicalProtectionGroupParamsModel).ToNot(BeNil())
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel
				Expect(physicalProtectionGroupParamsModel.ProtectionType).To(Equal(core.StringPtr("kFile")))
				Expect(physicalProtectionGroupParamsModel.VolumeProtectionTypeParams).To(Equal(physicalVolumeProtectionGroupParamsModel))
				Expect(physicalProtectionGroupParamsModel.FileProtectionTypeParams).To(Equal(physicalFileProtectionGroupParamsModel))

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				Expect(advancedSettingsModel).ToNot(BeNil())
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")
				Expect(advancedSettingsModel.ClonedDbBackupStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.DbBackupIfNotOnlineStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.MissingDbBackupStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.OfflineRestoringDbBackupStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.ReadOnlyDbBackupStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.ReportAllNonAutoprotectDbErrors).To(Equal(core.StringPtr("kError")))

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				Expect(filterModel).ToNot(BeNil())
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)
				Expect(filterModel.FilterString).To(Equal(core.StringPtr("filterString")))
				Expect(filterModel.IsRegularExpression).To(Equal(core.BoolPtr(false)))

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				Expect(mssqlFileProtectionGroupHostParamsModel).ToNot(BeNil())
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))
				Expect(mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication).To(Equal(core.BoolPtr(true)))
				Expect(mssqlFileProtectionGroupHostParamsModel.HostID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				Expect(mssqlFileProtectionGroupObjectParamsModel).ToNot(BeNil())
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))
				Expect(mssqlFileProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(6))))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				Expect(mssqlFileProtectionGroupParamsModel).ToNot(BeNil())
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				Expect(mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType).To(Equal(core.StringPtr("kPrimaryReplicaOnly")))
				Expect(mssqlFileProtectionGroupParamsModel.AdvancedSettings).To(Equal(advancedSettingsModel))
				Expect(mssqlFileProtectionGroupParamsModel.BackupSystemDbs).To(Equal(core.BoolPtr(true)))
				Expect(mssqlFileProtectionGroupParamsModel.ExcludeFilters).To(Equal([]backuprecoveryv1.Filter{*filterModel}))
				Expect(mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly).To(Equal(core.BoolPtr(true)))
				Expect(mssqlFileProtectionGroupParamsModel.LogBackupNumStreams).To(Equal(core.Int64Ptr(int64(38))))
				Expect(mssqlFileProtectionGroupParamsModel.LogBackupWithClause).To(Equal(core.StringPtr("backupWithClause")))
				Expect(mssqlFileProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer).To(Equal(core.BoolPtr(true)))
				Expect(mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType).To(Equal(core.StringPtr("kBackupAllDatabases")))
				Expect(mssqlFileProtectionGroupParamsModel.AdditionalHostParams).To(Equal([]backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}))
				Expect(mssqlFileProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}))
				Expect(mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				Expect(mssqlNativeProtectionGroupObjectParamsModel).ToNot(BeNil())
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))
				Expect(mssqlNativeProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(6))))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				Expect(mssqlNativeProtectionGroupParamsModel).ToNot(BeNil())
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")
				Expect(mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType).To(Equal(core.StringPtr("kPrimaryReplicaOnly")))
				Expect(mssqlNativeProtectionGroupParamsModel.AdvancedSettings).To(Equal(advancedSettingsModel))
				Expect(mssqlNativeProtectionGroupParamsModel.BackupSystemDbs).To(Equal(core.BoolPtr(true)))
				Expect(mssqlNativeProtectionGroupParamsModel.ExcludeFilters).To(Equal([]backuprecoveryv1.Filter{*filterModel}))
				Expect(mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly).To(Equal(core.BoolPtr(true)))
				Expect(mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams).To(Equal(core.Int64Ptr(int64(38))))
				Expect(mssqlNativeProtectionGroupParamsModel.LogBackupWithClause).To(Equal(core.StringPtr("backupWithClause")))
				Expect(mssqlNativeProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer).To(Equal(core.BoolPtr(true)))
				Expect(mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType).To(Equal(core.StringPtr("kBackupAllDatabases")))
				Expect(mssqlNativeProtectionGroupParamsModel.NumStreams).To(Equal(core.Int64Ptr(int64(38))))
				Expect(mssqlNativeProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}))
				Expect(mssqlNativeProtectionGroupParamsModel.WithClause).To(Equal(core.StringPtr("withClause")))

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				Expect(mssqlVolumeProtectionGroupHostParamsModel).ToNot(BeNil())
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}
				Expect(mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupHostParamsModel.HostID).To(Equal(core.Int64Ptr(int64(8))))
				Expect(mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids).To(Equal([]string{"volumeGuid1"}))

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				Expect(mssqlVolumeProtectionGroupObjectParamsModel).ToNot(BeNil())
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))
				Expect(mssqlVolumeProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(6))))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				Expect(mssqlVolumeProtectionGroupParamsModel).ToNot(BeNil())
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}
				Expect(mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType).To(Equal(core.StringPtr("kPrimaryReplicaOnly")))
				Expect(mssqlVolumeProtectionGroupParamsModel.AdvancedSettings).To(Equal(advancedSettingsModel))
				Expect(mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.ExcludeFilters).To(Equal([]backuprecoveryv1.Filter{*filterModel}))
				Expect(mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams).To(Equal(core.Int64Ptr(int64(38))))
				Expect(mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause).To(Equal(core.StringPtr("backupWithClause")))
				Expect(mssqlVolumeProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType).To(Equal(core.StringPtr("kBackupAllDatabases")))
				Expect(mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams).To(Equal([]backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}))
				Expect(mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.IndexingPolicy).To(Equal(indexingPolicyModel))
				Expect(mssqlVolumeProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}))

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				Expect(mssqlProtectionGroupParamsModel).ToNot(BeNil())
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel
				Expect(mssqlProtectionGroupParamsModel.FileProtectionTypeParams).To(Equal(mssqlFileProtectionGroupParamsModel))
				Expect(mssqlProtectionGroupParamsModel.NativeProtectionTypeParams).To(Equal(mssqlNativeProtectionGroupParamsModel))
				Expect(mssqlProtectionGroupParamsModel.ProtectionType).To(Equal(core.StringPtr("kFile")))
				Expect(mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams).To(Equal(mssqlVolumeProtectionGroupParamsModel))

				// Construct an instance of the CreateProtectionGroupOptions model
				xIbmTenantID := "tenantId"
				createProtectionGroupOptionsName := "create-protection-group"
				createProtectionGroupOptionsPolicyID := "xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx"
				createProtectionGroupOptionsEnvironment := "kPhysical"
				createProtectionGroupOptionsModel := backupRecoveryService.NewCreateProtectionGroupOptions(xIbmTenantID, createProtectionGroupOptionsName, createProtectionGroupOptionsPolicyID, createProtectionGroupOptionsEnvironment)
				createProtectionGroupOptionsModel.SetXIBMTenantID("tenantId")
				createProtectionGroupOptionsModel.SetName("create-protection-group")
				createProtectionGroupOptionsModel.SetPolicyID("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				createProtectionGroupOptionsModel.SetEnvironment("kPhysical")
				createProtectionGroupOptionsModel.SetPriority("kLow")
				createProtectionGroupOptionsModel.SetDescription("Protection Group")
				createProtectionGroupOptionsModel.SetStartTime(timeOfDayModel)
				createProtectionGroupOptionsModel.SetEndTimeUsecs(int64(26))
				createProtectionGroupOptionsModel.SetLastModifiedTimestampUsecs(int64(26))
				createProtectionGroupOptionsModel.SetAlertPolicy(protectionGroupAlertingPolicyModel)
				createProtectionGroupOptionsModel.SetSla([]backuprecoveryv1.SlaRule{*slaRuleModel})
				createProtectionGroupOptionsModel.SetQosPolicy("kBackupHDD")
				createProtectionGroupOptionsModel.SetAbortInBlackouts(true)
				createProtectionGroupOptionsModel.SetPauseInBlackouts(true)
				createProtectionGroupOptionsModel.SetIsPaused(true)
				createProtectionGroupOptionsModel.SetAdvancedConfigs([]backuprecoveryv1.KeyValuePair{*keyValuePairModel})
				createProtectionGroupOptionsModel.SetPhysicalParams(physicalProtectionGroupParamsModel)
				createProtectionGroupOptionsModel.SetMssqlParams(mssqlProtectionGroupParamsModel)
				createProtectionGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createProtectionGroupOptionsModel).ToNot(BeNil())
				Expect(createProtectionGroupOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(createProtectionGroupOptionsModel.Name).To(Equal(core.StringPtr("create-protection-group")))
				Expect(createProtectionGroupOptionsModel.PolicyID).To(Equal(core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")))
				Expect(createProtectionGroupOptionsModel.Environment).To(Equal(core.StringPtr("kPhysical")))
				Expect(createProtectionGroupOptionsModel.Priority).To(Equal(core.StringPtr("kLow")))
				Expect(createProtectionGroupOptionsModel.Description).To(Equal(core.StringPtr("Protection Group")))
				Expect(createProtectionGroupOptionsModel.StartTime).To(Equal(timeOfDayModel))
				Expect(createProtectionGroupOptionsModel.EndTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createProtectionGroupOptionsModel.LastModifiedTimestampUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createProtectionGroupOptionsModel.AlertPolicy).To(Equal(protectionGroupAlertingPolicyModel))
				Expect(createProtectionGroupOptionsModel.Sla).To(Equal([]backuprecoveryv1.SlaRule{*slaRuleModel}))
				Expect(createProtectionGroupOptionsModel.QosPolicy).To(Equal(core.StringPtr("kBackupHDD")))
				Expect(createProtectionGroupOptionsModel.AbortInBlackouts).To(Equal(core.BoolPtr(true)))
				Expect(createProtectionGroupOptionsModel.PauseInBlackouts).To(Equal(core.BoolPtr(true)))
				Expect(createProtectionGroupOptionsModel.IsPaused).To(Equal(core.BoolPtr(true)))
				Expect(createProtectionGroupOptionsModel.AdvancedConfigs).To(Equal([]backuprecoveryv1.KeyValuePair{*keyValuePairModel}))
				Expect(createProtectionGroupOptionsModel.PhysicalParams).To(Equal(physicalProtectionGroupParamsModel))
				Expect(createProtectionGroupOptionsModel.MssqlParams).To(Equal(mssqlProtectionGroupParamsModel))
				Expect(createProtectionGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateProtectionGroupRunOptions successfully`, func() {
				// Construct an instance of the RunObjectPhysicalParams model
				runObjectPhysicalParamsModel := new(backuprecoveryv1.RunObjectPhysicalParams)
				Expect(runObjectPhysicalParamsModel).ToNot(BeNil())
				runObjectPhysicalParamsModel.MetadataFilePath = core.StringPtr("~/metadata")
				Expect(runObjectPhysicalParamsModel.MetadataFilePath).To(Equal(core.StringPtr("~/metadata")))

				// Construct an instance of the RunObject model
				runObjectModel := new(backuprecoveryv1.RunObject)
				Expect(runObjectModel).ToNot(BeNil())
				runObjectModel.ID = core.Int64Ptr(int64(4))
				runObjectModel.AppIds = []int64{int64(26)}
				runObjectModel.PhysicalParams = runObjectPhysicalParamsModel
				Expect(runObjectModel.ID).To(Equal(core.Int64Ptr(int64(4))))
				Expect(runObjectModel.AppIds).To(Equal([]int64{int64(26)}))
				Expect(runObjectModel.PhysicalParams).To(Equal(runObjectPhysicalParamsModel))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				Expect(dataLockConfigModel).ToNot(BeNil())
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)
				Expect(dataLockConfigModel.Mode).To(Equal(core.StringPtr("Compliance")))
				Expect(dataLockConfigModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(dataLockConfigModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(dataLockConfigModel.EnableWormOnExternalTarget).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				Expect(retentionModel).ToNot(BeNil())
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel
				Expect(retentionModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(retentionModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(retentionModel.DataLockConfig).To(Equal(dataLockConfigModel))

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				Expect(runReplicationConfigModel).ToNot(BeNil())
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel
				Expect(runReplicationConfigModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(runReplicationConfigModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				Expect(runArchivalConfigModel).ToNot(BeNil())
				runArchivalConfigModel.ID = core.Int64Ptr(int64(26))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)
				Expect(runArchivalConfigModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(runArchivalConfigModel.ArchivalTargetType).To(Equal(core.StringPtr("Tape")))
				Expect(runArchivalConfigModel.Retention).To(Equal(retentionModel))
				Expect(runArchivalConfigModel.CopyOnlyFullySuccessful).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				Expect(awsTargetConfigModel).ToNot(BeNil())
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))
				Expect(awsTargetConfigModel.Region).To(Equal(core.Int64Ptr(int64(26))))
				Expect(awsTargetConfigModel.SourceID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				Expect(azureTargetConfigModel).ToNot(BeNil())
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))
				Expect(azureTargetConfigModel.ResourceGroup).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureTargetConfigModel.SourceID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the RunCloudReplicationConfig model
				runCloudReplicationConfigModel := new(backuprecoveryv1.RunCloudReplicationConfig)
				Expect(runCloudReplicationConfigModel).ToNot(BeNil())
				runCloudReplicationConfigModel.AwsTarget = awsTargetConfigModel
				runCloudReplicationConfigModel.AzureTarget = azureTargetConfigModel
				runCloudReplicationConfigModel.TargetType = core.StringPtr("AWS")
				runCloudReplicationConfigModel.Retention = retentionModel
				Expect(runCloudReplicationConfigModel.AwsTarget).To(Equal(awsTargetConfigModel))
				Expect(runCloudReplicationConfigModel.AzureTarget).To(Equal(azureTargetConfigModel))
				Expect(runCloudReplicationConfigModel.TargetType).To(Equal(core.StringPtr("AWS")))
				Expect(runCloudReplicationConfigModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the RunTargetsConfiguration model
				runTargetsConfigurationModel := new(backuprecoveryv1.RunTargetsConfiguration)
				Expect(runTargetsConfigurationModel).ToNot(BeNil())
				runTargetsConfigurationModel.UsePolicyDefaults = core.BoolPtr(false)
				runTargetsConfigurationModel.Replications = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				runTargetsConfigurationModel.Archivals = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				runTargetsConfigurationModel.CloudReplications = []backuprecoveryv1.RunCloudReplicationConfig{*runCloudReplicationConfigModel}
				Expect(runTargetsConfigurationModel.UsePolicyDefaults).To(Equal(core.BoolPtr(false)))
				Expect(runTargetsConfigurationModel.Replications).To(Equal([]backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}))
				Expect(runTargetsConfigurationModel.Archivals).To(Equal([]backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}))
				Expect(runTargetsConfigurationModel.CloudReplications).To(Equal([]backuprecoveryv1.RunCloudReplicationConfig{*runCloudReplicationConfigModel}))

				// Construct an instance of the CreateProtectionGroupRunOptions model
				id := "runId"
				xIbmTenantID := "tenantId"
				createProtectionGroupRunOptionsRunType := "kRegular"
				createProtectionGroupRunOptionsModel := backupRecoveryService.NewCreateProtectionGroupRunOptions(id, xIbmTenantID, createProtectionGroupRunOptionsRunType)
				createProtectionGroupRunOptionsModel.SetID("runId")
				createProtectionGroupRunOptionsModel.SetXIBMTenantID("tenantId")
				createProtectionGroupRunOptionsModel.SetRunType("kRegular")
				createProtectionGroupRunOptionsModel.SetObjects([]backuprecoveryv1.RunObject{*runObjectModel})
				createProtectionGroupRunOptionsModel.SetTargetsConfig(runTargetsConfigurationModel)
				createProtectionGroupRunOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createProtectionGroupRunOptionsModel).ToNot(BeNil())
				Expect(createProtectionGroupRunOptionsModel.ID).To(Equal(core.StringPtr("runId")))
				Expect(createProtectionGroupRunOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(createProtectionGroupRunOptionsModel.RunType).To(Equal(core.StringPtr("kRegular")))
				Expect(createProtectionGroupRunOptionsModel.Objects).To(Equal([]backuprecoveryv1.RunObject{*runObjectModel}))
				Expect(createProtectionGroupRunOptionsModel.TargetsConfig).To(Equal(runTargetsConfigurationModel))
				Expect(createProtectionGroupRunOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateProtectionPolicyOptions successfully`, func() {
				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				Expect(minuteScheduleModel).ToNot(BeNil())
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))
				Expect(minuteScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				Expect(hourScheduleModel).ToNot(BeNil())
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))
				Expect(hourScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				Expect(dayScheduleModel).ToNot(BeNil())
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))
				Expect(dayScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				Expect(weekScheduleModel).ToNot(BeNil())
				weekScheduleModel.DayOfWeek = []string{"Sunday"}
				Expect(weekScheduleModel.DayOfWeek).To(Equal([]string{"Sunday"}))

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				Expect(monthScheduleModel).ToNot(BeNil())
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))
				Expect(monthScheduleModel.DayOfWeek).To(Equal([]string{"Sunday"}))
				Expect(monthScheduleModel.WeekOfMonth).To(Equal(core.StringPtr("First")))
				Expect(monthScheduleModel.DayOfMonth).To(Equal(core.Int64Ptr(int64(10))))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				Expect(yearScheduleModel).ToNot(BeNil())
				yearScheduleModel.DayOfYear = core.StringPtr("First")
				Expect(yearScheduleModel.DayOfYear).To(Equal(core.StringPtr("First")))

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				Expect(incrementalScheduleModel).ToNot(BeNil())
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel
				Expect(incrementalScheduleModel.Unit).To(Equal(core.StringPtr("Minutes")))
				Expect(incrementalScheduleModel.MinuteSchedule).To(Equal(minuteScheduleModel))
				Expect(incrementalScheduleModel.HourSchedule).To(Equal(hourScheduleModel))
				Expect(incrementalScheduleModel.DaySchedule).To(Equal(dayScheduleModel))
				Expect(incrementalScheduleModel.WeekSchedule).To(Equal(weekScheduleModel))
				Expect(incrementalScheduleModel.MonthSchedule).To(Equal(monthScheduleModel))
				Expect(incrementalScheduleModel.YearSchedule).To(Equal(yearScheduleModel))

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				Expect(incrementalBackupPolicyModel).ToNot(BeNil())
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel
				Expect(incrementalBackupPolicyModel.Schedule).To(Equal(incrementalScheduleModel))

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				Expect(fullScheduleModel).ToNot(BeNil())
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel
				Expect(fullScheduleModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(fullScheduleModel.DaySchedule).To(Equal(dayScheduleModel))
				Expect(fullScheduleModel.WeekSchedule).To(Equal(weekScheduleModel))
				Expect(fullScheduleModel.MonthSchedule).To(Equal(monthScheduleModel))
				Expect(fullScheduleModel.YearSchedule).To(Equal(yearScheduleModel))

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				Expect(fullBackupPolicyModel).ToNot(BeNil())
				fullBackupPolicyModel.Schedule = fullScheduleModel
				Expect(fullBackupPolicyModel.Schedule).To(Equal(fullScheduleModel))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				Expect(dataLockConfigModel).ToNot(BeNil())
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)
				Expect(dataLockConfigModel.Mode).To(Equal(core.StringPtr("Compliance")))
				Expect(dataLockConfigModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(dataLockConfigModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(dataLockConfigModel.EnableWormOnExternalTarget).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				Expect(retentionModel).ToNot(BeNil())
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel
				Expect(retentionModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(retentionModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(retentionModel.DataLockConfig).To(Equal(dataLockConfigModel))

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				Expect(fullScheduleAndRetentionModel).ToNot(BeNil())
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel
				Expect(fullScheduleAndRetentionModel.Schedule).To(Equal(fullScheduleModel))
				Expect(fullScheduleAndRetentionModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				Expect(awsTierModel).ToNot(BeNil())
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")
				Expect(awsTierModel.MoveAfterUnit).To(Equal(core.StringPtr("Days")))
				Expect(awsTierModel.MoveAfter).To(Equal(core.Int64Ptr(int64(26))))
				Expect(awsTierModel.TierType).To(Equal(core.StringPtr("kAmazonS3Standard")))

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				Expect(awsTiersModel).ToNot(BeNil())
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}
				Expect(awsTiersModel.Tiers).To(Equal([]backuprecoveryv1.AWSTier{*awsTierModel}))

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				Expect(azureTierModel).ToNot(BeNil())
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")
				Expect(azureTierModel.MoveAfterUnit).To(Equal(core.StringPtr("Days")))
				Expect(azureTierModel.MoveAfter).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureTierModel.TierType).To(Equal(core.StringPtr("kAzureTierHot")))

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				Expect(azureTiersModel).ToNot(BeNil())
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}
				Expect(azureTiersModel.Tiers).To(Equal([]backuprecoveryv1.AzureTier{*azureTierModel}))

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				Expect(googleTierModel).ToNot(BeNil())
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")
				Expect(googleTierModel.MoveAfterUnit).To(Equal(core.StringPtr("Days")))
				Expect(googleTierModel.MoveAfter).To(Equal(core.Int64Ptr(int64(26))))
				Expect(googleTierModel.TierType).To(Equal(core.StringPtr("kGoogleStandard")))

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				Expect(googleTiersModel).ToNot(BeNil())
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}
				Expect(googleTiersModel.Tiers).To(Equal([]backuprecoveryv1.GoogleTier{*googleTierModel}))

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				Expect(oracleTierModel).ToNot(BeNil())
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")
				Expect(oracleTierModel.MoveAfterUnit).To(Equal(core.StringPtr("Days")))
				Expect(oracleTierModel.MoveAfter).To(Equal(core.Int64Ptr(int64(26))))
				Expect(oracleTierModel.TierType).To(Equal(core.StringPtr("kOracleTierStandard")))

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				Expect(oracleTiersModel).ToNot(BeNil())
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}
				Expect(oracleTiersModel.Tiers).To(Equal([]backuprecoveryv1.OracleTier{*oracleTierModel}))

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				Expect(tierLevelSettingsModel).ToNot(BeNil())
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel
				Expect(tierLevelSettingsModel.AwsTiering).To(Equal(awsTiersModel))
				Expect(tierLevelSettingsModel.AzureTiering).To(Equal(azureTiersModel))
				Expect(tierLevelSettingsModel.CloudPlatform).To(Equal(core.StringPtr("AWS")))
				Expect(tierLevelSettingsModel.GoogleTiering).To(Equal(googleTiersModel))
				Expect(tierLevelSettingsModel.OracleTiering).To(Equal(oracleTiersModel))

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				Expect(primaryArchivalTargetModel).ToNot(BeNil())
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel
				Expect(primaryArchivalTargetModel.TargetID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(primaryArchivalTargetModel.TierSettings).To(Equal(tierLevelSettingsModel))

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				Expect(primaryBackupTargetModel).ToNot(BeNil())
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)
				Expect(primaryBackupTargetModel.TargetType).To(Equal(core.StringPtr("Local")))
				Expect(primaryBackupTargetModel.ArchivalTargetSettings).To(Equal(primaryArchivalTargetModel))
				Expect(primaryBackupTargetModel.UseDefaultBackupTarget).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				Expect(regularBackupPolicyModel).ToNot(BeNil())
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel
				Expect(regularBackupPolicyModel.Incremental).To(Equal(incrementalBackupPolicyModel))
				Expect(regularBackupPolicyModel.Full).To(Equal(fullBackupPolicyModel))
				Expect(regularBackupPolicyModel.FullBackups).To(Equal([]backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}))
				Expect(regularBackupPolicyModel.Retention).To(Equal(retentionModel))
				Expect(regularBackupPolicyModel.PrimaryBackupTarget).To(Equal(primaryBackupTargetModel))

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				Expect(logScheduleModel).ToNot(BeNil())
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel
				Expect(logScheduleModel.Unit).To(Equal(core.StringPtr("Minutes")))
				Expect(logScheduleModel.MinuteSchedule).To(Equal(minuteScheduleModel))
				Expect(logScheduleModel.HourSchedule).To(Equal(hourScheduleModel))

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				Expect(logBackupPolicyModel).ToNot(BeNil())
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel
				Expect(logBackupPolicyModel.Schedule).To(Equal(logScheduleModel))
				Expect(logBackupPolicyModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				Expect(bmrScheduleModel).ToNot(BeNil())
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel
				Expect(bmrScheduleModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(bmrScheduleModel.DaySchedule).To(Equal(dayScheduleModel))
				Expect(bmrScheduleModel.WeekSchedule).To(Equal(weekScheduleModel))
				Expect(bmrScheduleModel.MonthSchedule).To(Equal(monthScheduleModel))
				Expect(bmrScheduleModel.YearSchedule).To(Equal(yearScheduleModel))

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				Expect(bmrBackupPolicyModel).ToNot(BeNil())
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel
				Expect(bmrBackupPolicyModel.Schedule).To(Equal(bmrScheduleModel))
				Expect(bmrBackupPolicyModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				Expect(cdpRetentionModel).ToNot(BeNil())
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel
				Expect(cdpRetentionModel.Unit).To(Equal(core.StringPtr("Minutes")))
				Expect(cdpRetentionModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(cdpRetentionModel.DataLockConfig).To(Equal(dataLockConfigModel))

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				Expect(cdpBackupPolicyModel).ToNot(BeNil())
				cdpBackupPolicyModel.Retention = cdpRetentionModel
				Expect(cdpBackupPolicyModel.Retention).To(Equal(cdpRetentionModel))

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				Expect(storageArraySnapshotScheduleModel).ToNot(BeNil())
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel
				Expect(storageArraySnapshotScheduleModel.Unit).To(Equal(core.StringPtr("Minutes")))
				Expect(storageArraySnapshotScheduleModel.MinuteSchedule).To(Equal(minuteScheduleModel))
				Expect(storageArraySnapshotScheduleModel.HourSchedule).To(Equal(hourScheduleModel))
				Expect(storageArraySnapshotScheduleModel.DaySchedule).To(Equal(dayScheduleModel))
				Expect(storageArraySnapshotScheduleModel.WeekSchedule).To(Equal(weekScheduleModel))
				Expect(storageArraySnapshotScheduleModel.MonthSchedule).To(Equal(monthScheduleModel))
				Expect(storageArraySnapshotScheduleModel.YearSchedule).To(Equal(yearScheduleModel))

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				Expect(storageArraySnapshotBackupPolicyModel).ToNot(BeNil())
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel
				Expect(storageArraySnapshotBackupPolicyModel.Schedule).To(Equal(storageArraySnapshotScheduleModel))
				Expect(storageArraySnapshotBackupPolicyModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				Expect(cancellationTimeoutParamsModel).ToNot(BeNil())
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")
				Expect(cancellationTimeoutParamsModel.TimeoutMins).To(Equal(core.Int64Ptr(int64(26))))
				Expect(cancellationTimeoutParamsModel.BackupType).To(Equal(core.StringPtr("kRegular")))

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				Expect(backupPolicyModel).ToNot(BeNil())
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				Expect(backupPolicyModel.Regular).To(Equal(regularBackupPolicyModel))
				Expect(backupPolicyModel.Log).To(Equal(logBackupPolicyModel))
				Expect(backupPolicyModel.Bmr).To(Equal(bmrBackupPolicyModel))
				Expect(backupPolicyModel.Cdp).To(Equal(cdpBackupPolicyModel))
				Expect(backupPolicyModel.StorageArraySnapshot).To(Equal(storageArraySnapshotBackupPolicyModel))
				Expect(backupPolicyModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				Expect(timeOfDayModel).ToNot(BeNil())
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")
				Expect(timeOfDayModel.Hour).To(Equal(core.Int64Ptr(int64(1))))
				Expect(timeOfDayModel.Minute).To(Equal(core.Int64Ptr(int64(15))))
				Expect(timeOfDayModel.TimeZone).To(Equal(core.StringPtr("America/Los_Angeles")))

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				Expect(blackoutWindowModel).ToNot(BeNil())
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")
				Expect(blackoutWindowModel.Day).To(Equal(core.StringPtr("Sunday")))
				Expect(blackoutWindowModel.StartTime).To(Equal(timeOfDayModel))
				Expect(blackoutWindowModel.EndTime).To(Equal(timeOfDayModel))
				Expect(blackoutWindowModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				Expect(extendedRetentionScheduleModel).ToNot(BeNil())
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))
				Expect(extendedRetentionScheduleModel.Unit).To(Equal(core.StringPtr("Runs")))
				Expect(extendedRetentionScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(3))))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				Expect(extendedRetentionPolicyModel).ToNot(BeNil())
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")
				Expect(extendedRetentionPolicyModel.Schedule).To(Equal(extendedRetentionScheduleModel))
				Expect(extendedRetentionPolicyModel.Retention).To(Equal(retentionModel))
				Expect(extendedRetentionPolicyModel.RunType).To(Equal(core.StringPtr("Regular")))
				Expect(extendedRetentionPolicyModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				Expect(targetScheduleModel).ToNot(BeNil())
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))
				Expect(targetScheduleModel.Unit).To(Equal(core.StringPtr("Runs")))
				Expect(targetScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(3))))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				Expect(logRetentionModel).ToNot(BeNil())
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel
				Expect(logRetentionModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(logRetentionModel.Duration).To(Equal(core.Int64Ptr(int64(0))))
				Expect(logRetentionModel.DataLockConfig).To(Equal(dataLockConfigModel))

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				Expect(awsTargetConfigModel).ToNot(BeNil())
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))
				Expect(awsTargetConfigModel.Region).To(Equal(core.Int64Ptr(int64(26))))
				Expect(awsTargetConfigModel.SourceID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				Expect(azureTargetConfigModel).ToNot(BeNil())
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))
				Expect(azureTargetConfigModel.ResourceGroup).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureTargetConfigModel.SourceID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				Expect(remoteTargetConfigModel).ToNot(BeNil())
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))
				Expect(remoteTargetConfigModel.ClusterID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				Expect(replicationTargetConfigurationModel).ToNot(BeNil())
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel
				Expect(replicationTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(replicationTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(replicationTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(replicationTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(replicationTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(replicationTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(replicationTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(replicationTargetConfigurationModel.AwsTargetConfig).To(Equal(awsTargetConfigModel))
				Expect(replicationTargetConfigurationModel.AzureTargetConfig).To(Equal(azureTargetConfigModel))
				Expect(replicationTargetConfigurationModel.TargetType).To(Equal(core.StringPtr("RemoteCluster")))
				Expect(replicationTargetConfigurationModel.RemoteTargetConfig).To(Equal(remoteTargetConfigModel))

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				Expect(archivalTargetConfigurationModel).ToNot(BeNil())
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				Expect(archivalTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(archivalTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(archivalTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(archivalTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(archivalTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(archivalTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(archivalTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(archivalTargetConfigurationModel.TargetID).To(Equal(core.Int64Ptr(int64(5))))
				Expect(archivalTargetConfigurationModel.TierSettings).To(Equal(tierLevelSettingsModel))
				Expect(archivalTargetConfigurationModel.ExtendedRetention).To(Equal([]backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}))

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				Expect(customTagParamsModel).ToNot(BeNil())
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")
				Expect(customTagParamsModel.Key).To(Equal(core.StringPtr("custom-tag-key")))
				Expect(customTagParamsModel.Value).To(Equal(core.StringPtr("custom-tag-value")))

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				Expect(awsCloudSpinParamsModel).ToNot(BeNil())
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))
				Expect(awsCloudSpinParamsModel.CustomTagList).To(Equal([]backuprecoveryv1.CustomTagParams{*customTagParamsModel}))
				Expect(awsCloudSpinParamsModel.Region).To(Equal(core.Int64Ptr(int64(3))))
				Expect(awsCloudSpinParamsModel.SubnetID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(awsCloudSpinParamsModel.VpcID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				Expect(azureCloudSpinParamsModel).ToNot(BeNil())
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))
				Expect(azureCloudSpinParamsModel.AvailabilitySetID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.NetworkResourceGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.ResourceGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.StorageAccountID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.StorageContainerID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.StorageResourceGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmResourceGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmStorageAccountID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmStorageContainerID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmSubnetID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmVirtualNetworkID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				Expect(cloudSpinTargetModel).ToNot(BeNil())
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))
				Expect(cloudSpinTargetModel.AwsParams).To(Equal(awsCloudSpinParamsModel))
				Expect(cloudSpinTargetModel.AzureParams).To(Equal(azureCloudSpinParamsModel))
				Expect(cloudSpinTargetModel.ID).To(Equal(core.Int64Ptr(int64(2))))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				Expect(cloudSpinTargetConfigurationModel).ToNot(BeNil())
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel
				Expect(cloudSpinTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(cloudSpinTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(cloudSpinTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(cloudSpinTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(cloudSpinTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(cloudSpinTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(cloudSpinTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(cloudSpinTargetConfigurationModel.Target).To(Equal(cloudSpinTargetModel))

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				Expect(onpremDeployParamsModel).ToNot(BeNil())
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))
				Expect(onpremDeployParamsModel.ID).To(Equal(core.Int64Ptr(int64(4))))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				Expect(onpremDeployTargetConfigurationModel).ToNot(BeNil())
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel
				Expect(onpremDeployTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(onpremDeployTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(onpremDeployTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(onpremDeployTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(onpremDeployTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(onpremDeployTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(onpremDeployTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(onpremDeployTargetConfigurationModel.Params).To(Equal(onpremDeployParamsModel))

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				Expect(rpaasTargetConfigurationModel).ToNot(BeNil())
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")
				Expect(rpaasTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(rpaasTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(rpaasTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(rpaasTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(rpaasTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(rpaasTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(rpaasTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(rpaasTargetConfigurationModel.TargetID).To(Equal(core.Int64Ptr(int64(5))))
				Expect(rpaasTargetConfigurationModel.TargetType).To(Equal(core.StringPtr("Tape")))

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				Expect(targetsConfigurationModel).ToNot(BeNil())
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}
				Expect(targetsConfigurationModel.ReplicationTargets).To(Equal([]backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}))
				Expect(targetsConfigurationModel.ArchivalTargets).To(Equal([]backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}))
				Expect(targetsConfigurationModel.CloudSpinTargets).To(Equal([]backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}))
				Expect(targetsConfigurationModel.OnpremDeployTargets).To(Equal([]backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}))
				Expect(targetsConfigurationModel.RpaasTargets).To(Equal([]backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}))

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				Expect(cascadedTargetConfigurationModel).ToNot(BeNil())
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel
				Expect(cascadedTargetConfigurationModel.SourceClusterID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(cascadedTargetConfigurationModel.RemoteTargets).To(Equal(targetsConfigurationModel))

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				Expect(retryOptionsModel).ToNot(BeNil())
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))
				Expect(retryOptionsModel.Retries).To(Equal(core.Int64Ptr(int64(0))))
				Expect(retryOptionsModel.RetryIntervalMins).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the CreateProtectionPolicyOptions model
				xIbmTenantID := "tenantId"
				createProtectionPolicyOptionsName := "create-protection-policy"
				var createProtectionPolicyOptionsBackupPolicy *backuprecoveryv1.BackupPolicy = nil
				createProtectionPolicyOptionsModel := backupRecoveryService.NewCreateProtectionPolicyOptions(xIbmTenantID, createProtectionPolicyOptionsName, createProtectionPolicyOptionsBackupPolicy)
				createProtectionPolicyOptionsModel.SetXIBMTenantID("tenantId")
				createProtectionPolicyOptionsModel.SetName("create-protection-policy")
				createProtectionPolicyOptionsModel.SetBackupPolicy(backupPolicyModel)
				createProtectionPolicyOptionsModel.SetDescription("Protection Policy")
				createProtectionPolicyOptionsModel.SetBlackoutWindow([]backuprecoveryv1.BlackoutWindow{*blackoutWindowModel})
				createProtectionPolicyOptionsModel.SetExtendedRetention([]backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel})
				createProtectionPolicyOptionsModel.SetRemoteTargetPolicy(targetsConfigurationModel)
				createProtectionPolicyOptionsModel.SetCascadedTargetsConfig([]backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel})
				createProtectionPolicyOptionsModel.SetRetryOptions(retryOptionsModel)
				createProtectionPolicyOptionsModel.SetDataLock("Compliance")
				createProtectionPolicyOptionsModel.SetVersion(int64(38))
				createProtectionPolicyOptionsModel.SetIsCBSEnabled(true)
				createProtectionPolicyOptionsModel.SetLastModificationTimeUsecs(int64(26))
				createProtectionPolicyOptionsModel.SetTemplateID("protection-policy-template")
				createProtectionPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createProtectionPolicyOptionsModel).ToNot(BeNil())
				Expect(createProtectionPolicyOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(createProtectionPolicyOptionsModel.Name).To(Equal(core.StringPtr("create-protection-policy")))
				Expect(createProtectionPolicyOptionsModel.BackupPolicy).To(Equal(backupPolicyModel))
				Expect(createProtectionPolicyOptionsModel.Description).To(Equal(core.StringPtr("Protection Policy")))
				Expect(createProtectionPolicyOptionsModel.BlackoutWindow).To(Equal([]backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}))
				Expect(createProtectionPolicyOptionsModel.ExtendedRetention).To(Equal([]backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}))
				Expect(createProtectionPolicyOptionsModel.RemoteTargetPolicy).To(Equal(targetsConfigurationModel))
				Expect(createProtectionPolicyOptionsModel.CascadedTargetsConfig).To(Equal([]backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}))
				Expect(createProtectionPolicyOptionsModel.RetryOptions).To(Equal(retryOptionsModel))
				Expect(createProtectionPolicyOptionsModel.DataLock).To(Equal(core.StringPtr("Compliance")))
				Expect(createProtectionPolicyOptionsModel.Version).To(Equal(core.Int64Ptr(int64(38))))
				Expect(createProtectionPolicyOptionsModel.IsCBSEnabled).To(Equal(core.BoolPtr(true)))
				Expect(createProtectionPolicyOptionsModel.LastModificationTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createProtectionPolicyOptionsModel.TemplateID).To(Equal(core.StringPtr("protection-policy-template")))
				Expect(createProtectionPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateRecoveryOptions successfully`, func() {
				// Construct an instance of the CommonRecoverObjectSnapshotParams model
				commonRecoverObjectSnapshotParamsModel := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
				Expect(commonRecoverObjectSnapshotParamsModel).ToNot(BeNil())
				commonRecoverObjectSnapshotParamsModel.SnapshotID = core.StringPtr("snapshotID")
				commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupID")
				commonRecoverObjectSnapshotParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				commonRecoverObjectSnapshotParamsModel.RecoverFromStandby = core.BoolPtr(true)
				Expect(commonRecoverObjectSnapshotParamsModel.SnapshotID).To(Equal(core.StringPtr("snapshotID")))
				Expect(commonRecoverObjectSnapshotParamsModel.PointInTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(commonRecoverObjectSnapshotParamsModel.ProtectionGroupID).To(Equal(core.StringPtr("protectionGroupID")))
				Expect(commonRecoverObjectSnapshotParamsModel.ProtectionGroupName).To(Equal(core.StringPtr("protectionGroupName")))
				Expect(commonRecoverObjectSnapshotParamsModel.RecoverFromStandby).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeMountTarget model
				physicalTargetParamsForRecoverVolumeMountTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget)
				Expect(physicalTargetParamsForRecoverVolumeMountTargetModel).ToNot(BeNil())
				physicalTargetParamsForRecoverVolumeMountTargetModel.ID = core.Int64Ptr(int64(26))
				Expect(physicalTargetParamsForRecoverVolumeMountTargetModel.ID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the RecoverVolumeMapping model
				recoverVolumeMappingModel := new(backuprecoveryv1.RecoverVolumeMapping)
				Expect(recoverVolumeMappingModel).ToNot(BeNil())
				recoverVolumeMappingModel.SourceVolumeGuid = core.StringPtr("sourceVolumeGuid")
				recoverVolumeMappingModel.DestinationVolumeGuid = core.StringPtr("destinationVolumeGuid")
				Expect(recoverVolumeMappingModel.SourceVolumeGuid).To(Equal(core.StringPtr("sourceVolumeGuid")))
				Expect(recoverVolumeMappingModel.DestinationVolumeGuid).To(Equal(core.StringPtr("destinationVolumeGuid")))

				// Construct an instance of the PhysicalTargetParamsForRecoverVolumeVlanConfig model
				physicalTargetParamsForRecoverVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeVlanConfig)
				Expect(physicalTargetParamsForRecoverVolumeVlanConfigModel).ToNot(BeNil())
				physicalTargetParamsForRecoverVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)
				Expect(physicalTargetParamsForRecoverVolumeVlanConfigModel.ID).To(Equal(core.Int64Ptr(int64(38))))
				Expect(physicalTargetParamsForRecoverVolumeVlanConfigModel.DisableVlan).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the RecoverPhysicalVolumeParamsPhysicalTargetParams model
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalVolumeParamsPhysicalTargetParams)
				Expect(recoverPhysicalVolumeParamsPhysicalTargetParamsModel).ToNot(BeNil())
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.MountTarget = physicalTargetParamsForRecoverVolumeMountTargetModel
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeMapping = []backuprecoveryv1.RecoverVolumeMapping{*recoverVolumeMappingModel}
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.ForceUnmountVolume = core.BoolPtr(true)
				recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverVolumeVlanConfigModel
				Expect(recoverPhysicalVolumeParamsPhysicalTargetParamsModel.MountTarget).To(Equal(physicalTargetParamsForRecoverVolumeMountTargetModel))
				Expect(recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeMapping).To(Equal([]backuprecoveryv1.RecoverVolumeMapping{*recoverVolumeMappingModel}))
				Expect(recoverPhysicalVolumeParamsPhysicalTargetParamsModel.ForceUnmountVolume).To(Equal(core.BoolPtr(true)))
				Expect(recoverPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig).To(Equal(physicalTargetParamsForRecoverVolumeVlanConfigModel))

				// Construct an instance of the RecoverPhysicalParamsRecoverVolumeParams model
				recoverPhysicalParamsRecoverVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverVolumeParams)
				Expect(recoverPhysicalParamsRecoverVolumeParamsModel).ToNot(BeNil())
				recoverPhysicalParamsRecoverVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverVolumeParamsModel.PhysicalTargetParams = recoverPhysicalVolumeParamsPhysicalTargetParamsModel
				Expect(recoverPhysicalParamsRecoverVolumeParamsModel.TargetEnvironment).To(Equal(core.StringPtr("kPhysical")))
				Expect(recoverPhysicalParamsRecoverVolumeParamsModel.PhysicalTargetParams).To(Equal(recoverPhysicalVolumeParamsPhysicalTargetParamsModel))

				// Construct an instance of the PhysicalMountVolumesOriginalTargetConfigServerCredentials model
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesOriginalTargetConfigServerCredentials)
				Expect(physicalMountVolumesOriginalTargetConfigServerCredentialsModel).ToNot(BeNil())
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")
				Expect(physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Username).To(Equal(core.StringPtr("Username")))
				Expect(physicalMountVolumesOriginalTargetConfigServerCredentialsModel.Password).To(Equal(core.StringPtr("Password")))

				// Construct an instance of the PhysicalTargetParamsForMountVolumeOriginalTargetConfig model
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeOriginalTargetConfig)
				Expect(physicalTargetParamsForMountVolumeOriginalTargetConfigModel).ToNot(BeNil())
				physicalTargetParamsForMountVolumeOriginalTargetConfigModel.ServerCredentials = physicalMountVolumesOriginalTargetConfigServerCredentialsModel
				Expect(physicalTargetParamsForMountVolumeOriginalTargetConfigModel.ServerCredentials).To(Equal(physicalMountVolumesOriginalTargetConfigServerCredentialsModel))

				// Construct an instance of the RecoverTarget model
				recoverTargetModel := new(backuprecoveryv1.RecoverTarget)
				Expect(recoverTargetModel).ToNot(BeNil())
				recoverTargetModel.ID = core.Int64Ptr(int64(26))
				Expect(recoverTargetModel.ID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the PhysicalMountVolumesNewTargetConfigServerCredentials model
				physicalMountVolumesNewTargetConfigServerCredentialsModel := new(backuprecoveryv1.PhysicalMountVolumesNewTargetConfigServerCredentials)
				Expect(physicalMountVolumesNewTargetConfigServerCredentialsModel).ToNot(BeNil())
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Username = core.StringPtr("Username")
				physicalMountVolumesNewTargetConfigServerCredentialsModel.Password = core.StringPtr("Password")
				Expect(physicalMountVolumesNewTargetConfigServerCredentialsModel.Username).To(Equal(core.StringPtr("Username")))
				Expect(physicalMountVolumesNewTargetConfigServerCredentialsModel.Password).To(Equal(core.StringPtr("Password")))

				// Construct an instance of the PhysicalTargetParamsForMountVolumeNewTargetConfig model
				physicalTargetParamsForMountVolumeNewTargetConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeNewTargetConfig)
				Expect(physicalTargetParamsForMountVolumeNewTargetConfigModel).ToNot(BeNil())
				physicalTargetParamsForMountVolumeNewTargetConfigModel.MountTarget = recoverTargetModel
				physicalTargetParamsForMountVolumeNewTargetConfigModel.ServerCredentials = physicalMountVolumesNewTargetConfigServerCredentialsModel
				Expect(physicalTargetParamsForMountVolumeNewTargetConfigModel.MountTarget).To(Equal(recoverTargetModel))
				Expect(physicalTargetParamsForMountVolumeNewTargetConfigModel.ServerCredentials).To(Equal(physicalMountVolumesNewTargetConfigServerCredentialsModel))

				// Construct an instance of the PhysicalTargetParamsForMountVolumeVlanConfig model
				physicalTargetParamsForMountVolumeVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeVlanConfig)
				Expect(physicalTargetParamsForMountVolumeVlanConfigModel).ToNot(BeNil())
				physicalTargetParamsForMountVolumeVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForMountVolumeVlanConfigModel.DisableVlan = core.BoolPtr(true)
				Expect(physicalTargetParamsForMountVolumeVlanConfigModel.ID).To(Equal(core.Int64Ptr(int64(38))))
				Expect(physicalTargetParamsForMountVolumeVlanConfigModel.DisableVlan).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the MountPhysicalVolumeParamsPhysicalTargetParams model
				mountPhysicalVolumeParamsPhysicalTargetParamsModel := new(backuprecoveryv1.MountPhysicalVolumeParamsPhysicalTargetParams)
				Expect(mountPhysicalVolumeParamsPhysicalTargetParamsModel).ToNot(BeNil())
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.MountToOriginalTarget = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.OriginalTargetConfig = physicalTargetParamsForMountVolumeOriginalTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.NewTargetConfig = physicalTargetParamsForMountVolumeNewTargetConfigModel
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.ReadOnlyMount = core.BoolPtr(true)
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeNames = []string{"volume1"}
				mountPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForMountVolumeVlanConfigModel
				Expect(mountPhysicalVolumeParamsPhysicalTargetParamsModel.MountToOriginalTarget).To(Equal(core.BoolPtr(true)))
				Expect(mountPhysicalVolumeParamsPhysicalTargetParamsModel.OriginalTargetConfig).To(Equal(physicalTargetParamsForMountVolumeOriginalTargetConfigModel))
				Expect(mountPhysicalVolumeParamsPhysicalTargetParamsModel.NewTargetConfig).To(Equal(physicalTargetParamsForMountVolumeNewTargetConfigModel))
				Expect(mountPhysicalVolumeParamsPhysicalTargetParamsModel.ReadOnlyMount).To(Equal(core.BoolPtr(true)))
				Expect(mountPhysicalVolumeParamsPhysicalTargetParamsModel.VolumeNames).To(Equal([]string{"volume1"}))
				Expect(mountPhysicalVolumeParamsPhysicalTargetParamsModel.VlanConfig).To(Equal(physicalTargetParamsForMountVolumeVlanConfigModel))

				// Construct an instance of the RecoverPhysicalParamsMountVolumeParams model
				recoverPhysicalParamsMountVolumeParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsMountVolumeParams)
				Expect(recoverPhysicalParamsMountVolumeParamsModel).ToNot(BeNil())
				recoverPhysicalParamsMountVolumeParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsMountVolumeParamsModel.PhysicalTargetParams = mountPhysicalVolumeParamsPhysicalTargetParamsModel
				Expect(recoverPhysicalParamsMountVolumeParamsModel.TargetEnvironment).To(Equal(core.StringPtr("kPhysical")))
				Expect(recoverPhysicalParamsMountVolumeParamsModel.PhysicalTargetParams).To(Equal(mountPhysicalVolumeParamsPhysicalTargetParamsModel))

				// Construct an instance of the CommonRecoverFileAndFolderInfo model
				commonRecoverFileAndFolderInfoModel := new(backuprecoveryv1.CommonRecoverFileAndFolderInfo)
				Expect(commonRecoverFileAndFolderInfoModel).ToNot(BeNil())
				commonRecoverFileAndFolderInfoModel.AbsolutePath = core.StringPtr("~/folder1")
				commonRecoverFileAndFolderInfoModel.IsDirectory = core.BoolPtr(true)
				commonRecoverFileAndFolderInfoModel.IsViewFileRecovery = core.BoolPtr(true)
				Expect(commonRecoverFileAndFolderInfoModel.AbsolutePath).To(Equal(core.StringPtr("~/folder1")))
				Expect(commonRecoverFileAndFolderInfoModel.IsDirectory).To(Equal(core.BoolPtr(true)))
				Expect(commonRecoverFileAndFolderInfoModel.IsViewFileRecovery).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget model
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget)
				Expect(physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel).ToNot(BeNil())
				physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel.ID = core.Int64Ptr(int64(26))
				Expect(physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel.ID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the PhysicalTargetParamsForRecoverFileAndFolderVlanConfig model
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderVlanConfig)
				Expect(physicalTargetParamsForRecoverFileAndFolderVlanConfigModel).ToNot(BeNil())
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.ID = core.Int64Ptr(int64(38))
				physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.DisableVlan = core.BoolPtr(true)
				Expect(physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.ID).To(Equal(core.Int64Ptr(int64(38))))
				Expect(physicalTargetParamsForRecoverFileAndFolderVlanConfigModel.DisableVlan).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the RecoverPhysicalFileAndFolderParamsPhysicalTargetParams model
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel := new(backuprecoveryv1.RecoverPhysicalFileAndFolderParamsPhysicalTargetParams)
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel).ToNot(BeNil())
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RecoverTarget = physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreToOriginalPaths = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.OverwriteExisting = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.AlternateRestoreDirectory = core.StringPtr("~/dirAlt")
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAttributes = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveTimestamps = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAcls = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.ContinueOnError = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.SaveSuccessFiles = core.BoolPtr(true)
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.VlanConfig = physicalTargetParamsForRecoverFileAndFolderVlanConfigModel
				recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreEntityType = core.StringPtr("kRegular")
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RecoverTarget).To(Equal(physicalTargetParamsForRecoverFileAndFolderRecoverTargetModel))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreToOriginalPaths).To(Equal(core.BoolPtr(true)))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.OverwriteExisting).To(Equal(core.BoolPtr(true)))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.AlternateRestoreDirectory).To(Equal(core.StringPtr("~/dirAlt")))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAttributes).To(Equal(core.BoolPtr(true)))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveTimestamps).To(Equal(core.BoolPtr(true)))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.PreserveAcls).To(Equal(core.BoolPtr(true)))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.ContinueOnError).To(Equal(core.BoolPtr(true)))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.SaveSuccessFiles).To(Equal(core.BoolPtr(true)))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.VlanConfig).To(Equal(physicalTargetParamsForRecoverFileAndFolderVlanConfigModel))
				Expect(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel.RestoreEntityType).To(Equal(core.StringPtr("kRegular")))

				// Construct an instance of the RecoverPhysicalParamsRecoverFileAndFolderParams model
				recoverPhysicalParamsRecoverFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsRecoverFileAndFolderParams)
				Expect(recoverPhysicalParamsRecoverFileAndFolderParamsModel).ToNot(BeNil())
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.TargetEnvironment = core.StringPtr("kPhysical")
				recoverPhysicalParamsRecoverFileAndFolderParamsModel.PhysicalTargetParams = recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel
				Expect(recoverPhysicalParamsRecoverFileAndFolderParamsModel.FilesAndFolders).To(Equal([]backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}))
				Expect(recoverPhysicalParamsRecoverFileAndFolderParamsModel.TargetEnvironment).To(Equal(core.StringPtr("kPhysical")))
				Expect(recoverPhysicalParamsRecoverFileAndFolderParamsModel.PhysicalTargetParams).To(Equal(recoverPhysicalFileAndFolderParamsPhysicalTargetParamsModel))

				// Construct an instance of the RecoverPhysicalParamsDownloadFileAndFolderParams model
				recoverPhysicalParamsDownloadFileAndFolderParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsDownloadFileAndFolderParams)
				Expect(recoverPhysicalParamsDownloadFileAndFolderParamsModel).ToNot(BeNil())
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.ExpiryTimeUsecs = core.Int64Ptr(int64(26))
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.FilesAndFolders = []backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}
				recoverPhysicalParamsDownloadFileAndFolderParamsModel.DownloadFilePath = core.StringPtr("~/downloadFile")
				Expect(recoverPhysicalParamsDownloadFileAndFolderParamsModel.ExpiryTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(recoverPhysicalParamsDownloadFileAndFolderParamsModel.FilesAndFolders).To(Equal([]backuprecoveryv1.CommonRecoverFileAndFolderInfo{*commonRecoverFileAndFolderInfoModel}))
				Expect(recoverPhysicalParamsDownloadFileAndFolderParamsModel.DownloadFilePath).To(Equal(core.StringPtr("~/downloadFile")))

				// Construct an instance of the RecoverPhysicalParamsSystemRecoveryParams model
				recoverPhysicalParamsSystemRecoveryParamsModel := new(backuprecoveryv1.RecoverPhysicalParamsSystemRecoveryParams)
				Expect(recoverPhysicalParamsSystemRecoveryParamsModel).ToNot(BeNil())
				recoverPhysicalParamsSystemRecoveryParamsModel.FullNasPath = core.StringPtr("~/nas")
				Expect(recoverPhysicalParamsSystemRecoveryParamsModel.FullNasPath).To(Equal(core.StringPtr("~/nas")))

				// Construct an instance of the RecoverPhysicalParams model
				recoverPhysicalParamsModel := new(backuprecoveryv1.RecoverPhysicalParams)
				Expect(recoverPhysicalParamsModel).ToNot(BeNil())
				recoverPhysicalParamsModel.Objects = []backuprecoveryv1.CommonRecoverObjectSnapshotParams{*commonRecoverObjectSnapshotParamsModel}
				recoverPhysicalParamsModel.RecoveryAction = core.StringPtr("RecoverPhysicalVolumes")
				recoverPhysicalParamsModel.RecoverVolumeParams = recoverPhysicalParamsRecoverVolumeParamsModel
				recoverPhysicalParamsModel.MountVolumeParams = recoverPhysicalParamsMountVolumeParamsModel
				recoverPhysicalParamsModel.RecoverFileAndFolderParams = recoverPhysicalParamsRecoverFileAndFolderParamsModel
				recoverPhysicalParamsModel.DownloadFileAndFolderParams = recoverPhysicalParamsDownloadFileAndFolderParamsModel
				recoverPhysicalParamsModel.SystemRecoveryParams = recoverPhysicalParamsSystemRecoveryParamsModel
				Expect(recoverPhysicalParamsModel.Objects).To(Equal([]backuprecoveryv1.CommonRecoverObjectSnapshotParams{*commonRecoverObjectSnapshotParamsModel}))
				Expect(recoverPhysicalParamsModel.RecoveryAction).To(Equal(core.StringPtr("RecoverPhysicalVolumes")))
				Expect(recoverPhysicalParamsModel.RecoverVolumeParams).To(Equal(recoverPhysicalParamsRecoverVolumeParamsModel))
				Expect(recoverPhysicalParamsModel.MountVolumeParams).To(Equal(recoverPhysicalParamsMountVolumeParamsModel))
				Expect(recoverPhysicalParamsModel.RecoverFileAndFolderParams).To(Equal(recoverPhysicalParamsRecoverFileAndFolderParamsModel))
				Expect(recoverPhysicalParamsModel.DownloadFileAndFolderParams).To(Equal(recoverPhysicalParamsDownloadFileAndFolderParamsModel))
				Expect(recoverPhysicalParamsModel.SystemRecoveryParams).To(Equal(recoverPhysicalParamsSystemRecoveryParamsModel))

				// Construct an instance of the AAGInfo model
				aagInfoModel := new(backuprecoveryv1.AAGInfo)
				Expect(aagInfoModel).ToNot(BeNil())
				aagInfoModel.Name = core.StringPtr("aagInfoName")
				aagInfoModel.ObjectID = core.Int64Ptr(int64(26))
				Expect(aagInfoModel.Name).To(Equal(core.StringPtr("aagInfoName")))
				Expect(aagInfoModel.ObjectID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the HostInformation model
				hostInformationModel := new(backuprecoveryv1.HostInformation)
				Expect(hostInformationModel).ToNot(BeNil())
				hostInformationModel.ID = core.StringPtr("hostInfoId")
				hostInformationModel.Name = core.StringPtr("hostInfoName")
				hostInformationModel.Environment = core.StringPtr("kPhysical")
				Expect(hostInformationModel.ID).To(Equal(core.StringPtr("hostInfoId")))
				Expect(hostInformationModel.Name).To(Equal(core.StringPtr("hostInfoName")))
				Expect(hostInformationModel.Environment).To(Equal(core.StringPtr("kPhysical")))

				// Construct an instance of the MultiStageRestoreOptions model
				multiStageRestoreOptionsModel := new(backuprecoveryv1.MultiStageRestoreOptions)
				Expect(multiStageRestoreOptionsModel).ToNot(BeNil())
				multiStageRestoreOptionsModel.EnableAutoSync = core.BoolPtr(true)
				multiStageRestoreOptionsModel.EnableMultiStageRestore = core.BoolPtr(true)
				Expect(multiStageRestoreOptionsModel.EnableAutoSync).To(Equal(core.BoolPtr(true)))
				Expect(multiStageRestoreOptionsModel.EnableMultiStageRestore).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the FilenamePatternToDirectory model
				filenamePatternToDirectoryModel := new(backuprecoveryv1.FilenamePatternToDirectory)
				Expect(filenamePatternToDirectoryModel).ToNot(BeNil())
				filenamePatternToDirectoryModel.Directory = core.StringPtr("~/dir1")
				filenamePatternToDirectoryModel.FilenamePattern = core.StringPtr(".sql")
				Expect(filenamePatternToDirectoryModel.Directory).To(Equal(core.StringPtr("~/dir1")))
				Expect(filenamePatternToDirectoryModel.FilenamePattern).To(Equal(core.StringPtr(".sql")))

				// Construct an instance of the RecoveryObjectIdentifier model
				recoveryObjectIdentifierModel := new(backuprecoveryv1.RecoveryObjectIdentifier)
				Expect(recoveryObjectIdentifierModel).ToNot(BeNil())
				recoveryObjectIdentifierModel.ID = core.Int64Ptr(int64(26))
				Expect(recoveryObjectIdentifierModel.ID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the RecoverSqlAppNewSourceConfig model
				recoverSqlAppNewSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppNewSourceConfig)
				Expect(recoverSqlAppNewSourceConfigModel).ToNot(BeNil())
				recoverSqlAppNewSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppNewSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppNewSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppNewSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppNewSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppNewSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppNewSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppNewSourceConfigModel.DatabaseName = core.StringPtr("recovery-database-sql")
				recoverSqlAppNewSourceConfigModel.Host = recoveryObjectIdentifierModel
				recoverSqlAppNewSourceConfigModel.InstanceName = core.StringPtr("database-instance-1")
				recoverSqlAppNewSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")
				Expect(recoverSqlAppNewSourceConfigModel.KeepCdc).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppNewSourceConfigModel.MultiStageRestoreOptions).To(Equal(multiStageRestoreOptionsModel))
				Expect(recoverSqlAppNewSourceConfigModel.NativeLogRecoveryWithClause).To(Equal(core.StringPtr("LogRecoveryWithClause")))
				Expect(recoverSqlAppNewSourceConfigModel.NativeRecoveryWithClause).To(Equal(core.StringPtr("RecoveryWithClause")))
				Expect(recoverSqlAppNewSourceConfigModel.OverwritingPolicy).To(Equal(core.StringPtr("FailIfExists")))
				Expect(recoverSqlAppNewSourceConfigModel.ReplayEntireLastLog).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppNewSourceConfigModel.RestoreTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(recoverSqlAppNewSourceConfigModel.SecondaryDataFilesDirList).To(Equal([]backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}))
				Expect(recoverSqlAppNewSourceConfigModel.WithNoRecovery).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppNewSourceConfigModel.DataFileDirectoryLocation).To(Equal(core.StringPtr("~/dir1")))
				Expect(recoverSqlAppNewSourceConfigModel.DatabaseName).To(Equal(core.StringPtr("recovery-database-sql")))
				Expect(recoverSqlAppNewSourceConfigModel.Host).To(Equal(recoveryObjectIdentifierModel))
				Expect(recoverSqlAppNewSourceConfigModel.InstanceName).To(Equal(core.StringPtr("database-instance-1")))
				Expect(recoverSqlAppNewSourceConfigModel.LogFileDirectoryLocation).To(Equal(core.StringPtr("~/dir2")))

				// Construct an instance of the RecoverSqlAppOriginalSourceConfig model
				recoverSqlAppOriginalSourceConfigModel := new(backuprecoveryv1.RecoverSqlAppOriginalSourceConfig)
				Expect(recoverSqlAppOriginalSourceConfigModel).ToNot(BeNil())
				recoverSqlAppOriginalSourceConfigModel.KeepCdc = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.MultiStageRestoreOptions = multiStageRestoreOptionsModel
				recoverSqlAppOriginalSourceConfigModel.NativeLogRecoveryWithClause = core.StringPtr("LogRecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.NativeRecoveryWithClause = core.StringPtr("RecoveryWithClause")
				recoverSqlAppOriginalSourceConfigModel.OverwritingPolicy = core.StringPtr("FailIfExists")
				recoverSqlAppOriginalSourceConfigModel.ReplayEntireLastLog = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.RestoreTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppOriginalSourceConfigModel.SecondaryDataFilesDirList = []backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}
				recoverSqlAppOriginalSourceConfigModel.WithNoRecovery = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.CaptureTailLogs = core.BoolPtr(true)
				recoverSqlAppOriginalSourceConfigModel.DataFileDirectoryLocation = core.StringPtr("~/dir1")
				recoverSqlAppOriginalSourceConfigModel.LogFileDirectoryLocation = core.StringPtr("~/dir2")
				recoverSqlAppOriginalSourceConfigModel.NewDatabaseName = core.StringPtr("recovery-database-sql-new")
				Expect(recoverSqlAppOriginalSourceConfigModel.KeepCdc).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppOriginalSourceConfigModel.MultiStageRestoreOptions).To(Equal(multiStageRestoreOptionsModel))
				Expect(recoverSqlAppOriginalSourceConfigModel.NativeLogRecoveryWithClause).To(Equal(core.StringPtr("LogRecoveryWithClause")))
				Expect(recoverSqlAppOriginalSourceConfigModel.NativeRecoveryWithClause).To(Equal(core.StringPtr("RecoveryWithClause")))
				Expect(recoverSqlAppOriginalSourceConfigModel.OverwritingPolicy).To(Equal(core.StringPtr("FailIfExists")))
				Expect(recoverSqlAppOriginalSourceConfigModel.ReplayEntireLastLog).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppOriginalSourceConfigModel.RestoreTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(recoverSqlAppOriginalSourceConfigModel.SecondaryDataFilesDirList).To(Equal([]backuprecoveryv1.FilenamePatternToDirectory{*filenamePatternToDirectoryModel}))
				Expect(recoverSqlAppOriginalSourceConfigModel.WithNoRecovery).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppOriginalSourceConfigModel.CaptureTailLogs).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppOriginalSourceConfigModel.DataFileDirectoryLocation).To(Equal(core.StringPtr("~/dir1")))
				Expect(recoverSqlAppOriginalSourceConfigModel.LogFileDirectoryLocation).To(Equal(core.StringPtr("~/dir2")))
				Expect(recoverSqlAppOriginalSourceConfigModel.NewDatabaseName).To(Equal(core.StringPtr("recovery-database-sql-new")))

				// Construct an instance of the SqlTargetParamsForRecoverSqlApp model
				sqlTargetParamsForRecoverSqlAppModel := new(backuprecoveryv1.SqlTargetParamsForRecoverSqlApp)
				Expect(sqlTargetParamsForRecoverSqlAppModel).ToNot(BeNil())
				sqlTargetParamsForRecoverSqlAppModel.NewSourceConfig = recoverSqlAppNewSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.OriginalSourceConfig = recoverSqlAppOriginalSourceConfigModel
				sqlTargetParamsForRecoverSqlAppModel.RecoverToNewSource = core.BoolPtr(true)
				Expect(sqlTargetParamsForRecoverSqlAppModel.NewSourceConfig).To(Equal(recoverSqlAppNewSourceConfigModel))
				Expect(sqlTargetParamsForRecoverSqlAppModel.OriginalSourceConfig).To(Equal(recoverSqlAppOriginalSourceConfigModel))
				Expect(sqlTargetParamsForRecoverSqlAppModel.RecoverToNewSource).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the RecoverSqlAppParams model
				recoverSqlAppParamsModel := new(backuprecoveryv1.RecoverSqlAppParams)
				Expect(recoverSqlAppParamsModel).ToNot(BeNil())
				recoverSqlAppParamsModel.SnapshotID = core.StringPtr("snapshotId")
				recoverSqlAppParamsModel.PointInTimeUsecs = core.Int64Ptr(int64(26))
				recoverSqlAppParamsModel.ProtectionGroupID = core.StringPtr("protectionGroupId")
				recoverSqlAppParamsModel.ProtectionGroupName = core.StringPtr("protectionGroupName")
				recoverSqlAppParamsModel.RecoverFromStandby = core.BoolPtr(true)
				recoverSqlAppParamsModel.AagInfo = aagInfoModel
				recoverSqlAppParamsModel.HostInfo = hostInformationModel
				recoverSqlAppParamsModel.IsEncrypted = core.BoolPtr(true)
				recoverSqlAppParamsModel.SqlTargetParams = sqlTargetParamsForRecoverSqlAppModel
				recoverSqlAppParamsModel.TargetEnvironment = core.StringPtr("kSQL")
				Expect(recoverSqlAppParamsModel.SnapshotID).To(Equal(core.StringPtr("snapshotId")))
				Expect(recoverSqlAppParamsModel.PointInTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(recoverSqlAppParamsModel.ProtectionGroupID).To(Equal(core.StringPtr("protectionGroupId")))
				Expect(recoverSqlAppParamsModel.ProtectionGroupName).To(Equal(core.StringPtr("protectionGroupName")))
				Expect(recoverSqlAppParamsModel.RecoverFromStandby).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppParamsModel.AagInfo).To(Equal(aagInfoModel))
				Expect(recoverSqlAppParamsModel.HostInfo).To(Equal(hostInformationModel))
				Expect(recoverSqlAppParamsModel.IsEncrypted).To(Equal(core.BoolPtr(true)))
				Expect(recoverSqlAppParamsModel.SqlTargetParams).To(Equal(sqlTargetParamsForRecoverSqlAppModel))
				Expect(recoverSqlAppParamsModel.TargetEnvironment).To(Equal(core.StringPtr("kSQL")))

				// Construct an instance of the RecoveryVlanConfig model
				recoveryVlanConfigModel := new(backuprecoveryv1.RecoveryVlanConfig)
				Expect(recoveryVlanConfigModel).ToNot(BeNil())
				recoveryVlanConfigModel.ID = core.Int64Ptr(int64(38))
				recoveryVlanConfigModel.DisableVlan = core.BoolPtr(true)
				Expect(recoveryVlanConfigModel.ID).To(Equal(core.Int64Ptr(int64(38))))
				Expect(recoveryVlanConfigModel.DisableVlan).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the RecoverSqlParams model
				recoverSqlParamsModel := new(backuprecoveryv1.RecoverSqlParams)
				Expect(recoverSqlParamsModel).ToNot(BeNil())
				recoverSqlParamsModel.RecoverAppParams = []backuprecoveryv1.RecoverSqlAppParams{*recoverSqlAppParamsModel}
				recoverSqlParamsModel.RecoveryAction = core.StringPtr("RecoverApps")
				recoverSqlParamsModel.VlanConfig = recoveryVlanConfigModel
				Expect(recoverSqlParamsModel.RecoverAppParams).To(Equal([]backuprecoveryv1.RecoverSqlAppParams{*recoverSqlAppParamsModel}))
				Expect(recoverSqlParamsModel.RecoveryAction).To(Equal(core.StringPtr("RecoverApps")))
				Expect(recoverSqlParamsModel.VlanConfig).To(Equal(recoveryVlanConfigModel))

				// Construct an instance of the CreateRecoveryOptions model
				xIbmTenantID := "tenantId"
				createRecoveryOptionsName := "create-recovery"
				createRecoveryOptionsSnapshotEnvironment := "kPhysical"
				createRecoveryOptionsModel := backupRecoveryService.NewCreateRecoveryOptions(xIbmTenantID, createRecoveryOptionsName, createRecoveryOptionsSnapshotEnvironment)
				createRecoveryOptionsModel.SetXIBMTenantID("tenantId")
				createRecoveryOptionsModel.SetName("create-recovery")
				createRecoveryOptionsModel.SetSnapshotEnvironment("kPhysical")
				createRecoveryOptionsModel.SetPhysicalParams(recoverPhysicalParamsModel)
				createRecoveryOptionsModel.SetMssqlParams(recoverSqlParamsModel)
				createRecoveryOptionsModel.SetRequestInitiatorType("UIUser")
				createRecoveryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createRecoveryOptionsModel).ToNot(BeNil())
				Expect(createRecoveryOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(createRecoveryOptionsModel.Name).To(Equal(core.StringPtr("create-recovery")))
				Expect(createRecoveryOptionsModel.SnapshotEnvironment).To(Equal(core.StringPtr("kPhysical")))
				Expect(createRecoveryOptionsModel.PhysicalParams).To(Equal(recoverPhysicalParamsModel))
				Expect(createRecoveryOptionsModel.MssqlParams).To(Equal(recoverSqlParamsModel))
				Expect(createRecoveryOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(createRecoveryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateUpgradeTaskOptions successfully`, func() {
				// Construct an instance of the CreateUpgradeTaskOptions model
				xIbmTenantID := "tenantId"
				createUpgradeTaskOptionsModel := backupRecoveryService.NewCreateUpgradeTaskOptions(xIbmTenantID)
				createUpgradeTaskOptionsModel.SetXIBMTenantID("tenantId")
				createUpgradeTaskOptionsModel.SetAgentIDs([]int64{int64(26)})
				createUpgradeTaskOptionsModel.SetDescription("Upgrade task")
				createUpgradeTaskOptionsModel.SetName("create-upgrade-task")
				createUpgradeTaskOptionsModel.SetRetryTaskID(int64(26))
				createUpgradeTaskOptionsModel.SetScheduleEndTimeUsecs(int64(26))
				createUpgradeTaskOptionsModel.SetScheduleTimeUsecs(int64(26))
				createUpgradeTaskOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createUpgradeTaskOptionsModel).ToNot(BeNil())
				Expect(createUpgradeTaskOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(createUpgradeTaskOptionsModel.AgentIDs).To(Equal([]int64{int64(26)}))
				Expect(createUpgradeTaskOptionsModel.Description).To(Equal(core.StringPtr("Upgrade task")))
				Expect(createUpgradeTaskOptionsModel.Name).To(Equal(core.StringPtr("create-upgrade-task")))
				Expect(createUpgradeTaskOptionsModel.RetryTaskID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createUpgradeTaskOptionsModel.ScheduleEndTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createUpgradeTaskOptionsModel.ScheduleTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createUpgradeTaskOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCustomTagParams successfully`, func() {
				key := "testString"
				value := "testString"
				_model, err := backupRecoveryService.NewCustomTagParams(key, value)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDataLockConfig successfully`, func() {
				mode := "Compliance"
				unit := "Days"
				duration := int64(1)
				_model, err := backupRecoveryService.NewDataLockConfig(mode, unit, duration)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDaySchedule successfully`, func() {
				frequency := int64(1)
				_model, err := backupRecoveryService.NewDaySchedule(frequency)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDeleteDataSourceConnectionOptions successfully`, func() {
				// Construct an instance of the DeleteDataSourceConnectionOptions model
				connectionID := "testString"
				xIbmTenantID := "tenantId"
				deleteDataSourceConnectionOptionsModel := backupRecoveryService.NewDeleteDataSourceConnectionOptions(connectionID, xIbmTenantID)
				deleteDataSourceConnectionOptionsModel.SetConnectionID("testString")
				deleteDataSourceConnectionOptionsModel.SetXIBMTenantID("tenantId")
				deleteDataSourceConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDataSourceConnectionOptionsModel).ToNot(BeNil())
				Expect(deleteDataSourceConnectionOptionsModel.ConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(deleteDataSourceConnectionOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(deleteDataSourceConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDataSourceConnectorOptions successfully`, func() {
				// Construct an instance of the DeleteDataSourceConnectorOptions model
				connectorID := "connectorId"
				xIbmTenantID := "tenantId"
				deleteDataSourceConnectorOptionsModel := backupRecoveryService.NewDeleteDataSourceConnectorOptions(connectorID, xIbmTenantID)
				deleteDataSourceConnectorOptionsModel.SetConnectorID("connectorId")
				deleteDataSourceConnectorOptionsModel.SetXIBMTenantID("tenantId")
				deleteDataSourceConnectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDataSourceConnectorOptionsModel).ToNot(BeNil())
				Expect(deleteDataSourceConnectorOptionsModel.ConnectorID).To(Equal(core.StringPtr("connectorId")))
				Expect(deleteDataSourceConnectorOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(deleteDataSourceConnectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteProtectionGroupOptions successfully`, func() {
				// Construct an instance of the DeleteProtectionGroupOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				deleteProtectionGroupOptionsModel := backupRecoveryService.NewDeleteProtectionGroupOptions(id, xIbmTenantID)
				deleteProtectionGroupOptionsModel.SetID("testString")
				deleteProtectionGroupOptionsModel.SetXIBMTenantID("tenantId")
				deleteProtectionGroupOptionsModel.SetDeleteSnapshots(true)
				deleteProtectionGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteProtectionGroupOptionsModel).ToNot(BeNil())
				Expect(deleteProtectionGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteProtectionGroupOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(deleteProtectionGroupOptionsModel.DeleteSnapshots).To(Equal(core.BoolPtr(true)))
				Expect(deleteProtectionGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteProtectionPolicyOptions successfully`, func() {
				// Construct an instance of the DeleteProtectionPolicyOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				deleteProtectionPolicyOptionsModel := backupRecoveryService.NewDeleteProtectionPolicyOptions(id, xIbmTenantID)
				deleteProtectionPolicyOptionsModel.SetID("testString")
				deleteProtectionPolicyOptionsModel.SetXIBMTenantID("tenantId")
				deleteProtectionPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteProtectionPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteProtectionPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteProtectionPolicyOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(deleteProtectionPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteProtectionSourceRegistrationOptions successfully`, func() {
				// Construct an instance of the DeleteProtectionSourceRegistrationOptions model
				id := int64(26)
				xIbmTenantID := "tenantId"
				deleteProtectionSourceRegistrationOptionsModel := backupRecoveryService.NewDeleteProtectionSourceRegistrationOptions(id, xIbmTenantID)
				deleteProtectionSourceRegistrationOptionsModel.SetID(int64(26))
				deleteProtectionSourceRegistrationOptionsModel.SetXIBMTenantID("tenantId")
				deleteProtectionSourceRegistrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteProtectionSourceRegistrationOptionsModel).ToNot(BeNil())
				Expect(deleteProtectionSourceRegistrationOptionsModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(deleteProtectionSourceRegistrationOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(deleteProtectionSourceRegistrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDocumentObject successfully`, func() {
				itemID := "testString"
				_model, err := backupRecoveryService.NewDocumentObject(itemID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDownloadAgentOptions successfully`, func() {
				// Construct an instance of the LinuxAgentParams model
				linuxAgentParamsModel := new(backuprecoveryv1.LinuxAgentParams)
				Expect(linuxAgentParamsModel).ToNot(BeNil())
				linuxAgentParamsModel.PackageType = core.StringPtr("kScript")
				Expect(linuxAgentParamsModel.PackageType).To(Equal(core.StringPtr("kScript")))

				// Construct an instance of the DownloadAgentOptions model
				xIbmTenantID := "tenantId"
				downloadAgentOptionsPlatform := "kWindows"
				downloadAgentOptionsModel := backupRecoveryService.NewDownloadAgentOptions(xIbmTenantID, downloadAgentOptionsPlatform)
				downloadAgentOptionsModel.SetXIBMTenantID("tenantId")
				downloadAgentOptionsModel.SetPlatform("kWindows")
				downloadAgentOptionsModel.SetLinuxParams(linuxAgentParamsModel)
				downloadAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(downloadAgentOptionsModel).ToNot(BeNil())
				Expect(downloadAgentOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(downloadAgentOptionsModel.Platform).To(Equal(core.StringPtr("kWindows")))
				Expect(downloadAgentOptionsModel.LinuxParams).To(Equal(linuxAgentParamsModel))
				Expect(downloadAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDownloadFilesFromRecoveryOptions successfully`, func() {
				// Construct an instance of the DownloadFilesFromRecoveryOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				downloadFilesFromRecoveryOptionsModel := backupRecoveryService.NewDownloadFilesFromRecoveryOptions(id, xIbmTenantID)
				downloadFilesFromRecoveryOptionsModel.SetID("testString")
				downloadFilesFromRecoveryOptionsModel.SetXIBMTenantID("tenantId")
				downloadFilesFromRecoveryOptionsModel.SetStartOffset(int64(26))
				downloadFilesFromRecoveryOptionsModel.SetLength(int64(26))
				downloadFilesFromRecoveryOptionsModel.SetFileType("fileType")
				downloadFilesFromRecoveryOptionsModel.SetSourceName("sourceName")
				downloadFilesFromRecoveryOptionsModel.SetStartTime("startTime")
				downloadFilesFromRecoveryOptionsModel.SetIncludeTenants(true)
				downloadFilesFromRecoveryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(downloadFilesFromRecoveryOptionsModel).ToNot(BeNil())
				Expect(downloadFilesFromRecoveryOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(downloadFilesFromRecoveryOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(downloadFilesFromRecoveryOptionsModel.StartOffset).To(Equal(core.Int64Ptr(int64(26))))
				Expect(downloadFilesFromRecoveryOptionsModel.Length).To(Equal(core.Int64Ptr(int64(26))))
				Expect(downloadFilesFromRecoveryOptionsModel.FileType).To(Equal(core.StringPtr("fileType")))
				Expect(downloadFilesFromRecoveryOptionsModel.SourceName).To(Equal(core.StringPtr("sourceName")))
				Expect(downloadFilesFromRecoveryOptionsModel.StartTime).To(Equal(core.StringPtr("startTime")))
				Expect(downloadFilesFromRecoveryOptionsModel.IncludeTenants).To(Equal(core.BoolPtr(true)))
				Expect(downloadFilesFromRecoveryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDownloadIndexedFileOptions successfully`, func() {
				// Construct an instance of the DownloadIndexedFileOptions model
				snapshotsID := "snapshotId1"
				xIbmTenantID := "tenantId"
				downloadIndexedFileOptionsModel := backupRecoveryService.NewDownloadIndexedFileOptions(snapshotsID, xIbmTenantID)
				downloadIndexedFileOptionsModel.SetSnapshotsID("snapshotId1")
				downloadIndexedFileOptionsModel.SetXIBMTenantID("tenantId")
				downloadIndexedFileOptionsModel.SetFilePath("~/home/downloadFile")
				downloadIndexedFileOptionsModel.SetNvramFile(true)
				downloadIndexedFileOptionsModel.SetRetryAttempt(int64(26))
				downloadIndexedFileOptionsModel.SetStartOffset(int64(26))
				downloadIndexedFileOptionsModel.SetLength(int64(26))
				downloadIndexedFileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(downloadIndexedFileOptionsModel).ToNot(BeNil())
				Expect(downloadIndexedFileOptionsModel.SnapshotsID).To(Equal(core.StringPtr("snapshotId1")))
				Expect(downloadIndexedFileOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(downloadIndexedFileOptionsModel.FilePath).To(Equal(core.StringPtr("~/home/downloadFile")))
				Expect(downloadIndexedFileOptionsModel.NvramFile).To(Equal(core.BoolPtr(true)))
				Expect(downloadIndexedFileOptionsModel.RetryAttempt).To(Equal(core.Int64Ptr(int64(26))))
				Expect(downloadIndexedFileOptionsModel.StartOffset).To(Equal(core.Int64Ptr(int64(26))))
				Expect(downloadIndexedFileOptionsModel.Length).To(Equal(core.Int64Ptr(int64(26))))
				Expect(downloadIndexedFileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewExtendedRetentionPolicy successfully`, func() {
				var schedule *backuprecoveryv1.ExtendedRetentionSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				_, err := backupRecoveryService.NewExtendedRetentionPolicy(schedule, retention)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewExtendedRetentionSchedule successfully`, func() {
				unit := "Runs"
				_model, err := backupRecoveryService.NewExtendedRetentionSchedule(unit)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFilesAndFoldersObject successfully`, func() {
				absolutePath := "testString"
				_model, err := backupRecoveryService.NewFilesAndFoldersObject(absolutePath)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFullSchedule successfully`, func() {
				unit := "Days"
				_model, err := backupRecoveryService.NewFullSchedule(unit)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFullScheduleAndRetention successfully`, func() {
				var schedule *backuprecoveryv1.FullSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				_, err := backupRecoveryService.NewFullScheduleAndRetention(schedule, retention)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewGenerateDataSourceConnectionRegistrationTokenOptions successfully`, func() {
				// Construct an instance of the GenerateDataSourceConnectionRegistrationTokenOptions model
				connectionID := "testString"
				xIbmTenantID := "tenantId"
				generateDataSourceConnectionRegistrationTokenOptionsModel := backupRecoveryService.NewGenerateDataSourceConnectionRegistrationTokenOptions(connectionID, xIbmTenantID)
				generateDataSourceConnectionRegistrationTokenOptionsModel.SetConnectionID("testString")
				generateDataSourceConnectionRegistrationTokenOptionsModel.SetXIBMTenantID("tenantId")
				generateDataSourceConnectionRegistrationTokenOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(generateDataSourceConnectionRegistrationTokenOptionsModel).ToNot(BeNil())
				Expect(generateDataSourceConnectionRegistrationTokenOptionsModel.ConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(generateDataSourceConnectionRegistrationTokenOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(generateDataSourceConnectionRegistrationTokenOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetConnectorMetadataOptions successfully`, func() {
				// Construct an instance of the GetConnectorMetadataOptions model
				xIbmTenantID := "tenantId"
				getConnectorMetadataOptionsModel := backupRecoveryService.NewGetConnectorMetadataOptions(xIbmTenantID)
				getConnectorMetadataOptionsModel.SetXIBMTenantID("tenantId")
				getConnectorMetadataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getConnectorMetadataOptionsModel).ToNot(BeNil())
				Expect(getConnectorMetadataOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getConnectorMetadataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDataSourceConnectionsOptions successfully`, func() {
				// Construct an instance of the GetDataSourceConnectionsOptions model
				xIbmTenantID := "tenantId"
				getDataSourceConnectionsOptionsModel := backupRecoveryService.NewGetDataSourceConnectionsOptions(xIbmTenantID)
				getDataSourceConnectionsOptionsModel.SetXIBMTenantID("tenantId")
				getDataSourceConnectionsOptionsModel.SetConnectionIds([]string{"connectionId1", "connectionId2"})
				getDataSourceConnectionsOptionsModel.SetConnectionNames([]string{"connectionName1", "connectionName2"})
				getDataSourceConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDataSourceConnectionsOptionsModel).ToNot(BeNil())
				Expect(getDataSourceConnectionsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getDataSourceConnectionsOptionsModel.ConnectionIds).To(Equal([]string{"connectionId1", "connectionId2"}))
				Expect(getDataSourceConnectionsOptionsModel.ConnectionNames).To(Equal([]string{"connectionName1", "connectionName2"}))
				Expect(getDataSourceConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDataSourceConnectorsOptions successfully`, func() {
				// Construct an instance of the GetDataSourceConnectorsOptions model
				xIbmTenantID := "tenantId"
				getDataSourceConnectorsOptionsModel := backupRecoveryService.NewGetDataSourceConnectorsOptions(xIbmTenantID)
				getDataSourceConnectorsOptionsModel.SetXIBMTenantID("tenantId")
				getDataSourceConnectorsOptionsModel.SetConnectorIds([]string{"connectorId1", "connectorId2"})
				getDataSourceConnectorsOptionsModel.SetConnectorNames([]string{"connectionName1", "connectionName2"})
				getDataSourceConnectorsOptionsModel.SetConnectionID("testString")
				getDataSourceConnectorsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDataSourceConnectorsOptionsModel).ToNot(BeNil())
				Expect(getDataSourceConnectorsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getDataSourceConnectorsOptionsModel.ConnectorIds).To(Equal([]string{"connectorId1", "connectorId2"}))
				Expect(getDataSourceConnectorsOptionsModel.ConnectorNames).To(Equal([]string{"connectionName1", "connectionName2"}))
				Expect(getDataSourceConnectorsOptionsModel.ConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(getDataSourceConnectorsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetObjectSnapshotsOptions successfully`, func() {
				// Construct an instance of the GetObjectSnapshotsOptions model
				id := int64(26)
				xIbmTenantID := "tenantId"
				getObjectSnapshotsOptionsModel := backupRecoveryService.NewGetObjectSnapshotsOptions(id, xIbmTenantID)
				getObjectSnapshotsOptionsModel.SetID(int64(26))
				getObjectSnapshotsOptionsModel.SetXIBMTenantID("tenantId")
				getObjectSnapshotsOptionsModel.SetFromTimeUsecs(int64(26))
				getObjectSnapshotsOptionsModel.SetToTimeUsecs(int64(26))
				getObjectSnapshotsOptionsModel.SetRunStartFromTimeUsecs(int64(26))
				getObjectSnapshotsOptionsModel.SetRunStartToTimeUsecs(int64(26))
				getObjectSnapshotsOptionsModel.SetSnapshotActions([]string{"RecoverPhysicalVolumes"})
				getObjectSnapshotsOptionsModel.SetRunTypes([]string{"kRegular"})
				getObjectSnapshotsOptionsModel.SetProtectionGroupIds([]string{"protectionGroupId1"})
				getObjectSnapshotsOptionsModel.SetRunInstanceIds([]int64{int64(26)})
				getObjectSnapshotsOptionsModel.SetRegionIds([]string{"regionId1"})
				getObjectSnapshotsOptionsModel.SetObjectActionKeys([]string{"kVMware"})
				getObjectSnapshotsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getObjectSnapshotsOptionsModel).ToNot(BeNil())
				Expect(getObjectSnapshotsOptionsModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getObjectSnapshotsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getObjectSnapshotsOptionsModel.FromTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getObjectSnapshotsOptionsModel.ToTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getObjectSnapshotsOptionsModel.RunStartFromTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getObjectSnapshotsOptionsModel.RunStartToTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getObjectSnapshotsOptionsModel.SnapshotActions).To(Equal([]string{"RecoverPhysicalVolumes"}))
				Expect(getObjectSnapshotsOptionsModel.RunTypes).To(Equal([]string{"kRegular"}))
				Expect(getObjectSnapshotsOptionsModel.ProtectionGroupIds).To(Equal([]string{"protectionGroupId1"}))
				Expect(getObjectSnapshotsOptionsModel.RunInstanceIds).To(Equal([]int64{int64(26)}))
				Expect(getObjectSnapshotsOptionsModel.RegionIds).To(Equal([]string{"regionId1"}))
				Expect(getObjectSnapshotsOptionsModel.ObjectActionKeys).To(Equal([]string{"kVMware"}))
				Expect(getObjectSnapshotsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProtectionGroupByIdOptions successfully`, func() {
				// Construct an instance of the GetProtectionGroupByIdOptions model
				id := "testString"
				xIbmTenantID := "tenantID"
				getProtectionGroupByIdOptionsModel := backupRecoveryService.NewGetProtectionGroupByIdOptions(id, xIbmTenantID)
				getProtectionGroupByIdOptionsModel.SetID("testString")
				getProtectionGroupByIdOptionsModel.SetXIBMTenantID("tenantID")
				getProtectionGroupByIdOptionsModel.SetRequestInitiatorType("UIUser")
				getProtectionGroupByIdOptionsModel.SetIncludeLastRunInfo(true)
				getProtectionGroupByIdOptionsModel.SetPruneExcludedSourceIds(true)
				getProtectionGroupByIdOptionsModel.SetPruneSourceIds(true)
				getProtectionGroupByIdOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProtectionGroupByIdOptionsModel).ToNot(BeNil())
				Expect(getProtectionGroupByIdOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getProtectionGroupByIdOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantID")))
				Expect(getProtectionGroupByIdOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(getProtectionGroupByIdOptionsModel.IncludeLastRunInfo).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupByIdOptionsModel.PruneExcludedSourceIds).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupByIdOptionsModel.PruneSourceIds).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupByIdOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProtectionGroupRunsOptions successfully`, func() {
				// Construct an instance of the GetProtectionGroupRunsOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				getProtectionGroupRunsOptionsModel := backupRecoveryService.NewGetProtectionGroupRunsOptions(id, xIbmTenantID)
				getProtectionGroupRunsOptionsModel.SetID("testString")
				getProtectionGroupRunsOptionsModel.SetXIBMTenantID("tenantId")
				getProtectionGroupRunsOptionsModel.SetRequestInitiatorType("UIUser")
				getProtectionGroupRunsOptionsModel.SetRunID("11:111")
				getProtectionGroupRunsOptionsModel.SetStartTimeUsecs(int64(26))
				getProtectionGroupRunsOptionsModel.SetEndTimeUsecs(int64(26))
				getProtectionGroupRunsOptionsModel.SetRunTypes([]string{"kAll"})
				getProtectionGroupRunsOptionsModel.SetIncludeObjectDetails(true)
				getProtectionGroupRunsOptionsModel.SetLocalBackupRunStatus([]string{"Accepted"})
				getProtectionGroupRunsOptionsModel.SetReplicationRunStatus([]string{"Accepted"})
				getProtectionGroupRunsOptionsModel.SetArchivalRunStatus([]string{"Accepted"})
				getProtectionGroupRunsOptionsModel.SetCloudSpinRunStatus([]string{"Accepted"})
				getProtectionGroupRunsOptionsModel.SetNumRuns(int64(26))
				getProtectionGroupRunsOptionsModel.SetExcludeNonRestorableRuns(false)
				getProtectionGroupRunsOptionsModel.SetRunTags([]string{"tag1"})
				getProtectionGroupRunsOptionsModel.SetUseCachedData(true)
				getProtectionGroupRunsOptionsModel.SetFilterByEndTime(true)
				getProtectionGroupRunsOptionsModel.SetSnapshotTargetTypes([]string{"Local"})
				getProtectionGroupRunsOptionsModel.SetOnlyReturnSuccessfulCopyRun(true)
				getProtectionGroupRunsOptionsModel.SetFilterByCopyTaskEndTime(true)
				getProtectionGroupRunsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProtectionGroupRunsOptionsModel).ToNot(BeNil())
				Expect(getProtectionGroupRunsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getProtectionGroupRunsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getProtectionGroupRunsOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(getProtectionGroupRunsOptionsModel.RunID).To(Equal(core.StringPtr("11:111")))
				Expect(getProtectionGroupRunsOptionsModel.StartTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getProtectionGroupRunsOptionsModel.EndTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getProtectionGroupRunsOptionsModel.RunTypes).To(Equal([]string{"kAll"}))
				Expect(getProtectionGroupRunsOptionsModel.IncludeObjectDetails).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupRunsOptionsModel.LocalBackupRunStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupRunsOptionsModel.ReplicationRunStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupRunsOptionsModel.ArchivalRunStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupRunsOptionsModel.CloudSpinRunStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupRunsOptionsModel.NumRuns).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getProtectionGroupRunsOptionsModel.ExcludeNonRestorableRuns).To(Equal(core.BoolPtr(false)))
				Expect(getProtectionGroupRunsOptionsModel.RunTags).To(Equal([]string{"tag1"}))
				Expect(getProtectionGroupRunsOptionsModel.UseCachedData).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupRunsOptionsModel.FilterByEndTime).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupRunsOptionsModel.SnapshotTargetTypes).To(Equal([]string{"Local"}))
				Expect(getProtectionGroupRunsOptionsModel.OnlyReturnSuccessfulCopyRun).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupRunsOptionsModel.FilterByCopyTaskEndTime).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupRunsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProtectionGroupsOptions successfully`, func() {
				// Construct an instance of the GetProtectionGroupsOptions model
				xIbmTenantID := "tenantID"
				getProtectionGroupsOptionsModel := backupRecoveryService.NewGetProtectionGroupsOptions(xIbmTenantID)
				getProtectionGroupsOptionsModel.SetXIBMTenantID("tenantID")
				getProtectionGroupsOptionsModel.SetRequestInitiatorType("UIUser")
				getProtectionGroupsOptionsModel.SetIds([]string{"protectionGroupId1"})
				getProtectionGroupsOptionsModel.SetNames([]string{"policyName1"})
				getProtectionGroupsOptionsModel.SetPolicyIds([]string{"policyId1"})
				getProtectionGroupsOptionsModel.SetIncludeGroupsWithDatalockOnly(true)
				getProtectionGroupsOptionsModel.SetEnvironments([]string{"kPhysical"})
				getProtectionGroupsOptionsModel.SetIsActive(true)
				getProtectionGroupsOptionsModel.SetIsDeleted(true)
				getProtectionGroupsOptionsModel.SetIsPaused(true)
				getProtectionGroupsOptionsModel.SetLastRunLocalBackupStatus([]string{"Accepted"})
				getProtectionGroupsOptionsModel.SetLastRunReplicationStatus([]string{"Accepted"})
				getProtectionGroupsOptionsModel.SetLastRunArchivalStatus([]string{"Accepted"})
				getProtectionGroupsOptionsModel.SetLastRunCloudSpinStatus([]string{"Accepted"})
				getProtectionGroupsOptionsModel.SetLastRunAnyStatus([]string{"Accepted"})
				getProtectionGroupsOptionsModel.SetIsLastRunSlaViolated(true)
				getProtectionGroupsOptionsModel.SetIncludeLastRunInfo(true)
				getProtectionGroupsOptionsModel.SetPruneExcludedSourceIds(true)
				getProtectionGroupsOptionsModel.SetPruneSourceIds(true)
				getProtectionGroupsOptionsModel.SetUseCachedData(true)
				getProtectionGroupsOptionsModel.SetSourceIds([]int64{int64(26)})
				getProtectionGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProtectionGroupsOptionsModel).ToNot(BeNil())
				Expect(getProtectionGroupsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantID")))
				Expect(getProtectionGroupsOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(getProtectionGroupsOptionsModel.Ids).To(Equal([]string{"protectionGroupId1"}))
				Expect(getProtectionGroupsOptionsModel.Names).To(Equal([]string{"policyName1"}))
				Expect(getProtectionGroupsOptionsModel.PolicyIds).To(Equal([]string{"policyId1"}))
				Expect(getProtectionGroupsOptionsModel.IncludeGroupsWithDatalockOnly).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.Environments).To(Equal([]string{"kPhysical"}))
				Expect(getProtectionGroupsOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.IsDeleted).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.IsPaused).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.LastRunLocalBackupStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupsOptionsModel.LastRunReplicationStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupsOptionsModel.LastRunArchivalStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupsOptionsModel.LastRunCloudSpinStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupsOptionsModel.LastRunAnyStatus).To(Equal([]string{"Accepted"}))
				Expect(getProtectionGroupsOptionsModel.IsLastRunSlaViolated).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.IncludeLastRunInfo).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.PruneExcludedSourceIds).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.PruneSourceIds).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.UseCachedData).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionGroupsOptionsModel.SourceIds).To(Equal([]int64{int64(26)}))
				Expect(getProtectionGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProtectionPoliciesOptions successfully`, func() {
				// Construct an instance of the GetProtectionPoliciesOptions model
				xIbmTenantID := "tenantId"
				getProtectionPoliciesOptionsModel := backupRecoveryService.NewGetProtectionPoliciesOptions(xIbmTenantID)
				getProtectionPoliciesOptionsModel.SetXIBMTenantID("tenantId")
				getProtectionPoliciesOptionsModel.SetRequestInitiatorType("UIUser")
				getProtectionPoliciesOptionsModel.SetIds([]string{"policyId1"})
				getProtectionPoliciesOptionsModel.SetPolicyNames([]string{"policyName1"})
				getProtectionPoliciesOptionsModel.SetTypes([]string{"Regular"})
				getProtectionPoliciesOptionsModel.SetExcludeLinkedPolicies(true)
				getProtectionPoliciesOptionsModel.SetIncludeReplicatedPolicies(true)
				getProtectionPoliciesOptionsModel.SetIncludeStats(true)
				getProtectionPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProtectionPoliciesOptionsModel).ToNot(BeNil())
				Expect(getProtectionPoliciesOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getProtectionPoliciesOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(getProtectionPoliciesOptionsModel.Ids).To(Equal([]string{"policyId1"}))
				Expect(getProtectionPoliciesOptionsModel.PolicyNames).To(Equal([]string{"policyName1"}))
				Expect(getProtectionPoliciesOptionsModel.Types).To(Equal([]string{"Regular"}))
				Expect(getProtectionPoliciesOptionsModel.ExcludeLinkedPolicies).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionPoliciesOptionsModel.IncludeReplicatedPolicies).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionPoliciesOptionsModel.IncludeStats).To(Equal(core.BoolPtr(true)))
				Expect(getProtectionPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProtectionPolicyByIdOptions successfully`, func() {
				// Construct an instance of the GetProtectionPolicyByIdOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				getProtectionPolicyByIdOptionsModel := backupRecoveryService.NewGetProtectionPolicyByIdOptions(id, xIbmTenantID)
				getProtectionPolicyByIdOptionsModel.SetID("testString")
				getProtectionPolicyByIdOptionsModel.SetXIBMTenantID("tenantId")
				getProtectionPolicyByIdOptionsModel.SetRequestInitiatorType("UIUser")
				getProtectionPolicyByIdOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProtectionPolicyByIdOptionsModel).ToNot(BeNil())
				Expect(getProtectionPolicyByIdOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getProtectionPolicyByIdOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getProtectionPolicyByIdOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(getProtectionPolicyByIdOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProtectionSourceRegistrationOptions successfully`, func() {
				// Construct an instance of the GetProtectionSourceRegistrationOptions model
				id := int64(26)
				xIbmTenantID := "tenantId"
				getProtectionSourceRegistrationOptionsModel := backupRecoveryService.NewGetProtectionSourceRegistrationOptions(id, xIbmTenantID)
				getProtectionSourceRegistrationOptionsModel.SetID(int64(26))
				getProtectionSourceRegistrationOptionsModel.SetXIBMTenantID("tenantId")
				getProtectionSourceRegistrationOptionsModel.SetRequestInitiatorType("UIUser")
				getProtectionSourceRegistrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProtectionSourceRegistrationOptionsModel).ToNot(BeNil())
				Expect(getProtectionSourceRegistrationOptionsModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getProtectionSourceRegistrationOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getProtectionSourceRegistrationOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(getProtectionSourceRegistrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRecoveriesOptions successfully`, func() {
				// Construct an instance of the GetRecoveriesOptions model
				xIbmTenantID := "tenantId"
				getRecoveriesOptionsModel := backupRecoveryService.NewGetRecoveriesOptions(xIbmTenantID)
				getRecoveriesOptionsModel.SetXIBMTenantID("tenantId")
				getRecoveriesOptionsModel.SetIds([]string{"11:111:11"})
				getRecoveriesOptionsModel.SetReturnOnlyChildRecoveries(true)
				getRecoveriesOptionsModel.SetStartTimeUsecs(int64(26))
				getRecoveriesOptionsModel.SetEndTimeUsecs(int64(26))
				getRecoveriesOptionsModel.SetSnapshotTargetType([]string{"Local"})
				getRecoveriesOptionsModel.SetArchivalTargetType([]string{"Tape"})
				getRecoveriesOptionsModel.SetSnapshotEnvironments([]string{"kPhysical"})
				getRecoveriesOptionsModel.SetStatus([]string{"Accepted"})
				getRecoveriesOptionsModel.SetRecoveryActions([]string{"RecoverVMs"})
				getRecoveriesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRecoveriesOptionsModel).ToNot(BeNil())
				Expect(getRecoveriesOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getRecoveriesOptionsModel.Ids).To(Equal([]string{"11:111:11"}))
				Expect(getRecoveriesOptionsModel.ReturnOnlyChildRecoveries).To(Equal(core.BoolPtr(true)))
				Expect(getRecoveriesOptionsModel.StartTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getRecoveriesOptionsModel.EndTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getRecoveriesOptionsModel.SnapshotTargetType).To(Equal([]string{"Local"}))
				Expect(getRecoveriesOptionsModel.ArchivalTargetType).To(Equal([]string{"Tape"}))
				Expect(getRecoveriesOptionsModel.SnapshotEnvironments).To(Equal([]string{"kPhysical"}))
				Expect(getRecoveriesOptionsModel.Status).To(Equal([]string{"Accepted"}))
				Expect(getRecoveriesOptionsModel.RecoveryActions).To(Equal([]string{"RecoverVMs"}))
				Expect(getRecoveriesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRecoveryByIdOptions successfully`, func() {
				// Construct an instance of the GetRecoveryByIdOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				getRecoveryByIdOptionsModel := backupRecoveryService.NewGetRecoveryByIdOptions(id, xIbmTenantID)
				getRecoveryByIdOptionsModel.SetID("testString")
				getRecoveryByIdOptionsModel.SetXIBMTenantID("tenantId")
				getRecoveryByIdOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRecoveryByIdOptionsModel).ToNot(BeNil())
				Expect(getRecoveryByIdOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getRecoveryByIdOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getRecoveryByIdOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRestorePointsInTimeRangeOptions successfully`, func() {
				// Construct an instance of the GetRestorePointsInTimeRangeOptions model
				xIbmTenantID := "tenantId"
				getRestorePointsInTimeRangeOptionsEndTimeUsecs := int64(45)
				getRestorePointsInTimeRangeOptionsEnvironment := "kVMware"
				getRestorePointsInTimeRangeOptionsProtectionGroupIds := []string{"protectionGroupId1"}
				getRestorePointsInTimeRangeOptionsStartTimeUsecs := int64(15)
				getRestorePointsInTimeRangeOptionsModel := backupRecoveryService.NewGetRestorePointsInTimeRangeOptions(xIbmTenantID, getRestorePointsInTimeRangeOptionsEndTimeUsecs, getRestorePointsInTimeRangeOptionsEnvironment, getRestorePointsInTimeRangeOptionsProtectionGroupIds, getRestorePointsInTimeRangeOptionsStartTimeUsecs)
				getRestorePointsInTimeRangeOptionsModel.SetXIBMTenantID("tenantId")
				getRestorePointsInTimeRangeOptionsModel.SetEndTimeUsecs(int64(45))
				getRestorePointsInTimeRangeOptionsModel.SetEnvironment("kVMware")
				getRestorePointsInTimeRangeOptionsModel.SetProtectionGroupIds([]string{"protectionGroupId1"})
				getRestorePointsInTimeRangeOptionsModel.SetStartTimeUsecs(int64(15))
				getRestorePointsInTimeRangeOptionsModel.SetSourceID(int64(26))
				getRestorePointsInTimeRangeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRestorePointsInTimeRangeOptionsModel).ToNot(BeNil())
				Expect(getRestorePointsInTimeRangeOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getRestorePointsInTimeRangeOptionsModel.EndTimeUsecs).To(Equal(core.Int64Ptr(int64(45))))
				Expect(getRestorePointsInTimeRangeOptionsModel.Environment).To(Equal(core.StringPtr("kVMware")))
				Expect(getRestorePointsInTimeRangeOptionsModel.ProtectionGroupIds).To(Equal([]string{"protectionGroupId1"}))
				Expect(getRestorePointsInTimeRangeOptionsModel.StartTimeUsecs).To(Equal(core.Int64Ptr(int64(15))))
				Expect(getRestorePointsInTimeRangeOptionsModel.SourceID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(getRestorePointsInTimeRangeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSourceRegistrationsOptions successfully`, func() {
				// Construct an instance of the GetSourceRegistrationsOptions model
				xIbmTenantID := "tenantId"
				getSourceRegistrationsOptionsModel := backupRecoveryService.NewGetSourceRegistrationsOptions(xIbmTenantID)
				getSourceRegistrationsOptionsModel.SetXIBMTenantID("tenantId")
				getSourceRegistrationsOptionsModel.SetIds([]int64{int64(38)})
				getSourceRegistrationsOptionsModel.SetIncludeSourceCredentials(true)
				getSourceRegistrationsOptionsModel.SetEncryptionKey("encryptionKey")
				getSourceRegistrationsOptionsModel.SetUseCachedData(true)
				getSourceRegistrationsOptionsModel.SetIncludeExternalMetadata(true)
				getSourceRegistrationsOptionsModel.SetIgnoreTenantMigrationInProgressCheck(true)
				getSourceRegistrationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSourceRegistrationsOptionsModel).ToNot(BeNil())
				Expect(getSourceRegistrationsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getSourceRegistrationsOptionsModel.Ids).To(Equal([]int64{int64(38)}))
				Expect(getSourceRegistrationsOptionsModel.IncludeSourceCredentials).To(Equal(core.BoolPtr(true)))
				Expect(getSourceRegistrationsOptionsModel.EncryptionKey).To(Equal(core.StringPtr("encryptionKey")))
				Expect(getSourceRegistrationsOptionsModel.UseCachedData).To(Equal(core.BoolPtr(true)))
				Expect(getSourceRegistrationsOptionsModel.IncludeExternalMetadata).To(Equal(core.BoolPtr(true)))
				Expect(getSourceRegistrationsOptionsModel.IgnoreTenantMigrationInProgressCheck).To(Equal(core.BoolPtr(true)))
				Expect(getSourceRegistrationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetUpgradeTasksOptions successfully`, func() {
				// Construct an instance of the GetUpgradeTasksOptions model
				xIbmTenantID := "tenantId"
				getUpgradeTasksOptionsModel := backupRecoveryService.NewGetUpgradeTasksOptions(xIbmTenantID)
				getUpgradeTasksOptionsModel.SetXIBMTenantID("tenantId")
				getUpgradeTasksOptionsModel.SetIds([]int64{int64(26)})
				getUpgradeTasksOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getUpgradeTasksOptionsModel).ToNot(BeNil())
				Expect(getUpgradeTasksOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(getUpgradeTasksOptionsModel.Ids).To(Equal([]int64{int64(26)}))
				Expect(getUpgradeTasksOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGoogleTier successfully`, func() {
				tierType := "kGoogleStandard"
				_model, err := backupRecoveryService.NewGoogleTier(tierType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewGoogleTiers successfully`, func() {
				tiers := []backuprecoveryv1.GoogleTier{}
				_model, err := backupRecoveryService.NewGoogleTiers(tiers)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewHDFSOnPremSearchParams successfully`, func() {
				hdfsTypes := []string{"HDFSFolders"}
				searchString := "testString"
				_model, err := backupRecoveryService.NewHDFSOnPremSearchParams(hdfsTypes, searchString)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewHbaseOnPremSearchParams successfully`, func() {
				hbaseObjectTypes := []string{"HbaseNamespaces"}
				searchString := "testString"
				_model, err := backupRecoveryService.NewHbaseOnPremSearchParams(hbaseObjectTypes, searchString)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewHiveOnPremSearchParams successfully`, func() {
				hiveObjectTypes := []string{"HiveDatabases"}
				searchString := "testString"
				_model, err := backupRecoveryService.NewHiveOnPremSearchParams(hiveObjectTypes, searchString)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewHourSchedule successfully`, func() {
				frequency := int64(1)
				_model, err := backupRecoveryService.NewHourSchedule(frequency)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIncrementalBackupPolicy successfully`, func() {
				var schedule *backuprecoveryv1.IncrementalSchedule = nil
				_, err := backupRecoveryService.NewIncrementalBackupPolicy(schedule)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewIncrementalSchedule successfully`, func() {
				unit := "Minutes"
				_model, err := backupRecoveryService.NewIncrementalSchedule(unit)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIndexingPolicy successfully`, func() {
				enableIndexing := true
				_model, err := backupRecoveryService.NewIndexingPolicy(enableIndexing)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyValuePair successfully`, func() {
				key := "testString"
				value := "testString"
				_model, err := backupRecoveryService.NewKeyValuePair(key, value)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLinuxAgentParams successfully`, func() {
				packageType := "kScript"
				_model, err := backupRecoveryService.NewLinuxAgentParams(packageType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewListProtectionSourcesOptions successfully`, func() {
				// Construct an instance of the ListProtectionSourcesOptions model
				xIbmTenantID := "tenantId"
				listProtectionSourcesOptionsModel := backupRecoveryService.NewListProtectionSourcesOptions(xIbmTenantID)
				listProtectionSourcesOptionsModel.SetXIBMTenantID("tenantId")
				listProtectionSourcesOptionsModel.SetExcludeOffice365Types([]string{"kDomain"})
				listProtectionSourcesOptionsModel.SetGetTeamsChannels(true)
				listProtectionSourcesOptionsModel.SetAfterCursorEntityID(int64(26))
				listProtectionSourcesOptionsModel.SetBeforeCursorEntityID(int64(26))
				listProtectionSourcesOptionsModel.SetNodeID(int64(26))
				listProtectionSourcesOptionsModel.SetPageSize(int64(26))
				listProtectionSourcesOptionsModel.SetHasValidMailbox(true)
				listProtectionSourcesOptionsModel.SetHasValidOnedrive(true)
				listProtectionSourcesOptionsModel.SetIsSecurityGroup(true)
				listProtectionSourcesOptionsModel.SetID(int64(26))
				listProtectionSourcesOptionsModel.SetNumLevels(float64(72.5))
				listProtectionSourcesOptionsModel.SetExcludeTypes([]string{"kVCenter"})
				listProtectionSourcesOptionsModel.SetExcludeAwsTypes([]string{"kEC2Instance"})
				listProtectionSourcesOptionsModel.SetExcludeKubernetesTypes([]string{"kService"})
				listProtectionSourcesOptionsModel.SetIncludeDatastores(true)
				listProtectionSourcesOptionsModel.SetIncludeNetworks(true)
				listProtectionSourcesOptionsModel.SetIncludeVMFolders(true)
				listProtectionSourcesOptionsModel.SetIncludeSfdcFields(true)
				listProtectionSourcesOptionsModel.SetIncludeSystemVApps(true)
				listProtectionSourcesOptionsModel.SetEnvironments([]string{"kVMware"})
				listProtectionSourcesOptionsModel.SetEnvironment("kPhysical")
				listProtectionSourcesOptionsModel.SetIncludeEntityPermissionInfo(true)
				listProtectionSourcesOptionsModel.SetSids([]string{"sid1"})
				listProtectionSourcesOptionsModel.SetIncludeSourceCredentials(true)
				listProtectionSourcesOptionsModel.SetEncryptionKey("encryptionKey")
				listProtectionSourcesOptionsModel.SetIncludeObjectProtectionInfo(true)
				listProtectionSourcesOptionsModel.SetPruneNonCriticalInfo(true)
				listProtectionSourcesOptionsModel.SetPruneAggregationInfo(true)
				listProtectionSourcesOptionsModel.SetRequestInitiatorType("requestInitiatorType")
				listProtectionSourcesOptionsModel.SetUseCachedData(true)
				listProtectionSourcesOptionsModel.SetAllUnderHierarchy(true)
				listProtectionSourcesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listProtectionSourcesOptionsModel).ToNot(BeNil())
				Expect(listProtectionSourcesOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(listProtectionSourcesOptionsModel.ExcludeOffice365Types).To(Equal([]string{"kDomain"}))
				Expect(listProtectionSourcesOptionsModel.GetTeamsChannels).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.AfterCursorEntityID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(listProtectionSourcesOptionsModel.BeforeCursorEntityID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(listProtectionSourcesOptionsModel.NodeID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(listProtectionSourcesOptionsModel.PageSize).To(Equal(core.Int64Ptr(int64(26))))
				Expect(listProtectionSourcesOptionsModel.HasValidMailbox).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.HasValidOnedrive).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.IsSecurityGroup).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(listProtectionSourcesOptionsModel.NumLevels).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(listProtectionSourcesOptionsModel.ExcludeTypes).To(Equal([]string{"kVCenter"}))
				Expect(listProtectionSourcesOptionsModel.ExcludeAwsTypes).To(Equal([]string{"kEC2Instance"}))
				Expect(listProtectionSourcesOptionsModel.ExcludeKubernetesTypes).To(Equal([]string{"kService"}))
				Expect(listProtectionSourcesOptionsModel.IncludeDatastores).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.IncludeNetworks).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.IncludeVMFolders).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.IncludeSfdcFields).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.IncludeSystemVApps).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.Environments).To(Equal([]string{"kVMware"}))
				Expect(listProtectionSourcesOptionsModel.Environment).To(Equal(core.StringPtr("kPhysical")))
				Expect(listProtectionSourcesOptionsModel.IncludeEntityPermissionInfo).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.Sids).To(Equal([]string{"sid1"}))
				Expect(listProtectionSourcesOptionsModel.IncludeSourceCredentials).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.EncryptionKey).To(Equal(core.StringPtr("encryptionKey")))
				Expect(listProtectionSourcesOptionsModel.IncludeObjectProtectionInfo).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.PruneNonCriticalInfo).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.PruneAggregationInfo).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("requestInitiatorType")))
				Expect(listProtectionSourcesOptionsModel.UseCachedData).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.AllUnderHierarchy).To(Equal(core.BoolPtr(true)))
				Expect(listProtectionSourcesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewLogBackupPolicy successfully`, func() {
				var schedule *backuprecoveryv1.LogSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				_, err := backupRecoveryService.NewLogBackupPolicy(schedule, retention)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewLogRetention successfully`, func() {
				unit := "Days"
				duration := int64(0)
				_model, err := backupRecoveryService.NewLogRetention(unit, duration)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLogSchedule successfully`, func() {
				unit := "Minutes"
				_model, err := backupRecoveryService.NewLogSchedule(unit)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLFileProtectionGroupHostParams successfully`, func() {
				hostID := int64(26)
				_model, err := backupRecoveryService.NewMSSQLFileProtectionGroupHostParams(hostID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLFileProtectionGroupObjectParams successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewMSSQLFileProtectionGroupObjectParams(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLFileProtectionGroupParams successfully`, func() {
				objects := []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{}
				_model, err := backupRecoveryService.NewMSSQLFileProtectionGroupParams(objects)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLNativeProtectionGroupObjectParams successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewMSSQLNativeProtectionGroupObjectParams(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLNativeProtectionGroupParams successfully`, func() {
				objects := []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{}
				_model, err := backupRecoveryService.NewMSSQLNativeProtectionGroupParams(objects)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLProtectionGroupParams successfully`, func() {
				protectionType := "kFile"
				_model, err := backupRecoveryService.NewMSSQLProtectionGroupParams(protectionType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLVolumeProtectionGroupHostParams successfully`, func() {
				hostID := int64(26)
				_model, err := backupRecoveryService.NewMSSQLVolumeProtectionGroupHostParams(hostID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLVolumeProtectionGroupObjectParams successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewMSSQLVolumeProtectionGroupObjectParams(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMSSQLVolumeProtectionGroupParams successfully`, func() {
				objects := []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{}
				_model, err := backupRecoveryService.NewMSSQLVolumeProtectionGroupParams(objects)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMinuteSchedule successfully`, func() {
				frequency := int64(1)
				_model, err := backupRecoveryService.NewMinuteSchedule(frequency)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMongoDbOnPremSearchParams successfully`, func() {
				mongoDbObjectTypes := []string{"MongoDatabases"}
				searchString := "testString"
				_model, err := backupRecoveryService.NewMongoDbOnPremSearchParams(mongoDbObjectTypes, searchString)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewMountPhysicalVolumeParamsPhysicalTargetParams successfully`, func() {
				mountToOriginalTarget := true
				_model, err := backupRecoveryService.NewMountPhysicalVolumeParamsPhysicalTargetParams(mountToOriginalTarget)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOnpremDeployTargetConfiguration successfully`, func() {
				var schedule *backuprecoveryv1.TargetSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				_, err := backupRecoveryService.NewOnpremDeployTargetConfiguration(schedule, retention)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewOracleTier successfully`, func() {
				tierType := "kOracleTierStandard"
				_model, err := backupRecoveryService.NewOracleTier(tierType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOracleTiers successfully`, func() {
				tiers := []backuprecoveryv1.OracleTier{}
				_model, err := backupRecoveryService.NewOracleTiers(tiers)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPatchDataSourceConnectionOptions successfully`, func() {
				// Construct an instance of the PatchDataSourceConnectionOptions model
				connectionID := "connectionId"
				xIbmTenantID := "tenantId"
				patchDataSourceConnectionOptionsConnectionName := "connectionName"
				patchDataSourceConnectionOptionsModel := backupRecoveryService.NewPatchDataSourceConnectionOptions(connectionID, xIbmTenantID, patchDataSourceConnectionOptionsConnectionName)
				patchDataSourceConnectionOptionsModel.SetConnectionID("connectionId")
				patchDataSourceConnectionOptionsModel.SetXIBMTenantID("tenantId")
				patchDataSourceConnectionOptionsModel.SetConnectionName("connectionName")
				patchDataSourceConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(patchDataSourceConnectionOptionsModel).ToNot(BeNil())
				Expect(patchDataSourceConnectionOptionsModel.ConnectionID).To(Equal(core.StringPtr("connectionId")))
				Expect(patchDataSourceConnectionOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(patchDataSourceConnectionOptionsModel.ConnectionName).To(Equal(core.StringPtr("connectionName")))
				Expect(patchDataSourceConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPatchDataSourceConnectorOptions successfully`, func() {
				// Construct an instance of the PatchDataSourceConnectorOptions model
				connectorID := "connectorID"
				xIbmTenantID := "tenantId"
				patchDataSourceConnectorOptionsModel := backupRecoveryService.NewPatchDataSourceConnectorOptions(connectorID, xIbmTenantID)
				patchDataSourceConnectorOptionsModel.SetConnectorID("connectorID")
				patchDataSourceConnectorOptionsModel.SetXIBMTenantID("tenantId")
				patchDataSourceConnectorOptionsModel.SetConnectorName("connectorName")
				patchDataSourceConnectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(patchDataSourceConnectorOptionsModel).ToNot(BeNil())
				Expect(patchDataSourceConnectorOptionsModel.ConnectorID).To(Equal(core.StringPtr("connectorID")))
				Expect(patchDataSourceConnectorOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(patchDataSourceConnectorOptionsModel.ConnectorName).To(Equal(core.StringPtr("connectorName")))
				Expect(patchDataSourceConnectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPatchProtectionSourceRegistrationOptions successfully`, func() {
				// Construct an instance of the PatchProtectionSourceRegistrationOptions model
				id := int64(26)
				xIbmTenantID := "tenantId"
				patchProtectionSourceRegistrationOptionsEnvironment := "kPhysical"
				patchProtectionSourceRegistrationOptionsModel := backupRecoveryService.NewPatchProtectionSourceRegistrationOptions(id, xIbmTenantID, patchProtectionSourceRegistrationOptionsEnvironment)
				patchProtectionSourceRegistrationOptionsModel.SetID(int64(26))
				patchProtectionSourceRegistrationOptionsModel.SetXIBMTenantID("tenantId")
				patchProtectionSourceRegistrationOptionsModel.SetEnvironment("kPhysical")
				patchProtectionSourceRegistrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(patchProtectionSourceRegistrationOptionsModel).ToNot(BeNil())
				Expect(patchProtectionSourceRegistrationOptionsModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(patchProtectionSourceRegistrationOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(patchProtectionSourceRegistrationOptionsModel.Environment).To(Equal(core.StringPtr("kPhysical")))
				Expect(patchProtectionSourceRegistrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPauseProtectionRunActionParams successfully`, func() {
				runID := "testString"
				_model, err := backupRecoveryService.NewPauseProtectionRunActionParams(runID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPerformActionOnProtectionGroupRunOptions successfully`, func() {
				// Construct an instance of the PauseProtectionRunActionParams model
				pauseProtectionRunActionParamsModel := new(backuprecoveryv1.PauseProtectionRunActionParams)
				Expect(pauseProtectionRunActionParamsModel).ToNot(BeNil())
				pauseProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")
				Expect(pauseProtectionRunActionParamsModel.RunID).To(Equal(core.StringPtr("11:111")))

				// Construct an instance of the ResumeProtectionRunActionParams model
				resumeProtectionRunActionParamsModel := new(backuprecoveryv1.ResumeProtectionRunActionParams)
				Expect(resumeProtectionRunActionParamsModel).ToNot(BeNil())
				resumeProtectionRunActionParamsModel.RunID = core.StringPtr("11:111")
				Expect(resumeProtectionRunActionParamsModel.RunID).To(Equal(core.StringPtr("11:111")))

				// Construct an instance of the CancelProtectionGroupRunRequest model
				cancelProtectionGroupRunRequestModel := new(backuprecoveryv1.CancelProtectionGroupRunRequest)
				Expect(cancelProtectionGroupRunRequestModel).ToNot(BeNil())
				cancelProtectionGroupRunRequestModel.RunID = core.StringPtr("11:111")
				cancelProtectionGroupRunRequestModel.LocalTaskID = core.StringPtr("123:456:789")
				cancelProtectionGroupRunRequestModel.ObjectIds = []int64{int64(26)}
				cancelProtectionGroupRunRequestModel.ReplicationTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.ArchivalTaskID = []string{"123:456:789"}
				cancelProtectionGroupRunRequestModel.CloudSpinTaskID = []string{"123:456:789"}
				Expect(cancelProtectionGroupRunRequestModel.RunID).To(Equal(core.StringPtr("11:111")))
				Expect(cancelProtectionGroupRunRequestModel.LocalTaskID).To(Equal(core.StringPtr("123:456:789")))
				Expect(cancelProtectionGroupRunRequestModel.ObjectIds).To(Equal([]int64{int64(26)}))
				Expect(cancelProtectionGroupRunRequestModel.ReplicationTaskID).To(Equal([]string{"123:456:789"}))
				Expect(cancelProtectionGroupRunRequestModel.ArchivalTaskID).To(Equal([]string{"123:456:789"}))
				Expect(cancelProtectionGroupRunRequestModel.CloudSpinTaskID).To(Equal([]string{"123:456:789"}))

				// Construct an instance of the PerformActionOnProtectionGroupRunOptions model
				id := "runId"
				xIbmTenantID := "tenantId"
				performActionOnProtectionGroupRunOptionsAction := "Pause"
				performActionOnProtectionGroupRunOptionsModel := backupRecoveryService.NewPerformActionOnProtectionGroupRunOptions(id, xIbmTenantID, performActionOnProtectionGroupRunOptionsAction)
				performActionOnProtectionGroupRunOptionsModel.SetID("runId")
				performActionOnProtectionGroupRunOptionsModel.SetXIBMTenantID("tenantId")
				performActionOnProtectionGroupRunOptionsModel.SetAction("Pause")
				performActionOnProtectionGroupRunOptionsModel.SetPauseParams([]backuprecoveryv1.PauseProtectionRunActionParams{*pauseProtectionRunActionParamsModel})
				performActionOnProtectionGroupRunOptionsModel.SetResumeParams([]backuprecoveryv1.ResumeProtectionRunActionParams{*resumeProtectionRunActionParamsModel})
				performActionOnProtectionGroupRunOptionsModel.SetCancelParams([]backuprecoveryv1.CancelProtectionGroupRunRequest{*cancelProtectionGroupRunRequestModel})
				performActionOnProtectionGroupRunOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(performActionOnProtectionGroupRunOptionsModel).ToNot(BeNil())
				Expect(performActionOnProtectionGroupRunOptionsModel.ID).To(Equal(core.StringPtr("runId")))
				Expect(performActionOnProtectionGroupRunOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(performActionOnProtectionGroupRunOptionsModel.Action).To(Equal(core.StringPtr("Pause")))
				Expect(performActionOnProtectionGroupRunOptionsModel.PauseParams).To(Equal([]backuprecoveryv1.PauseProtectionRunActionParams{*pauseProtectionRunActionParamsModel}))
				Expect(performActionOnProtectionGroupRunOptionsModel.ResumeParams).To(Equal([]backuprecoveryv1.ResumeProtectionRunActionParams{*resumeProtectionRunActionParamsModel}))
				Expect(performActionOnProtectionGroupRunOptionsModel.CancelParams).To(Equal([]backuprecoveryv1.CancelProtectionGroupRunRequest{*cancelProtectionGroupRunRequestModel}))
				Expect(performActionOnProtectionGroupRunOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPhysicalFileBackupPathParams successfully`, func() {
				includedPath := "testString"
				_model, err := backupRecoveryService.NewPhysicalFileBackupPathParams(includedPath)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalFileProtectionGroupObjectParams successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewPhysicalFileProtectionGroupObjectParams(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalFileProtectionGroupParams successfully`, func() {
				objects := []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{}
				_model, err := backupRecoveryService.NewPhysicalFileProtectionGroupParams(objects)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalMountVolumesNewTargetConfigServerCredentials successfully`, func() {
				username := "testString"
				password := "testString"
				_model, err := backupRecoveryService.NewPhysicalMountVolumesNewTargetConfigServerCredentials(username, password)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalMountVolumesOriginalTargetConfigServerCredentials successfully`, func() {
				username := "testString"
				password := "testString"
				_model, err := backupRecoveryService.NewPhysicalMountVolumesOriginalTargetConfigServerCredentials(username, password)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalProtectionGroupParams successfully`, func() {
				protectionType := "kFile"
				_model, err := backupRecoveryService.NewPhysicalProtectionGroupParams(protectionType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalSourceRegistrationParams successfully`, func() {
				endpoint := "testString"
				_model, err := backupRecoveryService.NewPhysicalSourceRegistrationParams(endpoint)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalTargetParamsForMountVolumeNewTargetConfig successfully`, func() {
				var mountTarget *backuprecoveryv1.RecoverTarget = nil
				_, err := backupRecoveryService.NewPhysicalTargetParamsForMountVolumeNewTargetConfig(mountTarget)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewPhysicalTargetParamsForRecoverFileAndFolderRecoverTarget successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewPhysicalTargetParamsForRecoverFileAndFolderRecoverTarget(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalTargetParamsForRecoverVolumeMountTarget successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewPhysicalTargetParamsForRecoverVolumeMountTarget(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalVolumeProtectionGroupObjectParams successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewPhysicalVolumeProtectionGroupObjectParams(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPhysicalVolumeProtectionGroupParams successfully`, func() {
				objects := []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{}
				_model, err := backupRecoveryService.NewPhysicalVolumeProtectionGroupParams(objects)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPrimaryArchivalTarget successfully`, func() {
				targetID := int64(26)
				_model, err := backupRecoveryService.NewPrimaryArchivalTarget(targetID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewProtectionGroupAlertingPolicy successfully`, func() {
				backupRunStatus := []string{"kSuccess"}
				_model, err := backupRecoveryService.NewProtectionGroupAlertingPolicy(backupRunStatus)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoverPhysicalFileAndFolderParamsPhysicalTargetParams successfully`, func() {
				var recoverTarget *backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget = nil
				_, err := backupRecoveryService.NewRecoverPhysicalFileAndFolderParamsPhysicalTargetParams(recoverTarget)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewRecoverPhysicalParams successfully`, func() {
				objects := []backuprecoveryv1.CommonRecoverObjectSnapshotParams{}
				recoveryAction := "RecoverPhysicalVolumes"
				_model, err := backupRecoveryService.NewRecoverPhysicalParams(objects, recoveryAction)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoverPhysicalParamsMountVolumeParams successfully`, func() {
				targetEnvironment := "kPhysical"
				_model, err := backupRecoveryService.NewRecoverPhysicalParamsMountVolumeParams(targetEnvironment)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoverPhysicalParamsRecoverFileAndFolderParams successfully`, func() {
				filesAndFolders := []backuprecoveryv1.CommonRecoverFileAndFolderInfo{}
				targetEnvironment := "kPhysical"
				_model, err := backupRecoveryService.NewRecoverPhysicalParamsRecoverFileAndFolderParams(filesAndFolders, targetEnvironment)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoverPhysicalParamsRecoverVolumeParams successfully`, func() {
				targetEnvironment := "kPhysical"
				_model, err := backupRecoveryService.NewRecoverPhysicalParamsRecoverVolumeParams(targetEnvironment)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoverPhysicalVolumeParamsPhysicalTargetParams successfully`, func() {
				var mountTarget *backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget = nil
				volumeMapping := []backuprecoveryv1.RecoverVolumeMapping{}
				_, err := backupRecoveryService.NewRecoverPhysicalVolumeParamsPhysicalTargetParams(mountTarget, volumeMapping)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewRecoverSqlAppNewSourceConfig successfully`, func() {
				dataFileDirectoryLocation := "testString"
				var host *backuprecoveryv1.RecoveryObjectIdentifier = nil
				instanceName := "testString"
				logFileDirectoryLocation := "testString"
				_, err := backupRecoveryService.NewRecoverSqlAppNewSourceConfig(dataFileDirectoryLocation, host, instanceName, logFileDirectoryLocation)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewRecoverSqlAppParams successfully`, func() {
				snapshotID := "testString"
				targetEnvironment := "kSQL"
				_model, err := backupRecoveryService.NewRecoverSqlAppParams(snapshotID, targetEnvironment)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoverSqlParams successfully`, func() {
				recoveryAction := "RecoverApps"
				_model, err := backupRecoveryService.NewRecoverSqlParams(recoveryAction)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoverTarget successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewRecoverTarget(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoverVolumeMapping successfully`, func() {
				sourceVolumeGuid := "testString"
				destinationVolumeGuid := "testString"
				_model, err := backupRecoveryService.NewRecoverVolumeMapping(sourceVolumeGuid, destinationVolumeGuid)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRecoveryObjectIdentifier successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewRecoveryObjectIdentifier(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRefreshProtectionSourceByIdOptions successfully`, func() {
				// Construct an instance of the RefreshProtectionSourceByIdOptions model
				id := int64(26)
				xIbmTenantID := "tenantId"
				refreshProtectionSourceByIdOptionsModel := backupRecoveryService.NewRefreshProtectionSourceByIdOptions(id, xIbmTenantID)
				refreshProtectionSourceByIdOptionsModel.SetID(int64(26))
				refreshProtectionSourceByIdOptionsModel.SetXIBMTenantID("tenantId")
				refreshProtectionSourceByIdOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(refreshProtectionSourceByIdOptionsModel).ToNot(BeNil())
				Expect(refreshProtectionSourceByIdOptionsModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(refreshProtectionSourceByIdOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(refreshProtectionSourceByIdOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRegisterProtectionSourceOptions successfully`, func() {
				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				Expect(connectionConfigModel).ToNot(BeNil())
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				Expect(connectionConfigModel.ConnectionID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(connectionConfigModel.EntityID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(connectionConfigModel.ConnectorGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(connectionConfigModel.DataSourceConnectionID).To(Equal(core.StringPtr("DatasourceConnectionId")))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				Expect(keyValuePairModel).ToNot(BeNil())
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")
				Expect(keyValuePairModel.Key).To(Equal(core.StringPtr("configKey")))
				Expect(keyValuePairModel.Value).To(Equal(core.StringPtr("configValue")))

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				Expect(physicalSourceRegistrationParamsModel).ToNot(BeNil())
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}
				Expect(physicalSourceRegistrationParamsModel.Endpoint).To(Equal(core.StringPtr("xxx.xx.xx.xx")))
				Expect(physicalSourceRegistrationParamsModel.ForceRegister).To(Equal(core.BoolPtr(true)))
				Expect(physicalSourceRegistrationParamsModel.HostType).To(Equal(core.StringPtr("kLinux")))
				Expect(physicalSourceRegistrationParamsModel.PhysicalType).To(Equal(core.StringPtr("kGroup")))
				Expect(physicalSourceRegistrationParamsModel.Applications).To(Equal([]string{"kSQL"}))

				// Construct an instance of the RegisterProtectionSourceOptions model
				xIbmTenantID := "tenantId"
				registerProtectionSourceOptionsEnvironment := "kPhysical"
				registerProtectionSourceOptionsModel := backupRecoveryService.NewRegisterProtectionSourceOptions(xIbmTenantID, registerProtectionSourceOptionsEnvironment)
				registerProtectionSourceOptionsModel.SetXIBMTenantID("tenantId")
				registerProtectionSourceOptionsModel.SetEnvironment("kPhysical")
				registerProtectionSourceOptionsModel.SetName("register-protection-source")
				registerProtectionSourceOptionsModel.SetIsInternalEncrypted(true)
				registerProtectionSourceOptionsModel.SetEncryptionKey("encryptionKey")
				registerProtectionSourceOptionsModel.SetConnectionID(int64(26))
				registerProtectionSourceOptionsModel.SetConnections([]backuprecoveryv1.ConnectionConfig{*connectionConfigModel})
				registerProtectionSourceOptionsModel.SetConnectorGroupID(int64(26))
				registerProtectionSourceOptionsModel.SetAdvancedConfigs([]backuprecoveryv1.KeyValuePair{*keyValuePairModel})
				registerProtectionSourceOptionsModel.SetDataSourceConnectionID("DatasourceConnectionId")
				registerProtectionSourceOptionsModel.SetPhysicalParams(physicalSourceRegistrationParamsModel)
				registerProtectionSourceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(registerProtectionSourceOptionsModel).ToNot(BeNil())
				Expect(registerProtectionSourceOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(registerProtectionSourceOptionsModel.Environment).To(Equal(core.StringPtr("kPhysical")))
				Expect(registerProtectionSourceOptionsModel.Name).To(Equal(core.StringPtr("register-protection-source")))
				Expect(registerProtectionSourceOptionsModel.IsInternalEncrypted).To(Equal(core.BoolPtr(true)))
				Expect(registerProtectionSourceOptionsModel.EncryptionKey).To(Equal(core.StringPtr("encryptionKey")))
				Expect(registerProtectionSourceOptionsModel.ConnectionID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(registerProtectionSourceOptionsModel.Connections).To(Equal([]backuprecoveryv1.ConnectionConfig{*connectionConfigModel}))
				Expect(registerProtectionSourceOptionsModel.ConnectorGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(registerProtectionSourceOptionsModel.AdvancedConfigs).To(Equal([]backuprecoveryv1.KeyValuePair{*keyValuePairModel}))
				Expect(registerProtectionSourceOptionsModel.DataSourceConnectionID).To(Equal(core.StringPtr("DatasourceConnectionId")))
				Expect(registerProtectionSourceOptionsModel.PhysicalParams).To(Equal(physicalSourceRegistrationParamsModel))
				Expect(registerProtectionSourceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoteTargetConfig successfully`, func() {
				clusterID := int64(26)
				_model, err := backupRecoveryService.NewRemoteTargetConfig(clusterID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewReplicationTargetConfiguration successfully`, func() {
				var schedule *backuprecoveryv1.TargetSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				targetType := "RemoteCluster"
				_, err := backupRecoveryService.NewReplicationTargetConfiguration(schedule, retention, targetType)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewResumeProtectionRunActionParams successfully`, func() {
				runID := "testString"
				_model, err := backupRecoveryService.NewResumeProtectionRunActionParams(runID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRetention successfully`, func() {
				unit := "Days"
				duration := int64(1)
				_model, err := backupRecoveryService.NewRetention(unit, duration)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRpaasTargetConfiguration successfully`, func() {
				var schedule *backuprecoveryv1.TargetSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				targetID := int64(26)
				_, err := backupRecoveryService.NewRpaasTargetConfiguration(schedule, retention, targetID)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewRunArchivalConfig successfully`, func() {
				id := int64(26)
				archivalTargetType := "Tape"
				_model, err := backupRecoveryService.NewRunArchivalConfig(id, archivalTargetType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRunCloudReplicationConfig successfully`, func() {
				targetType := "AWS"
				_model, err := backupRecoveryService.NewRunCloudReplicationConfig(targetType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRunObject successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewRunObject(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRunReplicationConfig successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewRunReplicationConfig(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSearchExchangeObjectsRequestParams successfully`, func() {
				searchString := "testString"
				_model, err := backupRecoveryService.NewSearchExchangeObjectsRequestParams(searchString)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSearchIndexedObjectsOptions successfully`, func() {
				// Construct an instance of the CassandraOnPremSearchParams model
				cassandraOnPremSearchParamsModel := new(backuprecoveryv1.CassandraOnPremSearchParams)
				Expect(cassandraOnPremSearchParamsModel).ToNot(BeNil())
				cassandraOnPremSearchParamsModel.CassandraObjectTypes = []string{"CassandraKeyspaces"}
				cassandraOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				cassandraOnPremSearchParamsModel.SourceIds = []int64{int64(26)}
				Expect(cassandraOnPremSearchParamsModel.CassandraObjectTypes).To(Equal([]string{"CassandraKeyspaces"}))
				Expect(cassandraOnPremSearchParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(cassandraOnPremSearchParamsModel.SourceIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the CouchBaseOnPremSearchParams model
				couchBaseOnPremSearchParamsModel := new(backuprecoveryv1.CouchBaseOnPremSearchParams)
				Expect(couchBaseOnPremSearchParamsModel).ToNot(BeNil())
				couchBaseOnPremSearchParamsModel.CouchbaseObjectTypes = []string{"CouchbaseBuckets"}
				couchBaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				couchBaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}
				Expect(couchBaseOnPremSearchParamsModel.CouchbaseObjectTypes).To(Equal([]string{"CouchbaseBuckets"}))
				Expect(couchBaseOnPremSearchParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(couchBaseOnPremSearchParamsModel.SourceIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the O365SearchEmailsRequestParams model
				o365SearchEmailsRequestParamsModel := new(backuprecoveryv1.O365SearchEmailsRequestParams)
				Expect(o365SearchEmailsRequestParamsModel).ToNot(BeNil())
				o365SearchEmailsRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchEmailsRequestParamsModel.MailboxIds = []int64{int64(26)}
				Expect(o365SearchEmailsRequestParamsModel.DomainIds).To(Equal([]int64{int64(26)}))
				Expect(o365SearchEmailsRequestParamsModel.MailboxIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the SearchEmailRequestParams model
				searchEmailRequestParamsModel := new(backuprecoveryv1.SearchEmailRequestParams)
				Expect(searchEmailRequestParamsModel).ToNot(BeNil())
				searchEmailRequestParamsModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsModel.Types = []string{"Email"}
				searchEmailRequestParamsModel.O365Params = o365SearchEmailsRequestParamsModel
				Expect(searchEmailRequestParamsModel.AttendeesAddresses).To(Equal([]string{"attendee1@domain.com"}))
				Expect(searchEmailRequestParamsModel.BccRecipientAddresses).To(Equal([]string{"bccrecipient@domain.com"}))
				Expect(searchEmailRequestParamsModel.CcRecipientAddresses).To(Equal([]string{"ccrecipient@domain.com"}))
				Expect(searchEmailRequestParamsModel.CreatedEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsModel.CreatedStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsModel.DueDateEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsModel.DueDateStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsModel.EmailAddress).To(Equal(core.StringPtr("email@domain.com")))
				Expect(searchEmailRequestParamsModel.EmailSubject).To(Equal(core.StringPtr("Email Subject")))
				Expect(searchEmailRequestParamsModel.FirstName).To(Equal(core.StringPtr("First Name")))
				Expect(searchEmailRequestParamsModel.FolderNames).To(Equal([]string{"folder1"}))
				Expect(searchEmailRequestParamsModel.HasAttachment).To(Equal(core.BoolPtr(true)))
				Expect(searchEmailRequestParamsModel.LastModifiedEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsModel.LastModifiedStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsModel.LastName).To(Equal(core.StringPtr("Last Name")))
				Expect(searchEmailRequestParamsModel.MiddleName).To(Equal(core.StringPtr("Middle Name")))
				Expect(searchEmailRequestParamsModel.OrganizerAddress).To(Equal(core.StringPtr("organizer@domain.com")))
				Expect(searchEmailRequestParamsModel.ReceivedEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsModel.ReceivedStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsModel.RecipientAddresses).To(Equal([]string{"recipient@domain.com"}))
				Expect(searchEmailRequestParamsModel.SenderAddress).To(Equal(core.StringPtr("sender@domain.com")))
				Expect(searchEmailRequestParamsModel.SourceEnvironment).To(Equal(core.StringPtr("kO365")))
				Expect(searchEmailRequestParamsModel.TaskStatusTypes).To(Equal([]string{"NotStarted"}))
				Expect(searchEmailRequestParamsModel.Types).To(Equal([]string{"Email"}))
				Expect(searchEmailRequestParamsModel.O365Params).To(Equal(o365SearchEmailsRequestParamsModel))

				// Construct an instance of the SearchExchangeObjectsRequestParams model
				searchExchangeObjectsRequestParamsModel := new(backuprecoveryv1.SearchExchangeObjectsRequestParams)
				Expect(searchExchangeObjectsRequestParamsModel).ToNot(BeNil())
				searchExchangeObjectsRequestParamsModel.SearchString = core.StringPtr("searchString")
				Expect(searchExchangeObjectsRequestParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))

				// Construct an instance of the SearchFileRequestParams model
				searchFileRequestParamsModel := new(backuprecoveryv1.SearchFileRequestParams)
				Expect(searchFileRequestParamsModel).ToNot(BeNil())
				searchFileRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchFileRequestParamsModel.Types = []string{"File"}
				searchFileRequestParamsModel.SourceEnvironments = []string{"kVMware"}
				searchFileRequestParamsModel.SourceIds = []int64{int64(26)}
				searchFileRequestParamsModel.ObjectIds = []int64{int64(26)}
				Expect(searchFileRequestParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(searchFileRequestParamsModel.Types).To(Equal([]string{"File"}))
				Expect(searchFileRequestParamsModel.SourceEnvironments).To(Equal([]string{"kVMware"}))
				Expect(searchFileRequestParamsModel.SourceIds).To(Equal([]int64{int64(26)}))
				Expect(searchFileRequestParamsModel.ObjectIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the HbaseOnPremSearchParams model
				hbaseOnPremSearchParamsModel := new(backuprecoveryv1.HbaseOnPremSearchParams)
				Expect(hbaseOnPremSearchParamsModel).ToNot(BeNil())
				hbaseOnPremSearchParamsModel.HbaseObjectTypes = []string{"HbaseNamespaces"}
				hbaseOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hbaseOnPremSearchParamsModel.SourceIds = []int64{int64(26)}
				Expect(hbaseOnPremSearchParamsModel.HbaseObjectTypes).To(Equal([]string{"HbaseNamespaces"}))
				Expect(hbaseOnPremSearchParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(hbaseOnPremSearchParamsModel.SourceIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the HDFSOnPremSearchParams model
				hdfsOnPremSearchParamsModel := new(backuprecoveryv1.HDFSOnPremSearchParams)
				Expect(hdfsOnPremSearchParamsModel).ToNot(BeNil())
				hdfsOnPremSearchParamsModel.HdfsTypes = []string{"HDFSFolders"}
				hdfsOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hdfsOnPremSearchParamsModel.SourceIds = []int64{int64(26)}
				Expect(hdfsOnPremSearchParamsModel.HdfsTypes).To(Equal([]string{"HDFSFolders"}))
				Expect(hdfsOnPremSearchParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(hdfsOnPremSearchParamsModel.SourceIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the HiveOnPremSearchParams model
				hiveOnPremSearchParamsModel := new(backuprecoveryv1.HiveOnPremSearchParams)
				Expect(hiveOnPremSearchParamsModel).ToNot(BeNil())
				hiveOnPremSearchParamsModel.HiveObjectTypes = []string{"HiveDatabases"}
				hiveOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				hiveOnPremSearchParamsModel.SourceIds = []int64{int64(26)}
				Expect(hiveOnPremSearchParamsModel.HiveObjectTypes).To(Equal([]string{"HiveDatabases"}))
				Expect(hiveOnPremSearchParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(hiveOnPremSearchParamsModel.SourceIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the MongoDbOnPremSearchParams model
				mongoDbOnPremSearchParamsModel := new(backuprecoveryv1.MongoDbOnPremSearchParams)
				Expect(mongoDbOnPremSearchParamsModel).ToNot(BeNil())
				mongoDbOnPremSearchParamsModel.MongoDBObjectTypes = []string{"MongoDatabases"}
				mongoDbOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				mongoDbOnPremSearchParamsModel.SourceIds = []int64{int64(26)}
				Expect(mongoDbOnPremSearchParamsModel.MongoDBObjectTypes).To(Equal([]string{"MongoDatabases"}))
				Expect(mongoDbOnPremSearchParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(mongoDbOnPremSearchParamsModel.SourceIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the SearchEmailRequestParamsBase model
				searchEmailRequestParamsBaseModel := new(backuprecoveryv1.SearchEmailRequestParamsBase)
				Expect(searchEmailRequestParamsBaseModel).ToNot(BeNil())
				searchEmailRequestParamsBaseModel.AttendeesAddresses = []string{"attendee1@domain.com"}
				searchEmailRequestParamsBaseModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchEmailRequestParamsBaseModel.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.EmailAddress = core.StringPtr("email@domain.com")
				searchEmailRequestParamsBaseModel.EmailSubject = core.StringPtr("Email Subject")
				searchEmailRequestParamsBaseModel.FirstName = core.StringPtr("First Name")
				searchEmailRequestParamsBaseModel.FolderNames = []string{"folder1"}
				searchEmailRequestParamsBaseModel.HasAttachment = core.BoolPtr(true)
				searchEmailRequestParamsBaseModel.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.LastName = core.StringPtr("Last Name")
				searchEmailRequestParamsBaseModel.MiddleName = core.StringPtr("Middle Name")
				searchEmailRequestParamsBaseModel.OrganizerAddress = core.StringPtr("organizer@domain.com")
				searchEmailRequestParamsBaseModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchEmailRequestParamsBaseModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchEmailRequestParamsBaseModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchEmailRequestParamsBaseModel.SourceEnvironment = core.StringPtr("kO365")
				searchEmailRequestParamsBaseModel.TaskStatusTypes = []string{"NotStarted"}
				searchEmailRequestParamsBaseModel.Types = []string{"Email"}
				Expect(searchEmailRequestParamsBaseModel.AttendeesAddresses).To(Equal([]string{"attendee1@domain.com"}))
				Expect(searchEmailRequestParamsBaseModel.BccRecipientAddresses).To(Equal([]string{"bccrecipient@domain.com"}))
				Expect(searchEmailRequestParamsBaseModel.CcRecipientAddresses).To(Equal([]string{"ccrecipient@domain.com"}))
				Expect(searchEmailRequestParamsBaseModel.CreatedEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsBaseModel.CreatedStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsBaseModel.DueDateEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsBaseModel.DueDateStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsBaseModel.EmailAddress).To(Equal(core.StringPtr("email@domain.com")))
				Expect(searchEmailRequestParamsBaseModel.EmailSubject).To(Equal(core.StringPtr("Email Subject")))
				Expect(searchEmailRequestParamsBaseModel.FirstName).To(Equal(core.StringPtr("First Name")))
				Expect(searchEmailRequestParamsBaseModel.FolderNames).To(Equal([]string{"folder1"}))
				Expect(searchEmailRequestParamsBaseModel.HasAttachment).To(Equal(core.BoolPtr(true)))
				Expect(searchEmailRequestParamsBaseModel.LastModifiedEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsBaseModel.LastModifiedStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsBaseModel.LastName).To(Equal(core.StringPtr("Last Name")))
				Expect(searchEmailRequestParamsBaseModel.MiddleName).To(Equal(core.StringPtr("Middle Name")))
				Expect(searchEmailRequestParamsBaseModel.OrganizerAddress).To(Equal(core.StringPtr("organizer@domain.com")))
				Expect(searchEmailRequestParamsBaseModel.ReceivedEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsBaseModel.ReceivedStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchEmailRequestParamsBaseModel.RecipientAddresses).To(Equal([]string{"recipient@domain.com"}))
				Expect(searchEmailRequestParamsBaseModel.SenderAddress).To(Equal(core.StringPtr("sender@domain.com")))
				Expect(searchEmailRequestParamsBaseModel.SourceEnvironment).To(Equal(core.StringPtr("kO365")))
				Expect(searchEmailRequestParamsBaseModel.TaskStatusTypes).To(Equal([]string{"NotStarted"}))
				Expect(searchEmailRequestParamsBaseModel.Types).To(Equal([]string{"Email"}))

				// Construct an instance of the O365SearchRequestParams model
				o365SearchRequestParamsModel := new(backuprecoveryv1.O365SearchRequestParams)
				Expect(o365SearchRequestParamsModel).ToNot(BeNil())
				o365SearchRequestParamsModel.DomainIds = []int64{int64(26)}
				o365SearchRequestParamsModel.GroupIds = []int64{int64(26)}
				o365SearchRequestParamsModel.SiteIds = []int64{int64(26)}
				o365SearchRequestParamsModel.TeamsIds = []int64{int64(26)}
				o365SearchRequestParamsModel.UserIds = []int64{int64(26)}
				Expect(o365SearchRequestParamsModel.DomainIds).To(Equal([]int64{int64(26)}))
				Expect(o365SearchRequestParamsModel.GroupIds).To(Equal([]int64{int64(26)}))
				Expect(o365SearchRequestParamsModel.SiteIds).To(Equal([]int64{int64(26)}))
				Expect(o365SearchRequestParamsModel.TeamsIds).To(Equal([]int64{int64(26)}))
				Expect(o365SearchRequestParamsModel.UserIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the SearchDocumentLibraryRequestParams model
				searchDocumentLibraryRequestParamsModel := new(backuprecoveryv1.SearchDocumentLibraryRequestParams)
				Expect(searchDocumentLibraryRequestParamsModel).ToNot(BeNil())
				searchDocumentLibraryRequestParamsModel.CategoryTypes = []string{"Document"}
				searchDocumentLibraryRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.IncludeFiles = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.IncludeFolders = core.BoolPtr(true)
				searchDocumentLibraryRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchDocumentLibraryRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchDocumentLibraryRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchDocumentLibraryRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchDocumentLibraryRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))
				Expect(searchDocumentLibraryRequestParamsModel.CategoryTypes).To(Equal([]string{"Document"}))
				Expect(searchDocumentLibraryRequestParamsModel.CreationEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchDocumentLibraryRequestParamsModel.CreationStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchDocumentLibraryRequestParamsModel.IncludeFiles).To(Equal(core.BoolPtr(true)))
				Expect(searchDocumentLibraryRequestParamsModel.IncludeFolders).To(Equal(core.BoolPtr(true)))
				Expect(searchDocumentLibraryRequestParamsModel.O365Params).To(Equal(o365SearchRequestParamsModel))
				Expect(searchDocumentLibraryRequestParamsModel.OwnerNames).To(Equal([]string{"ownerName1"}))
				Expect(searchDocumentLibraryRequestParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(searchDocumentLibraryRequestParamsModel.SizeBytesLowerLimit).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchDocumentLibraryRequestParamsModel.SizeBytesUpperLimit).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the SearchMsGroupsRequestParams model
				searchMsGroupsRequestParamsModel := new(backuprecoveryv1.SearchMsGroupsRequestParams)
				Expect(searchMsGroupsRequestParamsModel).ToNot(BeNil())
				searchMsGroupsRequestParamsModel.MailboxParams = searchEmailRequestParamsBaseModel
				searchMsGroupsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsGroupsRequestParamsModel.SiteParams = searchDocumentLibraryRequestParamsModel
				Expect(searchMsGroupsRequestParamsModel.MailboxParams).To(Equal(searchEmailRequestParamsBaseModel))
				Expect(searchMsGroupsRequestParamsModel.O365Params).To(Equal(o365SearchRequestParamsModel))
				Expect(searchMsGroupsRequestParamsModel.SiteParams).To(Equal(searchDocumentLibraryRequestParamsModel))

				// Construct an instance of the O365TeamsChannelsSearchRequestParams model
				o365TeamsChannelsSearchRequestParamsModel := new(backuprecoveryv1.O365TeamsChannelsSearchRequestParams)
				Expect(o365TeamsChannelsSearchRequestParamsModel).ToNot(BeNil())
				o365TeamsChannelsSearchRequestParamsModel.ChannelEmail = core.StringPtr("channel@domain.com")
				o365TeamsChannelsSearchRequestParamsModel.ChannelID = core.StringPtr("channelId")
				o365TeamsChannelsSearchRequestParamsModel.ChannelName = core.StringPtr("channelName")
				o365TeamsChannelsSearchRequestParamsModel.IncludePrivateChannels = core.BoolPtr(true)
				o365TeamsChannelsSearchRequestParamsModel.IncludePublicChannels = core.BoolPtr(true)
				Expect(o365TeamsChannelsSearchRequestParamsModel.ChannelEmail).To(Equal(core.StringPtr("channel@domain.com")))
				Expect(o365TeamsChannelsSearchRequestParamsModel.ChannelID).To(Equal(core.StringPtr("channelId")))
				Expect(o365TeamsChannelsSearchRequestParamsModel.ChannelName).To(Equal(core.StringPtr("channelName")))
				Expect(o365TeamsChannelsSearchRequestParamsModel.IncludePrivateChannels).To(Equal(core.BoolPtr(true)))
				Expect(o365TeamsChannelsSearchRequestParamsModel.IncludePublicChannels).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the SearchMsTeamsRequestParams model
				searchMsTeamsRequestParamsModel := new(backuprecoveryv1.SearchMsTeamsRequestParams)
				Expect(searchMsTeamsRequestParamsModel).ToNot(BeNil())
				searchMsTeamsRequestParamsModel.CategoryTypes = []string{"Document"}
				searchMsTeamsRequestParamsModel.ChannelNames = []string{"channelName1"}
				searchMsTeamsRequestParamsModel.ChannelParams = o365TeamsChannelsSearchRequestParamsModel
				searchMsTeamsRequestParamsModel.CreationEndTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.CreationStartTimeSecs = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.O365Params = o365SearchRequestParamsModel
				searchMsTeamsRequestParamsModel.OwnerNames = []string{"ownerName1"}
				searchMsTeamsRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchMsTeamsRequestParamsModel.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.SizeBytesUpperLimit = core.Int64Ptr(int64(26))
				searchMsTeamsRequestParamsModel.Types = []string{"Channel"}
				Expect(searchMsTeamsRequestParamsModel.CategoryTypes).To(Equal([]string{"Document"}))
				Expect(searchMsTeamsRequestParamsModel.ChannelNames).To(Equal([]string{"channelName1"}))
				Expect(searchMsTeamsRequestParamsModel.ChannelParams).To(Equal(o365TeamsChannelsSearchRequestParamsModel))
				Expect(searchMsTeamsRequestParamsModel.CreationEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchMsTeamsRequestParamsModel.CreationStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchMsTeamsRequestParamsModel.O365Params).To(Equal(o365SearchRequestParamsModel))
				Expect(searchMsTeamsRequestParamsModel.OwnerNames).To(Equal([]string{"ownerName1"}))
				Expect(searchMsTeamsRequestParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(searchMsTeamsRequestParamsModel.SizeBytesLowerLimit).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchMsTeamsRequestParamsModel.SizeBytesUpperLimit).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchMsTeamsRequestParamsModel.Types).To(Equal([]string{"Channel"}))

				// Construct an instance of the SearchPublicFolderRequestParams model
				searchPublicFolderRequestParamsModel := new(backuprecoveryv1.SearchPublicFolderRequestParams)
				Expect(searchPublicFolderRequestParamsModel).ToNot(BeNil())
				searchPublicFolderRequestParamsModel.SearchString = core.StringPtr("searchString")
				searchPublicFolderRequestParamsModel.Types = []string{"Calendar"}
				searchPublicFolderRequestParamsModel.HasAttachment = core.BoolPtr(true)
				searchPublicFolderRequestParamsModel.SenderAddress = core.StringPtr("sender@domain.com")
				searchPublicFolderRequestParamsModel.RecipientAddresses = []string{"recipient@domain.com"}
				searchPublicFolderRequestParamsModel.CcRecipientAddresses = []string{"ccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.BccRecipientAddresses = []string{"bccrecipient@domain.com"}
				searchPublicFolderRequestParamsModel.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
				searchPublicFolderRequestParamsModel.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
				Expect(searchPublicFolderRequestParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(searchPublicFolderRequestParamsModel.Types).To(Equal([]string{"Calendar"}))
				Expect(searchPublicFolderRequestParamsModel.HasAttachment).To(Equal(core.BoolPtr(true)))
				Expect(searchPublicFolderRequestParamsModel.SenderAddress).To(Equal(core.StringPtr("sender@domain.com")))
				Expect(searchPublicFolderRequestParamsModel.RecipientAddresses).To(Equal([]string{"recipient@domain.com"}))
				Expect(searchPublicFolderRequestParamsModel.CcRecipientAddresses).To(Equal([]string{"ccrecipient@domain.com"}))
				Expect(searchPublicFolderRequestParamsModel.BccRecipientAddresses).To(Equal([]string{"bccrecipient@domain.com"}))
				Expect(searchPublicFolderRequestParamsModel.ReceivedStartTimeSecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchPublicFolderRequestParamsModel.ReceivedEndTimeSecs).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the SearchSfdcRecordsRequestParams model
				searchSfdcRecordsRequestParamsModel := new(backuprecoveryv1.SearchSfdcRecordsRequestParams)
				Expect(searchSfdcRecordsRequestParamsModel).ToNot(BeNil())
				searchSfdcRecordsRequestParamsModel.MutationTypes = []string{"All"}
				searchSfdcRecordsRequestParamsModel.ObjectName = core.StringPtr("objectName")
				searchSfdcRecordsRequestParamsModel.QueryString = core.StringPtr("queryString")
				searchSfdcRecordsRequestParamsModel.SnapshotID = core.StringPtr("snapshotId")
				Expect(searchSfdcRecordsRequestParamsModel.MutationTypes).To(Equal([]string{"All"}))
				Expect(searchSfdcRecordsRequestParamsModel.ObjectName).To(Equal(core.StringPtr("objectName")))
				Expect(searchSfdcRecordsRequestParamsModel.QueryString).To(Equal(core.StringPtr("queryString")))
				Expect(searchSfdcRecordsRequestParamsModel.SnapshotID).To(Equal(core.StringPtr("snapshotId")))

				// Construct an instance of the UdaOnPremSearchParams model
				udaOnPremSearchParamsModel := new(backuprecoveryv1.UdaOnPremSearchParams)
				Expect(udaOnPremSearchParamsModel).ToNot(BeNil())
				udaOnPremSearchParamsModel.SearchString = core.StringPtr("searchString")
				udaOnPremSearchParamsModel.SourceIds = []int64{int64(26)}
				Expect(udaOnPremSearchParamsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(udaOnPremSearchParamsModel.SourceIds).To(Equal([]int64{int64(26)}))

				// Construct an instance of the SearchIndexedObjectsOptions model
				xIbmTenantID := "tenantId"
				searchIndexedObjectsOptionsObjectType := "Emails"
				searchIndexedObjectsOptionsModel := backupRecoveryService.NewSearchIndexedObjectsOptions(xIbmTenantID, searchIndexedObjectsOptionsObjectType)
				searchIndexedObjectsOptionsModel.SetXIBMTenantID("tenantId")
				searchIndexedObjectsOptionsModel.SetObjectType("Emails")
				searchIndexedObjectsOptionsModel.SetProtectionGroupIds([]string{"protectionGroupId1"})
				searchIndexedObjectsOptionsModel.SetStorageDomainIds([]int64{int64(26)})
				searchIndexedObjectsOptionsModel.SetTenantID("tenantId")
				searchIndexedObjectsOptionsModel.SetIncludeTenants(false)
				searchIndexedObjectsOptionsModel.SetTags([]string{"123:456:ABC-123", "123:456:ABC-456"})
				searchIndexedObjectsOptionsModel.SetSnapshotTags([]string{"123:456:DEF-123", "123:456:DEF-456"})
				searchIndexedObjectsOptionsModel.SetMustHaveTagIds([]string{"123:456:ABC-123"})
				searchIndexedObjectsOptionsModel.SetMightHaveTagIds([]string{"123:456:ABC-456"})
				searchIndexedObjectsOptionsModel.SetMustHaveSnapshotTagIds([]string{"123:456:DEF-123"})
				searchIndexedObjectsOptionsModel.SetMightHaveSnapshotTagIds([]string{"123:456:DEF-456"})
				searchIndexedObjectsOptionsModel.SetPaginationCookie("paginationCookie")
				searchIndexedObjectsOptionsModel.SetCount(int64(38))
				searchIndexedObjectsOptionsModel.SetUseCachedData(true)
				searchIndexedObjectsOptionsModel.SetCassandraParams(cassandraOnPremSearchParamsModel)
				searchIndexedObjectsOptionsModel.SetCouchbaseParams(couchBaseOnPremSearchParamsModel)
				searchIndexedObjectsOptionsModel.SetEmailParams(searchEmailRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetExchangeParams(searchExchangeObjectsRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetFileParams(searchFileRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetHbaseParams(hbaseOnPremSearchParamsModel)
				searchIndexedObjectsOptionsModel.SetHdfsParams(hdfsOnPremSearchParamsModel)
				searchIndexedObjectsOptionsModel.SetHiveParams(hiveOnPremSearchParamsModel)
				searchIndexedObjectsOptionsModel.SetMongodbParams(mongoDbOnPremSearchParamsModel)
				searchIndexedObjectsOptionsModel.SetMsGroupsParams(searchMsGroupsRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetMsTeamsParams(searchMsTeamsRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetOneDriveParams(searchDocumentLibraryRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetPublicFolderParams(searchPublicFolderRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetSfdcParams(searchSfdcRecordsRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetSharepointParams(searchDocumentLibraryRequestParamsModel)
				searchIndexedObjectsOptionsModel.SetUdaParams(udaOnPremSearchParamsModel)
				searchIndexedObjectsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(searchIndexedObjectsOptionsModel).ToNot(BeNil())
				Expect(searchIndexedObjectsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(searchIndexedObjectsOptionsModel.ObjectType).To(Equal(core.StringPtr("Emails")))
				Expect(searchIndexedObjectsOptionsModel.ProtectionGroupIds).To(Equal([]string{"protectionGroupId1"}))
				Expect(searchIndexedObjectsOptionsModel.StorageDomainIds).To(Equal([]int64{int64(26)}))
				Expect(searchIndexedObjectsOptionsModel.TenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(searchIndexedObjectsOptionsModel.IncludeTenants).To(Equal(core.BoolPtr(false)))
				Expect(searchIndexedObjectsOptionsModel.Tags).To(Equal([]string{"123:456:ABC-123", "123:456:ABC-456"}))
				Expect(searchIndexedObjectsOptionsModel.SnapshotTags).To(Equal([]string{"123:456:DEF-123", "123:456:DEF-456"}))
				Expect(searchIndexedObjectsOptionsModel.MustHaveTagIds).To(Equal([]string{"123:456:ABC-123"}))
				Expect(searchIndexedObjectsOptionsModel.MightHaveTagIds).To(Equal([]string{"123:456:ABC-456"}))
				Expect(searchIndexedObjectsOptionsModel.MustHaveSnapshotTagIds).To(Equal([]string{"123:456:DEF-123"}))
				Expect(searchIndexedObjectsOptionsModel.MightHaveSnapshotTagIds).To(Equal([]string{"123:456:DEF-456"}))
				Expect(searchIndexedObjectsOptionsModel.PaginationCookie).To(Equal(core.StringPtr("paginationCookie")))
				Expect(searchIndexedObjectsOptionsModel.Count).To(Equal(core.Int64Ptr(int64(38))))
				Expect(searchIndexedObjectsOptionsModel.UseCachedData).To(Equal(core.BoolPtr(true)))
				Expect(searchIndexedObjectsOptionsModel.CassandraParams).To(Equal(cassandraOnPremSearchParamsModel))
				Expect(searchIndexedObjectsOptionsModel.CouchbaseParams).To(Equal(couchBaseOnPremSearchParamsModel))
				Expect(searchIndexedObjectsOptionsModel.EmailParams).To(Equal(searchEmailRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.ExchangeParams).To(Equal(searchExchangeObjectsRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.FileParams).To(Equal(searchFileRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.HbaseParams).To(Equal(hbaseOnPremSearchParamsModel))
				Expect(searchIndexedObjectsOptionsModel.HdfsParams).To(Equal(hdfsOnPremSearchParamsModel))
				Expect(searchIndexedObjectsOptionsModel.HiveParams).To(Equal(hiveOnPremSearchParamsModel))
				Expect(searchIndexedObjectsOptionsModel.MongodbParams).To(Equal(mongoDbOnPremSearchParamsModel))
				Expect(searchIndexedObjectsOptionsModel.MsGroupsParams).To(Equal(searchMsGroupsRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.MsTeamsParams).To(Equal(searchMsTeamsRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.OneDriveParams).To(Equal(searchDocumentLibraryRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.PublicFolderParams).To(Equal(searchPublicFolderRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.SfdcParams).To(Equal(searchSfdcRecordsRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.SharepointParams).To(Equal(searchDocumentLibraryRequestParamsModel))
				Expect(searchIndexedObjectsOptionsModel.UdaParams).To(Equal(udaOnPremSearchParamsModel))
				Expect(searchIndexedObjectsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSearchObjectsOptions successfully`, func() {
				// Construct an instance of the SearchObjectsOptions model
				xIbmTenantID := "tenantId"
				searchObjectsOptionsModel := backupRecoveryService.NewSearchObjectsOptions(xIbmTenantID)
				searchObjectsOptionsModel.SetXIBMTenantID("tenantId")
				searchObjectsOptionsModel.SetRequestInitiatorType("UIUser")
				searchObjectsOptionsModel.SetSearchString("searchString")
				searchObjectsOptionsModel.SetEnvironments([]string{"kPhysical"})
				searchObjectsOptionsModel.SetProtectionTypes([]string{"kAgent"})
				searchObjectsOptionsModel.SetProtectionGroupIds([]string{"protectionGroupId1"})
				searchObjectsOptionsModel.SetObjectIds([]int64{int64(26)})
				searchObjectsOptionsModel.SetOsTypes([]string{"kLinux"})
				searchObjectsOptionsModel.SetSourceIds([]int64{int64(26)})
				searchObjectsOptionsModel.SetSourceUUIDs([]string{"sourceUuid1"})
				searchObjectsOptionsModel.SetIsProtected(true)
				searchObjectsOptionsModel.SetIsDeleted(true)
				searchObjectsOptionsModel.SetLastRunStatusList([]string{"Accepted"})
				searchObjectsOptionsModel.SetClusterIdentifiers([]string{"clusterIdentifier1"})
				searchObjectsOptionsModel.SetIncludeDeletedObjects(true)
				searchObjectsOptionsModel.SetPaginationCookie("paginationCookie")
				searchObjectsOptionsModel.SetCount(int64(38))
				searchObjectsOptionsModel.SetMustHaveTagIds([]string{"123:456:ABC-123"})
				searchObjectsOptionsModel.SetMightHaveTagIds([]string{"123:456:ABC-456"})
				searchObjectsOptionsModel.SetMustHaveSnapshotTagIds([]string{"123:456:DEF-123"})
				searchObjectsOptionsModel.SetMightHaveSnapshotTagIds([]string{"123:456:DEF-456"})
				searchObjectsOptionsModel.SetTagSearchName("tagName")
				searchObjectsOptionsModel.SetTagNames([]string{"tag1"})
				searchObjectsOptionsModel.SetTagTypes([]string{"System"})
				searchObjectsOptionsModel.SetTagCategories([]string{"Security"})
				searchObjectsOptionsModel.SetTagSubCategories([]string{"Classification"})
				searchObjectsOptionsModel.SetIncludeHeliosTagInfoForObjects(true)
				searchObjectsOptionsModel.SetExternalFilters([]string{"filter1"})
				searchObjectsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(searchObjectsOptionsModel).ToNot(BeNil())
				Expect(searchObjectsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(searchObjectsOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(searchObjectsOptionsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(searchObjectsOptionsModel.Environments).To(Equal([]string{"kPhysical"}))
				Expect(searchObjectsOptionsModel.ProtectionTypes).To(Equal([]string{"kAgent"}))
				Expect(searchObjectsOptionsModel.ProtectionGroupIds).To(Equal([]string{"protectionGroupId1"}))
				Expect(searchObjectsOptionsModel.ObjectIds).To(Equal([]int64{int64(26)}))
				Expect(searchObjectsOptionsModel.OsTypes).To(Equal([]string{"kLinux"}))
				Expect(searchObjectsOptionsModel.SourceIds).To(Equal([]int64{int64(26)}))
				Expect(searchObjectsOptionsModel.SourceUUIDs).To(Equal([]string{"sourceUuid1"}))
				Expect(searchObjectsOptionsModel.IsProtected).To(Equal(core.BoolPtr(true)))
				Expect(searchObjectsOptionsModel.IsDeleted).To(Equal(core.BoolPtr(true)))
				Expect(searchObjectsOptionsModel.LastRunStatusList).To(Equal([]string{"Accepted"}))
				Expect(searchObjectsOptionsModel.ClusterIdentifiers).To(Equal([]string{"clusterIdentifier1"}))
				Expect(searchObjectsOptionsModel.IncludeDeletedObjects).To(Equal(core.BoolPtr(true)))
				Expect(searchObjectsOptionsModel.PaginationCookie).To(Equal(core.StringPtr("paginationCookie")))
				Expect(searchObjectsOptionsModel.Count).To(Equal(core.Int64Ptr(int64(38))))
				Expect(searchObjectsOptionsModel.MustHaveTagIds).To(Equal([]string{"123:456:ABC-123"}))
				Expect(searchObjectsOptionsModel.MightHaveTagIds).To(Equal([]string{"123:456:ABC-456"}))
				Expect(searchObjectsOptionsModel.MustHaveSnapshotTagIds).To(Equal([]string{"123:456:DEF-123"}))
				Expect(searchObjectsOptionsModel.MightHaveSnapshotTagIds).To(Equal([]string{"123:456:DEF-456"}))
				Expect(searchObjectsOptionsModel.TagSearchName).To(Equal(core.StringPtr("tagName")))
				Expect(searchObjectsOptionsModel.TagNames).To(Equal([]string{"tag1"}))
				Expect(searchObjectsOptionsModel.TagTypes).To(Equal([]string{"System"}))
				Expect(searchObjectsOptionsModel.TagCategories).To(Equal([]string{"Security"}))
				Expect(searchObjectsOptionsModel.TagSubCategories).To(Equal([]string{"Classification"}))
				Expect(searchObjectsOptionsModel.IncludeHeliosTagInfoForObjects).To(Equal(core.BoolPtr(true)))
				Expect(searchObjectsOptionsModel.ExternalFilters).To(Equal([]string{"filter1"}))
				Expect(searchObjectsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSearchProtectedObjectsOptions successfully`, func() {
				// Construct an instance of the SearchProtectedObjectsOptions model
				xIbmTenantID := "tenantId"
				searchProtectedObjectsOptionsModel := backupRecoveryService.NewSearchProtectedObjectsOptions(xIbmTenantID)
				searchProtectedObjectsOptionsModel.SetXIBMTenantID("tenantId")
				searchProtectedObjectsOptionsModel.SetRequestInitiatorType("UIUser")
				searchProtectedObjectsOptionsModel.SetSearchString("searchString")
				searchProtectedObjectsOptionsModel.SetEnvironments([]string{"kPhysical"})
				searchProtectedObjectsOptionsModel.SetSnapshotActions([]string{"RecoverVMs"})
				searchProtectedObjectsOptionsModel.SetObjectActionKey("kPhysical")
				searchProtectedObjectsOptionsModel.SetProtectionGroupIds([]string{"protectionGroupId1"})
				searchProtectedObjectsOptionsModel.SetObjectIds([]int64{int64(26)})
				searchProtectedObjectsOptionsModel.SetSubResultSize(int64(38))
				searchProtectedObjectsOptionsModel.SetFilterSnapshotFromUsecs(int64(26))
				searchProtectedObjectsOptionsModel.SetFilterSnapshotToUsecs(int64(26))
				searchProtectedObjectsOptionsModel.SetOsTypes([]string{"kLinux"})
				searchProtectedObjectsOptionsModel.SetSourceIds([]int64{int64(26)})
				searchProtectedObjectsOptionsModel.SetRunInstanceIds([]int64{int64(26)})
				searchProtectedObjectsOptionsModel.SetCdpProtectedOnly(true)
				searchProtectedObjectsOptionsModel.SetUseCachedData(true)
				searchProtectedObjectsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(searchProtectedObjectsOptionsModel).ToNot(BeNil())
				Expect(searchProtectedObjectsOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(searchProtectedObjectsOptionsModel.RequestInitiatorType).To(Equal(core.StringPtr("UIUser")))
				Expect(searchProtectedObjectsOptionsModel.SearchString).To(Equal(core.StringPtr("searchString")))
				Expect(searchProtectedObjectsOptionsModel.Environments).To(Equal([]string{"kPhysical"}))
				Expect(searchProtectedObjectsOptionsModel.SnapshotActions).To(Equal([]string{"RecoverVMs"}))
				Expect(searchProtectedObjectsOptionsModel.ObjectActionKey).To(Equal(core.StringPtr("kPhysical")))
				Expect(searchProtectedObjectsOptionsModel.ProtectionGroupIds).To(Equal([]string{"protectionGroupId1"}))
				Expect(searchProtectedObjectsOptionsModel.ObjectIds).To(Equal([]int64{int64(26)}))
				Expect(searchProtectedObjectsOptionsModel.SubResultSize).To(Equal(core.Int64Ptr(int64(38))))
				Expect(searchProtectedObjectsOptionsModel.FilterSnapshotFromUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchProtectedObjectsOptionsModel.FilterSnapshotToUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(searchProtectedObjectsOptionsModel.OsTypes).To(Equal([]string{"kLinux"}))
				Expect(searchProtectedObjectsOptionsModel.SourceIds).To(Equal([]int64{int64(26)}))
				Expect(searchProtectedObjectsOptionsModel.RunInstanceIds).To(Equal([]int64{int64(26)}))
				Expect(searchProtectedObjectsOptionsModel.CdpProtectedOnly).To(Equal(core.BoolPtr(true)))
				Expect(searchProtectedObjectsOptionsModel.UseCachedData).To(Equal(core.BoolPtr(true)))
				Expect(searchProtectedObjectsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSearchSfdcRecordsRequestParams successfully`, func() {
				mutationTypes := []string{"All"}
				objectName := "testString"
				snapshotID := "testString"
				_model, err := backupRecoveryService.NewSearchSfdcRecordsRequestParams(mutationTypes, objectName, snapshotID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSqlTargetParamsForRecoverSqlApp successfully`, func() {
				recoverToNewSource := true
				_model, err := backupRecoveryService.NewSqlTargetParamsForRecoverSqlApp(recoverToNewSource)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewStorageArraySnapshotBackupPolicy successfully`, func() {
				var schedule *backuprecoveryv1.StorageArraySnapshotSchedule = nil
				var retention *backuprecoveryv1.Retention = nil
				_, err := backupRecoveryService.NewStorageArraySnapshotBackupPolicy(schedule, retention)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewStorageArraySnapshotSchedule successfully`, func() {
				unit := "Minutes"
				_model, err := backupRecoveryService.NewStorageArraySnapshotSchedule(unit)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewTargetSchedule successfully`, func() {
				unit := "Runs"
				_model, err := backupRecoveryService.NewTargetSchedule(unit)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewTimeOfDay successfully`, func() {
				hour := int64(0)
				minute := int64(0)
				_model, err := backupRecoveryService.NewTimeOfDay(hour, minute)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewUdaOnPremSearchParams successfully`, func() {
				searchString := "testString"
				_model, err := backupRecoveryService.NewUdaOnPremSearchParams(searchString)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewUpdateExistingArchivalSnapshotConfig successfully`, func() {
				id := int64(26)
				archivalTargetType := "Tape"
				_model, err := backupRecoveryService.NewUpdateExistingArchivalSnapshotConfig(id, archivalTargetType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewUpdateExistingReplicationSnapshotConfig successfully`, func() {
				id := int64(26)
				_model, err := backupRecoveryService.NewUpdateExistingReplicationSnapshotConfig(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewUpdateProtectionGroupOptions successfully`, func() {
				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				Expect(timeOfDayModel).ToNot(BeNil())
				timeOfDayModel.Hour = core.Int64Ptr(int64(0))
				timeOfDayModel.Minute = core.Int64Ptr(int64(0))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")
				Expect(timeOfDayModel.Hour).To(Equal(core.Int64Ptr(int64(0))))
				Expect(timeOfDayModel.Minute).To(Equal(core.Int64Ptr(int64(0))))
				Expect(timeOfDayModel.TimeZone).To(Equal(core.StringPtr("America/Los_Angeles")))

				// Construct an instance of the AlertTarget model
				alertTargetModel := new(backuprecoveryv1.AlertTarget)
				Expect(alertTargetModel).ToNot(BeNil())
				alertTargetModel.EmailAddress = core.StringPtr("alert1@domain.com")
				alertTargetModel.Language = core.StringPtr("en-us")
				alertTargetModel.RecipientType = core.StringPtr("kTo")
				Expect(alertTargetModel.EmailAddress).To(Equal(core.StringPtr("alert1@domain.com")))
				Expect(alertTargetModel.Language).To(Equal(core.StringPtr("en-us")))
				Expect(alertTargetModel.RecipientType).To(Equal(core.StringPtr("kTo")))

				// Construct an instance of the ProtectionGroupAlertingPolicy model
				protectionGroupAlertingPolicyModel := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
				Expect(protectionGroupAlertingPolicyModel).ToNot(BeNil())
				protectionGroupAlertingPolicyModel.BackupRunStatus = []string{"kSuccess"}
				protectionGroupAlertingPolicyModel.AlertTargets = []backuprecoveryv1.AlertTarget{*alertTargetModel}
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
				protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)
				Expect(protectionGroupAlertingPolicyModel.BackupRunStatus).To(Equal([]string{"kSuccess"}))
				Expect(protectionGroupAlertingPolicyModel.AlertTargets).To(Equal([]backuprecoveryv1.AlertTarget{*alertTargetModel}))
				Expect(protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlert).To(Equal(core.BoolPtr(true)))
				Expect(protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterLastAttempt).To(Equal(core.BoolPtr(true)))
				Expect(protectionGroupAlertingPolicyModel.RaiseObjectLevelFailureAlertAfterEachAttempt).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the SlaRule model
				slaRuleModel := new(backuprecoveryv1.SlaRule)
				Expect(slaRuleModel).ToNot(BeNil())
				slaRuleModel.BackupRunType = core.StringPtr("kIncremental")
				slaRuleModel.SlaMinutes = core.Int64Ptr(int64(1))
				Expect(slaRuleModel.BackupRunType).To(Equal(core.StringPtr("kIncremental")))
				Expect(slaRuleModel.SlaMinutes).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				Expect(keyValuePairModel).ToNot(BeNil())
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")
				Expect(keyValuePairModel.Key).To(Equal(core.StringPtr("configKey")))
				Expect(keyValuePairModel.Value).To(Equal(core.StringPtr("configValue")))

				// Construct an instance of the PhysicalVolumeProtectionGroupObjectParams model
				physicalVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
				Expect(physicalVolumeProtectionGroupObjectParamsModel).ToNot(BeNil())
				physicalVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(3))
				physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids = []string{"volumeGuid1"}
				physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup = core.BoolPtr(true)
				physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				Expect(physicalVolumeProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(3))))
				Expect(physicalVolumeProtectionGroupObjectParamsModel.VolumeGuids).To(Equal([]string{"volumeGuid1"}))
				Expect(physicalVolumeProtectionGroupObjectParamsModel.EnableSystemBackup).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupObjectParamsModel.ExcludedVssWriters).To(Equal([]string{"writerName1", "writerName2"}))

				// Construct an instance of the IndexingPolicy model
				indexingPolicyModel := new(backuprecoveryv1.IndexingPolicy)
				Expect(indexingPolicyModel).ToNot(BeNil())
				indexingPolicyModel.EnableIndexing = core.BoolPtr(true)
				indexingPolicyModel.IncludePaths = []string{"~/dir1"}
				indexingPolicyModel.ExcludePaths = []string{"~/dir2"}
				Expect(indexingPolicyModel.EnableIndexing).To(Equal(core.BoolPtr(true)))
				Expect(indexingPolicyModel.IncludePaths).To(Equal([]string{"~/dir1"}))
				Expect(indexingPolicyModel.ExcludePaths).To(Equal([]string{"~/dir2"}))

				// Construct an instance of the CommonPreBackupScriptParams model
				commonPreBackupScriptParamsModel := new(backuprecoveryv1.CommonPreBackupScriptParams)
				Expect(commonPreBackupScriptParamsModel).ToNot(BeNil())
				commonPreBackupScriptParamsModel.Path = core.StringPtr("~/script1")
				commonPreBackupScriptParamsModel.Params = core.StringPtr("param1")
				commonPreBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPreBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				commonPreBackupScriptParamsModel.ContinueOnError = core.BoolPtr(true)
				Expect(commonPreBackupScriptParamsModel.Path).To(Equal(core.StringPtr("~/script1")))
				Expect(commonPreBackupScriptParamsModel.Params).To(Equal(core.StringPtr("param1")))
				Expect(commonPreBackupScriptParamsModel.TimeoutSecs).To(Equal(core.Int64Ptr(int64(1))))
				Expect(commonPreBackupScriptParamsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(commonPreBackupScriptParamsModel.ContinueOnError).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the CommonPostBackupScriptParams model
				commonPostBackupScriptParamsModel := new(backuprecoveryv1.CommonPostBackupScriptParams)
				Expect(commonPostBackupScriptParamsModel).ToNot(BeNil())
				commonPostBackupScriptParamsModel.Path = core.StringPtr("~/script2")
				commonPostBackupScriptParamsModel.Params = core.StringPtr("param2")
				commonPostBackupScriptParamsModel.TimeoutSecs = core.Int64Ptr(int64(1))
				commonPostBackupScriptParamsModel.IsActive = core.BoolPtr(true)
				Expect(commonPostBackupScriptParamsModel.Path).To(Equal(core.StringPtr("~/script2")))
				Expect(commonPostBackupScriptParamsModel.Params).To(Equal(core.StringPtr("param2")))
				Expect(commonPostBackupScriptParamsModel.TimeoutSecs).To(Equal(core.Int64Ptr(int64(1))))
				Expect(commonPostBackupScriptParamsModel.IsActive).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PrePostScriptParams model
				prePostScriptParamsModel := new(backuprecoveryv1.PrePostScriptParams)
				Expect(prePostScriptParamsModel).ToNot(BeNil())
				prePostScriptParamsModel.PreScript = commonPreBackupScriptParamsModel
				prePostScriptParamsModel.PostScript = commonPostBackupScriptParamsModel
				Expect(prePostScriptParamsModel.PreScript).To(Equal(commonPreBackupScriptParamsModel))
				Expect(prePostScriptParamsModel.PostScript).To(Equal(commonPostBackupScriptParamsModel))

				// Construct an instance of the PhysicalVolumeProtectionGroupParams model
				physicalVolumeProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
				Expect(physicalVolumeProtectionGroupParamsModel).ToNot(BeNil())
				physicalVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}
				physicalVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				physicalVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalVolumeProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				Expect(physicalVolumeProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams{*physicalVolumeProtectionGroupObjectParamsModel}))
				Expect(physicalVolumeProtectionGroupParamsModel.IndexingPolicy).To(Equal(indexingPolicyModel))
				Expect(physicalVolumeProtectionGroupParamsModel.PerformSourceSideDeduplication).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupParamsModel.Quiesce).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupParamsModel.ContinueOnQuiesceFailure).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart).To(Equal(core.BoolPtr(true)))
				Expect(physicalVolumeProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(physicalVolumeProtectionGroupParamsModel.DedupExclusionSourceIds).To(Equal([]int64{int64(26)}))
				Expect(physicalVolumeProtectionGroupParamsModel.ExcludedVssWriters).To(Equal([]string{"writerName1", "writerName2"}))
				Expect(physicalVolumeProtectionGroupParamsModel.CobmrBackup).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PhysicalFileBackupPathParams model
				physicalFileBackupPathParamsModel := new(backuprecoveryv1.PhysicalFileBackupPathParams)
				Expect(physicalFileBackupPathParamsModel).ToNot(BeNil())
				physicalFileBackupPathParamsModel.IncludedPath = core.StringPtr("~/dir1/")
				physicalFileBackupPathParamsModel.ExcludedPaths = []string{"~/dir2"}
				physicalFileBackupPathParamsModel.SkipNestedVolumes = core.BoolPtr(true)
				Expect(physicalFileBackupPathParamsModel.IncludedPath).To(Equal(core.StringPtr("~/dir1/")))
				Expect(physicalFileBackupPathParamsModel.ExcludedPaths).To(Equal([]string{"~/dir2"}))
				Expect(physicalFileBackupPathParamsModel.SkipNestedVolumes).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PhysicalFileProtectionGroupObjectParams model
				physicalFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
				Expect(physicalFileProtectionGroupObjectParamsModel).ToNot(BeNil())
				physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(2))
				physicalFileProtectionGroupObjectParamsModel.FilePaths = []backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}
				physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip = []string{"volume1"}
				physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget = core.BoolPtr(true)
				physicalFileProtectionGroupObjectParamsModel.MetadataFilePath = core.StringPtr("~/dir3")
				Expect(physicalFileProtectionGroupObjectParamsModel.ExcludedVssWriters).To(Equal([]string{"writerName1", "writerName2"}))
				Expect(physicalFileProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(2))))
				Expect(physicalFileProtectionGroupObjectParamsModel.FilePaths).To(Equal([]backuprecoveryv1.PhysicalFileBackupPathParams{*physicalFileBackupPathParamsModel}))
				Expect(physicalFileProtectionGroupObjectParamsModel.UsesPathLevelSkipNestedVolumeSetting).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupObjectParamsModel.NestedVolumeTypesToSkip).To(Equal([]string{"volume1"}))
				Expect(physicalFileProtectionGroupObjectParamsModel.FollowNasSymlinkTarget).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupObjectParamsModel.MetadataFilePath).To(Equal(core.StringPtr("~/dir3")))

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				Expect(cancellationTimeoutParamsModel).ToNot(BeNil())
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")
				Expect(cancellationTimeoutParamsModel.TimeoutMins).To(Equal(core.Int64Ptr(int64(26))))
				Expect(cancellationTimeoutParamsModel.BackupType).To(Equal(core.StringPtr("kRegular")))

				// Construct an instance of the PhysicalFileProtectionGroupParams model
				physicalFileProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
				Expect(physicalFileProtectionGroupParamsModel).ToNot(BeNil())
				physicalFileProtectionGroupParamsModel.ExcludedVssWriters = []string{"writerName1", "writerName2"}
				physicalFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}
				physicalFileProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.TaskTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				physicalFileProtectionGroupParamsModel.Quiesce = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.CobmrBackup = core.BoolPtr(true)
				physicalFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds = []int64{int64(26)}
				physicalFileProtectionGroupParamsModel.GlobalExcludePaths = []string{"~/dir1"}
				physicalFileProtectionGroupParamsModel.GlobalExcludeFS = []string{"~/dir2"}
				physicalFileProtectionGroupParamsModel.IgnorableErrors = []string{"kEOF"}
				physicalFileProtectionGroupParamsModel.AllowParallelRuns = core.BoolPtr(true)
				Expect(physicalFileProtectionGroupParamsModel.ExcludedVssWriters).To(Equal([]string{"writerName1", "writerName2"}))
				Expect(physicalFileProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.PhysicalFileProtectionGroupObjectParams{*physicalFileProtectionGroupObjectParamsModel}))
				Expect(physicalFileProtectionGroupParamsModel.IndexingPolicy).To(Equal(indexingPolicyModel))
				Expect(physicalFileProtectionGroupParamsModel.PerformSourceSideDeduplication).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.PerformBrickBasedDeduplication).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.TaskTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(physicalFileProtectionGroupParamsModel.Quiesce).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.ContinueOnQuiesceFailure).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.CobmrBackup).To(Equal(core.BoolPtr(true)))
				Expect(physicalFileProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(physicalFileProtectionGroupParamsModel.DedupExclusionSourceIds).To(Equal([]int64{int64(26)}))
				Expect(physicalFileProtectionGroupParamsModel.GlobalExcludePaths).To(Equal([]string{"~/dir1"}))
				Expect(physicalFileProtectionGroupParamsModel.GlobalExcludeFS).To(Equal([]string{"~/dir2"}))
				Expect(physicalFileProtectionGroupParamsModel.IgnorableErrors).To(Equal([]string{"kEOF"}))
				Expect(physicalFileProtectionGroupParamsModel.AllowParallelRuns).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PhysicalProtectionGroupParams model
				physicalProtectionGroupParamsModel := new(backuprecoveryv1.PhysicalProtectionGroupParams)
				Expect(physicalProtectionGroupParamsModel).ToNot(BeNil())
				physicalProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				physicalProtectionGroupParamsModel.VolumeProtectionTypeParams = physicalVolumeProtectionGroupParamsModel
				physicalProtectionGroupParamsModel.FileProtectionTypeParams = physicalFileProtectionGroupParamsModel
				Expect(physicalProtectionGroupParamsModel.ProtectionType).To(Equal(core.StringPtr("kFile")))
				Expect(physicalProtectionGroupParamsModel.VolumeProtectionTypeParams).To(Equal(physicalVolumeProtectionGroupParamsModel))
				Expect(physicalProtectionGroupParamsModel.FileProtectionTypeParams).To(Equal(physicalFileProtectionGroupParamsModel))

				// Construct an instance of the AdvancedSettings model
				advancedSettingsModel := new(backuprecoveryv1.AdvancedSettings)
				Expect(advancedSettingsModel).ToNot(BeNil())
				advancedSettingsModel.ClonedDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
				advancedSettingsModel.MissingDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReadOnlyDbBackupStatus = core.StringPtr("kError")
				advancedSettingsModel.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")
				Expect(advancedSettingsModel.ClonedDbBackupStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.DbBackupIfNotOnlineStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.MissingDbBackupStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.OfflineRestoringDbBackupStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.ReadOnlyDbBackupStatus).To(Equal(core.StringPtr("kError")))
				Expect(advancedSettingsModel.ReportAllNonAutoprotectDbErrors).To(Equal(core.StringPtr("kError")))

				// Construct an instance of the Filter model
				filterModel := new(backuprecoveryv1.Filter)
				Expect(filterModel).ToNot(BeNil())
				filterModel.FilterString = core.StringPtr("filterString")
				filterModel.IsRegularExpression = core.BoolPtr(false)
				Expect(filterModel.FilterString).To(Equal(core.StringPtr("filterString")))
				Expect(filterModel.IsRegularExpression).To(Equal(core.BoolPtr(false)))

				// Construct an instance of the MSSQLFileProtectionGroupHostParams model
				mssqlFileProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
				Expect(mssqlFileProtectionGroupHostParamsModel).ToNot(BeNil())
				mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication = core.BoolPtr(true)
				mssqlFileProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(26))
				Expect(mssqlFileProtectionGroupHostParamsModel.DisableSourceSideDeduplication).To(Equal(core.BoolPtr(true)))
				Expect(mssqlFileProtectionGroupHostParamsModel.HostID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the MSSQLFileProtectionGroupObjectParams model
				mssqlFileProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
				Expect(mssqlFileProtectionGroupObjectParamsModel).ToNot(BeNil())
				mssqlFileProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))
				Expect(mssqlFileProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(6))))

				// Construct an instance of the MSSQLFileProtectionGroupParams model
				mssqlFileProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
				Expect(mssqlFileProtectionGroupParamsModel).ToNot(BeNil())
				mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlFileProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlFileProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlFileProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlFileProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlFileProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}
				mssqlFileProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}
				mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication = core.BoolPtr(true)
				Expect(mssqlFileProtectionGroupParamsModel.AagBackupPreferenceType).To(Equal(core.StringPtr("kPrimaryReplicaOnly")))
				Expect(mssqlFileProtectionGroupParamsModel.AdvancedSettings).To(Equal(advancedSettingsModel))
				Expect(mssqlFileProtectionGroupParamsModel.BackupSystemDbs).To(Equal(core.BoolPtr(true)))
				Expect(mssqlFileProtectionGroupParamsModel.ExcludeFilters).To(Equal([]backuprecoveryv1.Filter{*filterModel}))
				Expect(mssqlFileProtectionGroupParamsModel.FullBackupsCopyOnly).To(Equal(core.BoolPtr(true)))
				Expect(mssqlFileProtectionGroupParamsModel.LogBackupNumStreams).To(Equal(core.Int64Ptr(int64(38))))
				Expect(mssqlFileProtectionGroupParamsModel.LogBackupWithClause).To(Equal(core.StringPtr("backupWithClause")))
				Expect(mssqlFileProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(mssqlFileProtectionGroupParamsModel.UseAagPreferencesFromServer).To(Equal(core.BoolPtr(true)))
				Expect(mssqlFileProtectionGroupParamsModel.UserDbBackupPreferenceType).To(Equal(core.StringPtr("kBackupAllDatabases")))
				Expect(mssqlFileProtectionGroupParamsModel.AdditionalHostParams).To(Equal([]backuprecoveryv1.MSSQLFileProtectionGroupHostParams{*mssqlFileProtectionGroupHostParamsModel}))
				Expect(mssqlFileProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.MSSQLFileProtectionGroupObjectParams{*mssqlFileProtectionGroupObjectParamsModel}))
				Expect(mssqlFileProtectionGroupParamsModel.PerformSourceSideDeduplication).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the MSSQLNativeProtectionGroupObjectParams model
				mssqlNativeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
				Expect(mssqlNativeProtectionGroupObjectParamsModel).ToNot(BeNil())
				mssqlNativeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))
				Expect(mssqlNativeProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(6))))

				// Construct an instance of the MSSQLNativeProtectionGroupParams model
				mssqlNativeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
				Expect(mssqlNativeProtectionGroupParamsModel).ToNot(BeNil())
				mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlNativeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlNativeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlNativeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlNativeProtectionGroupParamsModel.NumStreams = core.Int64Ptr(int64(38))
				mssqlNativeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}
				mssqlNativeProtectionGroupParamsModel.WithClause = core.StringPtr("withClause")
				Expect(mssqlNativeProtectionGroupParamsModel.AagBackupPreferenceType).To(Equal(core.StringPtr("kPrimaryReplicaOnly")))
				Expect(mssqlNativeProtectionGroupParamsModel.AdvancedSettings).To(Equal(advancedSettingsModel))
				Expect(mssqlNativeProtectionGroupParamsModel.BackupSystemDbs).To(Equal(core.BoolPtr(true)))
				Expect(mssqlNativeProtectionGroupParamsModel.ExcludeFilters).To(Equal([]backuprecoveryv1.Filter{*filterModel}))
				Expect(mssqlNativeProtectionGroupParamsModel.FullBackupsCopyOnly).To(Equal(core.BoolPtr(true)))
				Expect(mssqlNativeProtectionGroupParamsModel.LogBackupNumStreams).To(Equal(core.Int64Ptr(int64(38))))
				Expect(mssqlNativeProtectionGroupParamsModel.LogBackupWithClause).To(Equal(core.StringPtr("backupWithClause")))
				Expect(mssqlNativeProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(mssqlNativeProtectionGroupParamsModel.UseAagPreferencesFromServer).To(Equal(core.BoolPtr(true)))
				Expect(mssqlNativeProtectionGroupParamsModel.UserDbBackupPreferenceType).To(Equal(core.StringPtr("kBackupAllDatabases")))
				Expect(mssqlNativeProtectionGroupParamsModel.NumStreams).To(Equal(core.Int64Ptr(int64(38))))
				Expect(mssqlNativeProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams{*mssqlNativeProtectionGroupObjectParamsModel}))
				Expect(mssqlNativeProtectionGroupParamsModel.WithClause).To(Equal(core.StringPtr("withClause")))

				// Construct an instance of the MSSQLVolumeProtectionGroupHostParams model
				mssqlVolumeProtectionGroupHostParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
				Expect(mssqlVolumeProtectionGroupHostParamsModel).ToNot(BeNil())
				mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup = core.BoolPtr(true)
				mssqlVolumeProtectionGroupHostParamsModel.HostID = core.Int64Ptr(int64(8))
				mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids = []string{"volumeGuid1"}
				Expect(mssqlVolumeProtectionGroupHostParamsModel.EnableSystemBackup).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupHostParamsModel.HostID).To(Equal(core.Int64Ptr(int64(8))))
				Expect(mssqlVolumeProtectionGroupHostParamsModel.VolumeGuids).To(Equal([]string{"volumeGuid1"}))

				// Construct an instance of the MSSQLVolumeProtectionGroupObjectParams model
				mssqlVolumeProtectionGroupObjectParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
				Expect(mssqlVolumeProtectionGroupObjectParamsModel).ToNot(BeNil())
				mssqlVolumeProtectionGroupObjectParamsModel.ID = core.Int64Ptr(int64(6))
				Expect(mssqlVolumeProtectionGroupObjectParamsModel.ID).To(Equal(core.Int64Ptr(int64(6))))

				// Construct an instance of the MSSQLVolumeProtectionGroupParams model
				mssqlVolumeProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
				Expect(mssqlVolumeProtectionGroupParamsModel).ToNot(BeNil())
				mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
				mssqlVolumeProtectionGroupParamsModel.AdvancedSettings = advancedSettingsModel
				mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.ExcludeFilters = []backuprecoveryv1.Filter{*filterModel}
				mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams = core.Int64Ptr(int64(38))
				mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause = core.StringPtr("backupWithClause")
				mssqlVolumeProtectionGroupParamsModel.PrePostScript = prePostScriptParamsModel
				mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
				mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams = []backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}
				mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart = core.BoolPtr(true)
				mssqlVolumeProtectionGroupParamsModel.IndexingPolicy = indexingPolicyModel
				mssqlVolumeProtectionGroupParamsModel.Objects = []backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}
				Expect(mssqlVolumeProtectionGroupParamsModel.AagBackupPreferenceType).To(Equal(core.StringPtr("kPrimaryReplicaOnly")))
				Expect(mssqlVolumeProtectionGroupParamsModel.AdvancedSettings).To(Equal(advancedSettingsModel))
				Expect(mssqlVolumeProtectionGroupParamsModel.BackupSystemDbs).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.ExcludeFilters).To(Equal([]backuprecoveryv1.Filter{*filterModel}))
				Expect(mssqlVolumeProtectionGroupParamsModel.FullBackupsCopyOnly).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.LogBackupNumStreams).To(Equal(core.Int64Ptr(int64(38))))
				Expect(mssqlVolumeProtectionGroupParamsModel.LogBackupWithClause).To(Equal(core.StringPtr("backupWithClause")))
				Expect(mssqlVolumeProtectionGroupParamsModel.PrePostScript).To(Equal(prePostScriptParamsModel))
				Expect(mssqlVolumeProtectionGroupParamsModel.UseAagPreferencesFromServer).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.UserDbBackupPreferenceType).To(Equal(core.StringPtr("kBackupAllDatabases")))
				Expect(mssqlVolumeProtectionGroupParamsModel.AdditionalHostParams).To(Equal([]backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams{*mssqlVolumeProtectionGroupHostParamsModel}))
				Expect(mssqlVolumeProtectionGroupParamsModel.BackupDbVolumesOnly).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.IncrementalBackupAfterRestart).To(Equal(core.BoolPtr(true)))
				Expect(mssqlVolumeProtectionGroupParamsModel.IndexingPolicy).To(Equal(indexingPolicyModel))
				Expect(mssqlVolumeProtectionGroupParamsModel.Objects).To(Equal([]backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams{*mssqlVolumeProtectionGroupObjectParamsModel}))

				// Construct an instance of the MSSQLProtectionGroupParams model
				mssqlProtectionGroupParamsModel := new(backuprecoveryv1.MSSQLProtectionGroupParams)
				Expect(mssqlProtectionGroupParamsModel).ToNot(BeNil())
				mssqlProtectionGroupParamsModel.FileProtectionTypeParams = mssqlFileProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.NativeProtectionTypeParams = mssqlNativeProtectionGroupParamsModel
				mssqlProtectionGroupParamsModel.ProtectionType = core.StringPtr("kFile")
				mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams = mssqlVolumeProtectionGroupParamsModel
				Expect(mssqlProtectionGroupParamsModel.FileProtectionTypeParams).To(Equal(mssqlFileProtectionGroupParamsModel))
				Expect(mssqlProtectionGroupParamsModel.NativeProtectionTypeParams).To(Equal(mssqlNativeProtectionGroupParamsModel))
				Expect(mssqlProtectionGroupParamsModel.ProtectionType).To(Equal(core.StringPtr("kFile")))
				Expect(mssqlProtectionGroupParamsModel.VolumeProtectionTypeParams).To(Equal(mssqlVolumeProtectionGroupParamsModel))

				// Construct an instance of the UpdateProtectionGroupOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				updateProtectionGroupOptionsName := "update-protection-group"
				updateProtectionGroupOptionsPolicyID := "xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx"
				updateProtectionGroupOptionsEnvironment := "kPhysical"
				updateProtectionGroupOptionsModel := backupRecoveryService.NewUpdateProtectionGroupOptions(id, xIbmTenantID, updateProtectionGroupOptionsName, updateProtectionGroupOptionsPolicyID, updateProtectionGroupOptionsEnvironment)
				updateProtectionGroupOptionsModel.SetID("testString")
				updateProtectionGroupOptionsModel.SetXIBMTenantID("tenantId")
				updateProtectionGroupOptionsModel.SetName("update-protection-group")
				updateProtectionGroupOptionsModel.SetPolicyID("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")
				updateProtectionGroupOptionsModel.SetEnvironment("kPhysical")
				updateProtectionGroupOptionsModel.SetPriority("kLow")
				updateProtectionGroupOptionsModel.SetDescription("Protection Group")
				updateProtectionGroupOptionsModel.SetStartTime(timeOfDayModel)
				updateProtectionGroupOptionsModel.SetEndTimeUsecs(int64(26))
				updateProtectionGroupOptionsModel.SetLastModifiedTimestampUsecs(int64(26))
				updateProtectionGroupOptionsModel.SetAlertPolicy(protectionGroupAlertingPolicyModel)
				updateProtectionGroupOptionsModel.SetSla([]backuprecoveryv1.SlaRule{*slaRuleModel})
				updateProtectionGroupOptionsModel.SetQosPolicy("kBackupHDD")
				updateProtectionGroupOptionsModel.SetAbortInBlackouts(true)
				updateProtectionGroupOptionsModel.SetPauseInBlackouts(true)
				updateProtectionGroupOptionsModel.SetIsPaused(true)
				updateProtectionGroupOptionsModel.SetAdvancedConfigs([]backuprecoveryv1.KeyValuePair{*keyValuePairModel})
				updateProtectionGroupOptionsModel.SetPhysicalParams(physicalProtectionGroupParamsModel)
				updateProtectionGroupOptionsModel.SetMssqlParams(mssqlProtectionGroupParamsModel)
				updateProtectionGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateProtectionGroupOptionsModel).ToNot(BeNil())
				Expect(updateProtectionGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateProtectionGroupOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(updateProtectionGroupOptionsModel.Name).To(Equal(core.StringPtr("update-protection-group")))
				Expect(updateProtectionGroupOptionsModel.PolicyID).To(Equal(core.StringPtr("xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx")))
				Expect(updateProtectionGroupOptionsModel.Environment).To(Equal(core.StringPtr("kPhysical")))
				Expect(updateProtectionGroupOptionsModel.Priority).To(Equal(core.StringPtr("kLow")))
				Expect(updateProtectionGroupOptionsModel.Description).To(Equal(core.StringPtr("Protection Group")))
				Expect(updateProtectionGroupOptionsModel.StartTime).To(Equal(timeOfDayModel))
				Expect(updateProtectionGroupOptionsModel.EndTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(updateProtectionGroupOptionsModel.LastModifiedTimestampUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(updateProtectionGroupOptionsModel.AlertPolicy).To(Equal(protectionGroupAlertingPolicyModel))
				Expect(updateProtectionGroupOptionsModel.Sla).To(Equal([]backuprecoveryv1.SlaRule{*slaRuleModel}))
				Expect(updateProtectionGroupOptionsModel.QosPolicy).To(Equal(core.StringPtr("kBackupHDD")))
				Expect(updateProtectionGroupOptionsModel.AbortInBlackouts).To(Equal(core.BoolPtr(true)))
				Expect(updateProtectionGroupOptionsModel.PauseInBlackouts).To(Equal(core.BoolPtr(true)))
				Expect(updateProtectionGroupOptionsModel.IsPaused).To(Equal(core.BoolPtr(true)))
				Expect(updateProtectionGroupOptionsModel.AdvancedConfigs).To(Equal([]backuprecoveryv1.KeyValuePair{*keyValuePairModel}))
				Expect(updateProtectionGroupOptionsModel.PhysicalParams).To(Equal(physicalProtectionGroupParamsModel))
				Expect(updateProtectionGroupOptionsModel.MssqlParams).To(Equal(mssqlProtectionGroupParamsModel))
				Expect(updateProtectionGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateProtectionGroupRunOptions successfully`, func() {
				// Construct an instance of the UpdateLocalSnapshotConfig model
				updateLocalSnapshotConfigModel := new(backuprecoveryv1.UpdateLocalSnapshotConfig)
				Expect(updateLocalSnapshotConfigModel).ToNot(BeNil())
				updateLocalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateLocalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateLocalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))
				Expect(updateLocalSnapshotConfigModel.EnableLegalHold).To(Equal(core.BoolPtr(true)))
				Expect(updateLocalSnapshotConfigModel.DeleteSnapshot).To(Equal(core.BoolPtr(true)))
				Expect(updateLocalSnapshotConfigModel.DataLock).To(Equal(core.StringPtr("Compliance")))
				Expect(updateLocalSnapshotConfigModel.DaysToKeep).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				Expect(dataLockConfigModel).ToNot(BeNil())
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)
				Expect(dataLockConfigModel.Mode).To(Equal(core.StringPtr("Compliance")))
				Expect(dataLockConfigModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(dataLockConfigModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(dataLockConfigModel.EnableWormOnExternalTarget).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				Expect(retentionModel).ToNot(BeNil())
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel
				Expect(retentionModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(retentionModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(retentionModel.DataLockConfig).To(Equal(dataLockConfigModel))

				// Construct an instance of the RunReplicationConfig model
				runReplicationConfigModel := new(backuprecoveryv1.RunReplicationConfig)
				Expect(runReplicationConfigModel).ToNot(BeNil())
				runReplicationConfigModel.ID = core.Int64Ptr(int64(26))
				runReplicationConfigModel.Retention = retentionModel
				Expect(runReplicationConfigModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(runReplicationConfigModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the UpdateExistingReplicationSnapshotConfig model
				updateExistingReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingReplicationSnapshotConfig)
				Expect(updateExistingReplicationSnapshotConfigModel).ToNot(BeNil())
				updateExistingReplicationSnapshotConfigModel.ID = core.Int64Ptr(int64(4))
				updateExistingReplicationSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingReplicationSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingReplicationSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingReplicationSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))
				Expect(updateExistingReplicationSnapshotConfigModel.ID).To(Equal(core.Int64Ptr(int64(4))))
				Expect(updateExistingReplicationSnapshotConfigModel.Name).To(Equal(core.StringPtr("update-snapshot-config")))
				Expect(updateExistingReplicationSnapshotConfigModel.EnableLegalHold).To(Equal(core.BoolPtr(true)))
				Expect(updateExistingReplicationSnapshotConfigModel.DeleteSnapshot).To(Equal(core.BoolPtr(true)))
				Expect(updateExistingReplicationSnapshotConfigModel.Resync).To(Equal(core.BoolPtr(true)))
				Expect(updateExistingReplicationSnapshotConfigModel.DataLock).To(Equal(core.StringPtr("Compliance")))
				Expect(updateExistingReplicationSnapshotConfigModel.DaysToKeep).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the UpdateReplicationSnapshotConfig model
				updateReplicationSnapshotConfigModel := new(backuprecoveryv1.UpdateReplicationSnapshotConfig)
				Expect(updateReplicationSnapshotConfigModel).ToNot(BeNil())
				updateReplicationSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}
				updateReplicationSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingReplicationSnapshotConfig{*updateExistingReplicationSnapshotConfigModel}
				Expect(updateReplicationSnapshotConfigModel.NewSnapshotConfig).To(Equal([]backuprecoveryv1.RunReplicationConfig{*runReplicationConfigModel}))
				Expect(updateReplicationSnapshotConfigModel.UpdateExistingSnapshotConfig).To(Equal([]backuprecoveryv1.UpdateExistingReplicationSnapshotConfig{*updateExistingReplicationSnapshotConfigModel}))

				// Construct an instance of the RunArchivalConfig model
				runArchivalConfigModel := new(backuprecoveryv1.RunArchivalConfig)
				Expect(runArchivalConfigModel).ToNot(BeNil())
				runArchivalConfigModel.ID = core.Int64Ptr(int64(2))
				runArchivalConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				runArchivalConfigModel.Retention = retentionModel
				runArchivalConfigModel.CopyOnlyFullySuccessful = core.BoolPtr(true)
				Expect(runArchivalConfigModel.ID).To(Equal(core.Int64Ptr(int64(2))))
				Expect(runArchivalConfigModel.ArchivalTargetType).To(Equal(core.StringPtr("Tape")))
				Expect(runArchivalConfigModel.Retention).To(Equal(retentionModel))
				Expect(runArchivalConfigModel.CopyOnlyFullySuccessful).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the UpdateExistingArchivalSnapshotConfig model
				updateExistingArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateExistingArchivalSnapshotConfig)
				Expect(updateExistingArchivalSnapshotConfigModel).ToNot(BeNil())
				updateExistingArchivalSnapshotConfigModel.ID = core.Int64Ptr(int64(3))
				updateExistingArchivalSnapshotConfigModel.Name = core.StringPtr("update-snapshot-config")
				updateExistingArchivalSnapshotConfigModel.ArchivalTargetType = core.StringPtr("Tape")
				updateExistingArchivalSnapshotConfigModel.EnableLegalHold = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DeleteSnapshot = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.Resync = core.BoolPtr(true)
				updateExistingArchivalSnapshotConfigModel.DataLock = core.StringPtr("Compliance")
				updateExistingArchivalSnapshotConfigModel.DaysToKeep = core.Int64Ptr(int64(26))
				Expect(updateExistingArchivalSnapshotConfigModel.ID).To(Equal(core.Int64Ptr(int64(3))))
				Expect(updateExistingArchivalSnapshotConfigModel.Name).To(Equal(core.StringPtr("update-snapshot-config")))
				Expect(updateExistingArchivalSnapshotConfigModel.ArchivalTargetType).To(Equal(core.StringPtr("Tape")))
				Expect(updateExistingArchivalSnapshotConfigModel.EnableLegalHold).To(Equal(core.BoolPtr(true)))
				Expect(updateExistingArchivalSnapshotConfigModel.DeleteSnapshot).To(Equal(core.BoolPtr(true)))
				Expect(updateExistingArchivalSnapshotConfigModel.Resync).To(Equal(core.BoolPtr(true)))
				Expect(updateExistingArchivalSnapshotConfigModel.DataLock).To(Equal(core.StringPtr("Compliance")))
				Expect(updateExistingArchivalSnapshotConfigModel.DaysToKeep).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the UpdateArchivalSnapshotConfig model
				updateArchivalSnapshotConfigModel := new(backuprecoveryv1.UpdateArchivalSnapshotConfig)
				Expect(updateArchivalSnapshotConfigModel).ToNot(BeNil())
				updateArchivalSnapshotConfigModel.NewSnapshotConfig = []backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}
				updateArchivalSnapshotConfigModel.UpdateExistingSnapshotConfig = []backuprecoveryv1.UpdateExistingArchivalSnapshotConfig{*updateExistingArchivalSnapshotConfigModel}
				Expect(updateArchivalSnapshotConfigModel.NewSnapshotConfig).To(Equal([]backuprecoveryv1.RunArchivalConfig{*runArchivalConfigModel}))
				Expect(updateArchivalSnapshotConfigModel.UpdateExistingSnapshotConfig).To(Equal([]backuprecoveryv1.UpdateExistingArchivalSnapshotConfig{*updateExistingArchivalSnapshotConfigModel}))

				// Construct an instance of the UpdateProtectionGroupRunParams model
				updateProtectionGroupRunParamsModel := new(backuprecoveryv1.UpdateProtectionGroupRunParams)
				Expect(updateProtectionGroupRunParamsModel).ToNot(BeNil())
				updateProtectionGroupRunParamsModel.RunID = core.StringPtr("11:111")
				updateProtectionGroupRunParamsModel.LocalSnapshotConfig = updateLocalSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ReplicationSnapshotConfig = updateReplicationSnapshotConfigModel
				updateProtectionGroupRunParamsModel.ArchivalSnapshotConfig = updateArchivalSnapshotConfigModel
				Expect(updateProtectionGroupRunParamsModel.RunID).To(Equal(core.StringPtr("11:111")))
				Expect(updateProtectionGroupRunParamsModel.LocalSnapshotConfig).To(Equal(updateLocalSnapshotConfigModel))
				Expect(updateProtectionGroupRunParamsModel.ReplicationSnapshotConfig).To(Equal(updateReplicationSnapshotConfigModel))
				Expect(updateProtectionGroupRunParamsModel.ArchivalSnapshotConfig).To(Equal(updateArchivalSnapshotConfigModel))

				// Construct an instance of the UpdateProtectionGroupRunOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				updateProtectionGroupRunOptionsUpdateProtectionGroupRunParams := []backuprecoveryv1.UpdateProtectionGroupRunParams{}
				updateProtectionGroupRunOptionsModel := backupRecoveryService.NewUpdateProtectionGroupRunOptions(id, xIbmTenantID, updateProtectionGroupRunOptionsUpdateProtectionGroupRunParams)
				updateProtectionGroupRunOptionsModel.SetID("testString")
				updateProtectionGroupRunOptionsModel.SetXIBMTenantID("tenantId")
				updateProtectionGroupRunOptionsModel.SetUpdateProtectionGroupRunParams([]backuprecoveryv1.UpdateProtectionGroupRunParams{*updateProtectionGroupRunParamsModel})
				updateProtectionGroupRunOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateProtectionGroupRunOptionsModel).ToNot(BeNil())
				Expect(updateProtectionGroupRunOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateProtectionGroupRunOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(updateProtectionGroupRunOptionsModel.UpdateProtectionGroupRunParams).To(Equal([]backuprecoveryv1.UpdateProtectionGroupRunParams{*updateProtectionGroupRunParamsModel}))
				Expect(updateProtectionGroupRunOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateProtectionGroupRunParams successfully`, func() {
				runID := "testString"
				_model, err := backupRecoveryService.NewUpdateProtectionGroupRunParams(runID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewUpdateProtectionPolicyOptions successfully`, func() {
				// Construct an instance of the MinuteSchedule model
				minuteScheduleModel := new(backuprecoveryv1.MinuteSchedule)
				Expect(minuteScheduleModel).ToNot(BeNil())
				minuteScheduleModel.Frequency = core.Int64Ptr(int64(1))
				Expect(minuteScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the HourSchedule model
				hourScheduleModel := new(backuprecoveryv1.HourSchedule)
				Expect(hourScheduleModel).ToNot(BeNil())
				hourScheduleModel.Frequency = core.Int64Ptr(int64(1))
				Expect(hourScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the DaySchedule model
				dayScheduleModel := new(backuprecoveryv1.DaySchedule)
				Expect(dayScheduleModel).ToNot(BeNil())
				dayScheduleModel.Frequency = core.Int64Ptr(int64(1))
				Expect(dayScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the WeekSchedule model
				weekScheduleModel := new(backuprecoveryv1.WeekSchedule)
				Expect(weekScheduleModel).ToNot(BeNil())
				weekScheduleModel.DayOfWeek = []string{"Sunday"}
				Expect(weekScheduleModel.DayOfWeek).To(Equal([]string{"Sunday"}))

				// Construct an instance of the MonthSchedule model
				monthScheduleModel := new(backuprecoveryv1.MonthSchedule)
				Expect(monthScheduleModel).ToNot(BeNil())
				monthScheduleModel.DayOfWeek = []string{"Sunday"}
				monthScheduleModel.WeekOfMonth = core.StringPtr("First")
				monthScheduleModel.DayOfMonth = core.Int64Ptr(int64(10))
				Expect(monthScheduleModel.DayOfWeek).To(Equal([]string{"Sunday"}))
				Expect(monthScheduleModel.WeekOfMonth).To(Equal(core.StringPtr("First")))
				Expect(monthScheduleModel.DayOfMonth).To(Equal(core.Int64Ptr(int64(10))))

				// Construct an instance of the YearSchedule model
				yearScheduleModel := new(backuprecoveryv1.YearSchedule)
				Expect(yearScheduleModel).ToNot(BeNil())
				yearScheduleModel.DayOfYear = core.StringPtr("First")
				Expect(yearScheduleModel.DayOfYear).To(Equal(core.StringPtr("First")))

				// Construct an instance of the IncrementalSchedule model
				incrementalScheduleModel := new(backuprecoveryv1.IncrementalSchedule)
				Expect(incrementalScheduleModel).ToNot(BeNil())
				incrementalScheduleModel.Unit = core.StringPtr("Minutes")
				incrementalScheduleModel.MinuteSchedule = minuteScheduleModel
				incrementalScheduleModel.HourSchedule = hourScheduleModel
				incrementalScheduleModel.DaySchedule = dayScheduleModel
				incrementalScheduleModel.WeekSchedule = weekScheduleModel
				incrementalScheduleModel.MonthSchedule = monthScheduleModel
				incrementalScheduleModel.YearSchedule = yearScheduleModel
				Expect(incrementalScheduleModel.Unit).To(Equal(core.StringPtr("Minutes")))
				Expect(incrementalScheduleModel.MinuteSchedule).To(Equal(minuteScheduleModel))
				Expect(incrementalScheduleModel.HourSchedule).To(Equal(hourScheduleModel))
				Expect(incrementalScheduleModel.DaySchedule).To(Equal(dayScheduleModel))
				Expect(incrementalScheduleModel.WeekSchedule).To(Equal(weekScheduleModel))
				Expect(incrementalScheduleModel.MonthSchedule).To(Equal(monthScheduleModel))
				Expect(incrementalScheduleModel.YearSchedule).To(Equal(yearScheduleModel))

				// Construct an instance of the IncrementalBackupPolicy model
				incrementalBackupPolicyModel := new(backuprecoveryv1.IncrementalBackupPolicy)
				Expect(incrementalBackupPolicyModel).ToNot(BeNil())
				incrementalBackupPolicyModel.Schedule = incrementalScheduleModel
				Expect(incrementalBackupPolicyModel.Schedule).To(Equal(incrementalScheduleModel))

				// Construct an instance of the FullSchedule model
				fullScheduleModel := new(backuprecoveryv1.FullSchedule)
				Expect(fullScheduleModel).ToNot(BeNil())
				fullScheduleModel.Unit = core.StringPtr("Days")
				fullScheduleModel.DaySchedule = dayScheduleModel
				fullScheduleModel.WeekSchedule = weekScheduleModel
				fullScheduleModel.MonthSchedule = monthScheduleModel
				fullScheduleModel.YearSchedule = yearScheduleModel
				Expect(fullScheduleModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(fullScheduleModel.DaySchedule).To(Equal(dayScheduleModel))
				Expect(fullScheduleModel.WeekSchedule).To(Equal(weekScheduleModel))
				Expect(fullScheduleModel.MonthSchedule).To(Equal(monthScheduleModel))
				Expect(fullScheduleModel.YearSchedule).To(Equal(yearScheduleModel))

				// Construct an instance of the FullBackupPolicy model
				fullBackupPolicyModel := new(backuprecoveryv1.FullBackupPolicy)
				Expect(fullBackupPolicyModel).ToNot(BeNil())
				fullBackupPolicyModel.Schedule = fullScheduleModel
				Expect(fullBackupPolicyModel.Schedule).To(Equal(fullScheduleModel))

				// Construct an instance of the DataLockConfig model
				dataLockConfigModel := new(backuprecoveryv1.DataLockConfig)
				Expect(dataLockConfigModel).ToNot(BeNil())
				dataLockConfigModel.Mode = core.StringPtr("Compliance")
				dataLockConfigModel.Unit = core.StringPtr("Days")
				dataLockConfigModel.Duration = core.Int64Ptr(int64(1))
				dataLockConfigModel.EnableWormOnExternalTarget = core.BoolPtr(true)
				Expect(dataLockConfigModel.Mode).To(Equal(core.StringPtr("Compliance")))
				Expect(dataLockConfigModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(dataLockConfigModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(dataLockConfigModel.EnableWormOnExternalTarget).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the Retention model
				retentionModel := new(backuprecoveryv1.Retention)
				Expect(retentionModel).ToNot(BeNil())
				retentionModel.Unit = core.StringPtr("Days")
				retentionModel.Duration = core.Int64Ptr(int64(1))
				retentionModel.DataLockConfig = dataLockConfigModel
				Expect(retentionModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(retentionModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(retentionModel.DataLockConfig).To(Equal(dataLockConfigModel))

				// Construct an instance of the FullScheduleAndRetention model
				fullScheduleAndRetentionModel := new(backuprecoveryv1.FullScheduleAndRetention)
				Expect(fullScheduleAndRetentionModel).ToNot(BeNil())
				fullScheduleAndRetentionModel.Schedule = fullScheduleModel
				fullScheduleAndRetentionModel.Retention = retentionModel
				Expect(fullScheduleAndRetentionModel.Schedule).To(Equal(fullScheduleModel))
				Expect(fullScheduleAndRetentionModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the AWSTier model
				awsTierModel := new(backuprecoveryv1.AWSTier)
				Expect(awsTierModel).ToNot(BeNil())
				awsTierModel.MoveAfterUnit = core.StringPtr("Days")
				awsTierModel.MoveAfter = core.Int64Ptr(int64(26))
				awsTierModel.TierType = core.StringPtr("kAmazonS3Standard")
				Expect(awsTierModel.MoveAfterUnit).To(Equal(core.StringPtr("Days")))
				Expect(awsTierModel.MoveAfter).To(Equal(core.Int64Ptr(int64(26))))
				Expect(awsTierModel.TierType).To(Equal(core.StringPtr("kAmazonS3Standard")))

				// Construct an instance of the AWSTiers model
				awsTiersModel := new(backuprecoveryv1.AWSTiers)
				Expect(awsTiersModel).ToNot(BeNil())
				awsTiersModel.Tiers = []backuprecoveryv1.AWSTier{*awsTierModel}
				Expect(awsTiersModel.Tiers).To(Equal([]backuprecoveryv1.AWSTier{*awsTierModel}))

				// Construct an instance of the AzureTier model
				azureTierModel := new(backuprecoveryv1.AzureTier)
				Expect(azureTierModel).ToNot(BeNil())
				azureTierModel.MoveAfterUnit = core.StringPtr("Days")
				azureTierModel.MoveAfter = core.Int64Ptr(int64(26))
				azureTierModel.TierType = core.StringPtr("kAzureTierHot")
				Expect(azureTierModel.MoveAfterUnit).To(Equal(core.StringPtr("Days")))
				Expect(azureTierModel.MoveAfter).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureTierModel.TierType).To(Equal(core.StringPtr("kAzureTierHot")))

				// Construct an instance of the AzureTiers model
				azureTiersModel := new(backuprecoveryv1.AzureTiers)
				Expect(azureTiersModel).ToNot(BeNil())
				azureTiersModel.Tiers = []backuprecoveryv1.AzureTier{*azureTierModel}
				Expect(azureTiersModel.Tiers).To(Equal([]backuprecoveryv1.AzureTier{*azureTierModel}))

				// Construct an instance of the GoogleTier model
				googleTierModel := new(backuprecoveryv1.GoogleTier)
				Expect(googleTierModel).ToNot(BeNil())
				googleTierModel.MoveAfterUnit = core.StringPtr("Days")
				googleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				googleTierModel.TierType = core.StringPtr("kGoogleStandard")
				Expect(googleTierModel.MoveAfterUnit).To(Equal(core.StringPtr("Days")))
				Expect(googleTierModel.MoveAfter).To(Equal(core.Int64Ptr(int64(26))))
				Expect(googleTierModel.TierType).To(Equal(core.StringPtr("kGoogleStandard")))

				// Construct an instance of the GoogleTiers model
				googleTiersModel := new(backuprecoveryv1.GoogleTiers)
				Expect(googleTiersModel).ToNot(BeNil())
				googleTiersModel.Tiers = []backuprecoveryv1.GoogleTier{*googleTierModel}
				Expect(googleTiersModel.Tiers).To(Equal([]backuprecoveryv1.GoogleTier{*googleTierModel}))

				// Construct an instance of the OracleTier model
				oracleTierModel := new(backuprecoveryv1.OracleTier)
				Expect(oracleTierModel).ToNot(BeNil())
				oracleTierModel.MoveAfterUnit = core.StringPtr("Days")
				oracleTierModel.MoveAfter = core.Int64Ptr(int64(26))
				oracleTierModel.TierType = core.StringPtr("kOracleTierStandard")
				Expect(oracleTierModel.MoveAfterUnit).To(Equal(core.StringPtr("Days")))
				Expect(oracleTierModel.MoveAfter).To(Equal(core.Int64Ptr(int64(26))))
				Expect(oracleTierModel.TierType).To(Equal(core.StringPtr("kOracleTierStandard")))

				// Construct an instance of the OracleTiers model
				oracleTiersModel := new(backuprecoveryv1.OracleTiers)
				Expect(oracleTiersModel).ToNot(BeNil())
				oracleTiersModel.Tiers = []backuprecoveryv1.OracleTier{*oracleTierModel}
				Expect(oracleTiersModel.Tiers).To(Equal([]backuprecoveryv1.OracleTier{*oracleTierModel}))

				// Construct an instance of the TierLevelSettings model
				tierLevelSettingsModel := new(backuprecoveryv1.TierLevelSettings)
				Expect(tierLevelSettingsModel).ToNot(BeNil())
				tierLevelSettingsModel.AwsTiering = awsTiersModel
				tierLevelSettingsModel.AzureTiering = azureTiersModel
				tierLevelSettingsModel.CloudPlatform = core.StringPtr("AWS")
				tierLevelSettingsModel.GoogleTiering = googleTiersModel
				tierLevelSettingsModel.OracleTiering = oracleTiersModel
				Expect(tierLevelSettingsModel.AwsTiering).To(Equal(awsTiersModel))
				Expect(tierLevelSettingsModel.AzureTiering).To(Equal(azureTiersModel))
				Expect(tierLevelSettingsModel.CloudPlatform).To(Equal(core.StringPtr("AWS")))
				Expect(tierLevelSettingsModel.GoogleTiering).To(Equal(googleTiersModel))
				Expect(tierLevelSettingsModel.OracleTiering).To(Equal(oracleTiersModel))

				// Construct an instance of the PrimaryArchivalTarget model
				primaryArchivalTargetModel := new(backuprecoveryv1.PrimaryArchivalTarget)
				Expect(primaryArchivalTargetModel).ToNot(BeNil())
				primaryArchivalTargetModel.TargetID = core.Int64Ptr(int64(26))
				primaryArchivalTargetModel.TierSettings = tierLevelSettingsModel
				Expect(primaryArchivalTargetModel.TargetID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(primaryArchivalTargetModel.TierSettings).To(Equal(tierLevelSettingsModel))

				// Construct an instance of the PrimaryBackupTarget model
				primaryBackupTargetModel := new(backuprecoveryv1.PrimaryBackupTarget)
				Expect(primaryBackupTargetModel).ToNot(BeNil())
				primaryBackupTargetModel.TargetType = core.StringPtr("Local")
				primaryBackupTargetModel.ArchivalTargetSettings = primaryArchivalTargetModel
				primaryBackupTargetModel.UseDefaultBackupTarget = core.BoolPtr(true)
				Expect(primaryBackupTargetModel.TargetType).To(Equal(core.StringPtr("Local")))
				Expect(primaryBackupTargetModel.ArchivalTargetSettings).To(Equal(primaryArchivalTargetModel))
				Expect(primaryBackupTargetModel.UseDefaultBackupTarget).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the RegularBackupPolicy model
				regularBackupPolicyModel := new(backuprecoveryv1.RegularBackupPolicy)
				Expect(regularBackupPolicyModel).ToNot(BeNil())
				regularBackupPolicyModel.Incremental = incrementalBackupPolicyModel
				regularBackupPolicyModel.Full = fullBackupPolicyModel
				regularBackupPolicyModel.FullBackups = []backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}
				regularBackupPolicyModel.Retention = retentionModel
				regularBackupPolicyModel.PrimaryBackupTarget = primaryBackupTargetModel
				Expect(regularBackupPolicyModel.Incremental).To(Equal(incrementalBackupPolicyModel))
				Expect(regularBackupPolicyModel.Full).To(Equal(fullBackupPolicyModel))
				Expect(regularBackupPolicyModel.FullBackups).To(Equal([]backuprecoveryv1.FullScheduleAndRetention{*fullScheduleAndRetentionModel}))
				Expect(regularBackupPolicyModel.Retention).To(Equal(retentionModel))
				Expect(regularBackupPolicyModel.PrimaryBackupTarget).To(Equal(primaryBackupTargetModel))

				// Construct an instance of the LogSchedule model
				logScheduleModel := new(backuprecoveryv1.LogSchedule)
				Expect(logScheduleModel).ToNot(BeNil())
				logScheduleModel.Unit = core.StringPtr("Minutes")
				logScheduleModel.MinuteSchedule = minuteScheduleModel
				logScheduleModel.HourSchedule = hourScheduleModel
				Expect(logScheduleModel.Unit).To(Equal(core.StringPtr("Minutes")))
				Expect(logScheduleModel.MinuteSchedule).To(Equal(minuteScheduleModel))
				Expect(logScheduleModel.HourSchedule).To(Equal(hourScheduleModel))

				// Construct an instance of the LogBackupPolicy model
				logBackupPolicyModel := new(backuprecoveryv1.LogBackupPolicy)
				Expect(logBackupPolicyModel).ToNot(BeNil())
				logBackupPolicyModel.Schedule = logScheduleModel
				logBackupPolicyModel.Retention = retentionModel
				Expect(logBackupPolicyModel.Schedule).To(Equal(logScheduleModel))
				Expect(logBackupPolicyModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the BmrSchedule model
				bmrScheduleModel := new(backuprecoveryv1.BmrSchedule)
				Expect(bmrScheduleModel).ToNot(BeNil())
				bmrScheduleModel.Unit = core.StringPtr("Days")
				bmrScheduleModel.DaySchedule = dayScheduleModel
				bmrScheduleModel.WeekSchedule = weekScheduleModel
				bmrScheduleModel.MonthSchedule = monthScheduleModel
				bmrScheduleModel.YearSchedule = yearScheduleModel
				Expect(bmrScheduleModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(bmrScheduleModel.DaySchedule).To(Equal(dayScheduleModel))
				Expect(bmrScheduleModel.WeekSchedule).To(Equal(weekScheduleModel))
				Expect(bmrScheduleModel.MonthSchedule).To(Equal(monthScheduleModel))
				Expect(bmrScheduleModel.YearSchedule).To(Equal(yearScheduleModel))

				// Construct an instance of the BmrBackupPolicy model
				bmrBackupPolicyModel := new(backuprecoveryv1.BmrBackupPolicy)
				Expect(bmrBackupPolicyModel).ToNot(BeNil())
				bmrBackupPolicyModel.Schedule = bmrScheduleModel
				bmrBackupPolicyModel.Retention = retentionModel
				Expect(bmrBackupPolicyModel.Schedule).To(Equal(bmrScheduleModel))
				Expect(bmrBackupPolicyModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the CdpRetention model
				cdpRetentionModel := new(backuprecoveryv1.CdpRetention)
				Expect(cdpRetentionModel).ToNot(BeNil())
				cdpRetentionModel.Unit = core.StringPtr("Minutes")
				cdpRetentionModel.Duration = core.Int64Ptr(int64(1))
				cdpRetentionModel.DataLockConfig = dataLockConfigModel
				Expect(cdpRetentionModel.Unit).To(Equal(core.StringPtr("Minutes")))
				Expect(cdpRetentionModel.Duration).To(Equal(core.Int64Ptr(int64(1))))
				Expect(cdpRetentionModel.DataLockConfig).To(Equal(dataLockConfigModel))

				// Construct an instance of the CdpBackupPolicy model
				cdpBackupPolicyModel := new(backuprecoveryv1.CdpBackupPolicy)
				Expect(cdpBackupPolicyModel).ToNot(BeNil())
				cdpBackupPolicyModel.Retention = cdpRetentionModel
				Expect(cdpBackupPolicyModel.Retention).To(Equal(cdpRetentionModel))

				// Construct an instance of the StorageArraySnapshotSchedule model
				storageArraySnapshotScheduleModel := new(backuprecoveryv1.StorageArraySnapshotSchedule)
				Expect(storageArraySnapshotScheduleModel).ToNot(BeNil())
				storageArraySnapshotScheduleModel.Unit = core.StringPtr("Minutes")
				storageArraySnapshotScheduleModel.MinuteSchedule = minuteScheduleModel
				storageArraySnapshotScheduleModel.HourSchedule = hourScheduleModel
				storageArraySnapshotScheduleModel.DaySchedule = dayScheduleModel
				storageArraySnapshotScheduleModel.WeekSchedule = weekScheduleModel
				storageArraySnapshotScheduleModel.MonthSchedule = monthScheduleModel
				storageArraySnapshotScheduleModel.YearSchedule = yearScheduleModel
				Expect(storageArraySnapshotScheduleModel.Unit).To(Equal(core.StringPtr("Minutes")))
				Expect(storageArraySnapshotScheduleModel.MinuteSchedule).To(Equal(minuteScheduleModel))
				Expect(storageArraySnapshotScheduleModel.HourSchedule).To(Equal(hourScheduleModel))
				Expect(storageArraySnapshotScheduleModel.DaySchedule).To(Equal(dayScheduleModel))
				Expect(storageArraySnapshotScheduleModel.WeekSchedule).To(Equal(weekScheduleModel))
				Expect(storageArraySnapshotScheduleModel.MonthSchedule).To(Equal(monthScheduleModel))
				Expect(storageArraySnapshotScheduleModel.YearSchedule).To(Equal(yearScheduleModel))

				// Construct an instance of the StorageArraySnapshotBackupPolicy model
				storageArraySnapshotBackupPolicyModel := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
				Expect(storageArraySnapshotBackupPolicyModel).ToNot(BeNil())
				storageArraySnapshotBackupPolicyModel.Schedule = storageArraySnapshotScheduleModel
				storageArraySnapshotBackupPolicyModel.Retention = retentionModel
				Expect(storageArraySnapshotBackupPolicyModel.Schedule).To(Equal(storageArraySnapshotScheduleModel))
				Expect(storageArraySnapshotBackupPolicyModel.Retention).To(Equal(retentionModel))

				// Construct an instance of the CancellationTimeoutParams model
				cancellationTimeoutParamsModel := new(backuprecoveryv1.CancellationTimeoutParams)
				Expect(cancellationTimeoutParamsModel).ToNot(BeNil())
				cancellationTimeoutParamsModel.TimeoutMins = core.Int64Ptr(int64(26))
				cancellationTimeoutParamsModel.BackupType = core.StringPtr("kRegular")
				Expect(cancellationTimeoutParamsModel.TimeoutMins).To(Equal(core.Int64Ptr(int64(26))))
				Expect(cancellationTimeoutParamsModel.BackupType).To(Equal(core.StringPtr("kRegular")))

				// Construct an instance of the BackupPolicy model
				backupPolicyModel := new(backuprecoveryv1.BackupPolicy)
				Expect(backupPolicyModel).ToNot(BeNil())
				backupPolicyModel.Regular = regularBackupPolicyModel
				backupPolicyModel.Log = logBackupPolicyModel
				backupPolicyModel.Bmr = bmrBackupPolicyModel
				backupPolicyModel.Cdp = cdpBackupPolicyModel
				backupPolicyModel.StorageArraySnapshot = storageArraySnapshotBackupPolicyModel
				backupPolicyModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				Expect(backupPolicyModel.Regular).To(Equal(regularBackupPolicyModel))
				Expect(backupPolicyModel.Log).To(Equal(logBackupPolicyModel))
				Expect(backupPolicyModel.Bmr).To(Equal(bmrBackupPolicyModel))
				Expect(backupPolicyModel.Cdp).To(Equal(cdpBackupPolicyModel))
				Expect(backupPolicyModel.StorageArraySnapshot).To(Equal(storageArraySnapshotBackupPolicyModel))
				Expect(backupPolicyModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))

				// Construct an instance of the TimeOfDay model
				timeOfDayModel := new(backuprecoveryv1.TimeOfDay)
				Expect(timeOfDayModel).ToNot(BeNil())
				timeOfDayModel.Hour = core.Int64Ptr(int64(1))
				timeOfDayModel.Minute = core.Int64Ptr(int64(15))
				timeOfDayModel.TimeZone = core.StringPtr("America/Los_Angeles")
				Expect(timeOfDayModel.Hour).To(Equal(core.Int64Ptr(int64(1))))
				Expect(timeOfDayModel.Minute).To(Equal(core.Int64Ptr(int64(15))))
				Expect(timeOfDayModel.TimeZone).To(Equal(core.StringPtr("America/Los_Angeles")))

				// Construct an instance of the BlackoutWindow model
				blackoutWindowModel := new(backuprecoveryv1.BlackoutWindow)
				Expect(blackoutWindowModel).ToNot(BeNil())
				blackoutWindowModel.Day = core.StringPtr("Sunday")
				blackoutWindowModel.StartTime = timeOfDayModel
				blackoutWindowModel.EndTime = timeOfDayModel
				blackoutWindowModel.ConfigID = core.StringPtr("Config-Id")
				Expect(blackoutWindowModel.Day).To(Equal(core.StringPtr("Sunday")))
				Expect(blackoutWindowModel.StartTime).To(Equal(timeOfDayModel))
				Expect(blackoutWindowModel.EndTime).To(Equal(timeOfDayModel))
				Expect(blackoutWindowModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))

				// Construct an instance of the ExtendedRetentionSchedule model
				extendedRetentionScheduleModel := new(backuprecoveryv1.ExtendedRetentionSchedule)
				Expect(extendedRetentionScheduleModel).ToNot(BeNil())
				extendedRetentionScheduleModel.Unit = core.StringPtr("Runs")
				extendedRetentionScheduleModel.Frequency = core.Int64Ptr(int64(3))
				Expect(extendedRetentionScheduleModel.Unit).To(Equal(core.StringPtr("Runs")))
				Expect(extendedRetentionScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(3))))

				// Construct an instance of the ExtendedRetentionPolicy model
				extendedRetentionPolicyModel := new(backuprecoveryv1.ExtendedRetentionPolicy)
				Expect(extendedRetentionPolicyModel).ToNot(BeNil())
				extendedRetentionPolicyModel.Schedule = extendedRetentionScheduleModel
				extendedRetentionPolicyModel.Retention = retentionModel
				extendedRetentionPolicyModel.RunType = core.StringPtr("Regular")
				extendedRetentionPolicyModel.ConfigID = core.StringPtr("Config-Id")
				Expect(extendedRetentionPolicyModel.Schedule).To(Equal(extendedRetentionScheduleModel))
				Expect(extendedRetentionPolicyModel.Retention).To(Equal(retentionModel))
				Expect(extendedRetentionPolicyModel.RunType).To(Equal(core.StringPtr("Regular")))
				Expect(extendedRetentionPolicyModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))

				// Construct an instance of the TargetSchedule model
				targetScheduleModel := new(backuprecoveryv1.TargetSchedule)
				Expect(targetScheduleModel).ToNot(BeNil())
				targetScheduleModel.Unit = core.StringPtr("Runs")
				targetScheduleModel.Frequency = core.Int64Ptr(int64(3))
				Expect(targetScheduleModel.Unit).To(Equal(core.StringPtr("Runs")))
				Expect(targetScheduleModel.Frequency).To(Equal(core.Int64Ptr(int64(3))))

				// Construct an instance of the LogRetention model
				logRetentionModel := new(backuprecoveryv1.LogRetention)
				Expect(logRetentionModel).ToNot(BeNil())
				logRetentionModel.Unit = core.StringPtr("Days")
				logRetentionModel.Duration = core.Int64Ptr(int64(0))
				logRetentionModel.DataLockConfig = dataLockConfigModel
				Expect(logRetentionModel.Unit).To(Equal(core.StringPtr("Days")))
				Expect(logRetentionModel.Duration).To(Equal(core.Int64Ptr(int64(0))))
				Expect(logRetentionModel.DataLockConfig).To(Equal(dataLockConfigModel))

				// Construct an instance of the AWSTargetConfig model
				awsTargetConfigModel := new(backuprecoveryv1.AWSTargetConfig)
				Expect(awsTargetConfigModel).ToNot(BeNil())
				awsTargetConfigModel.Region = core.Int64Ptr(int64(26))
				awsTargetConfigModel.SourceID = core.Int64Ptr(int64(26))
				Expect(awsTargetConfigModel.Region).To(Equal(core.Int64Ptr(int64(26))))
				Expect(awsTargetConfigModel.SourceID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the AzureTargetConfig model
				azureTargetConfigModel := new(backuprecoveryv1.AzureTargetConfig)
				Expect(azureTargetConfigModel).ToNot(BeNil())
				azureTargetConfigModel.ResourceGroup = core.Int64Ptr(int64(26))
				azureTargetConfigModel.SourceID = core.Int64Ptr(int64(26))
				Expect(azureTargetConfigModel.ResourceGroup).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureTargetConfigModel.SourceID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the RemoteTargetConfig model
				remoteTargetConfigModel := new(backuprecoveryv1.RemoteTargetConfig)
				Expect(remoteTargetConfigModel).ToNot(BeNil())
				remoteTargetConfigModel.ClusterID = core.Int64Ptr(int64(26))
				Expect(remoteTargetConfigModel.ClusterID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the ReplicationTargetConfiguration model
				replicationTargetConfigurationModel := new(backuprecoveryv1.ReplicationTargetConfiguration)
				Expect(replicationTargetConfigurationModel).ToNot(BeNil())
				replicationTargetConfigurationModel.Schedule = targetScheduleModel
				replicationTargetConfigurationModel.Retention = retentionModel
				replicationTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				replicationTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				replicationTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				replicationTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				replicationTargetConfigurationModel.LogRetention = logRetentionModel
				replicationTargetConfigurationModel.AwsTargetConfig = awsTargetConfigModel
				replicationTargetConfigurationModel.AzureTargetConfig = azureTargetConfigModel
				replicationTargetConfigurationModel.TargetType = core.StringPtr("RemoteCluster")
				replicationTargetConfigurationModel.RemoteTargetConfig = remoteTargetConfigModel
				Expect(replicationTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(replicationTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(replicationTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(replicationTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(replicationTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(replicationTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(replicationTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(replicationTargetConfigurationModel.AwsTargetConfig).To(Equal(awsTargetConfigModel))
				Expect(replicationTargetConfigurationModel.AzureTargetConfig).To(Equal(azureTargetConfigModel))
				Expect(replicationTargetConfigurationModel.TargetType).To(Equal(core.StringPtr("RemoteCluster")))
				Expect(replicationTargetConfigurationModel.RemoteTargetConfig).To(Equal(remoteTargetConfigModel))

				// Construct an instance of the ArchivalTargetConfiguration model
				archivalTargetConfigurationModel := new(backuprecoveryv1.ArchivalTargetConfiguration)
				Expect(archivalTargetConfigurationModel).ToNot(BeNil())
				archivalTargetConfigurationModel.Schedule = targetScheduleModel
				archivalTargetConfigurationModel.Retention = retentionModel
				archivalTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				archivalTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				archivalTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				archivalTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				archivalTargetConfigurationModel.LogRetention = logRetentionModel
				archivalTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				archivalTargetConfigurationModel.TierSettings = tierLevelSettingsModel
				archivalTargetConfigurationModel.ExtendedRetention = []backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}
				Expect(archivalTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(archivalTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(archivalTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(archivalTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(archivalTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(archivalTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(archivalTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(archivalTargetConfigurationModel.TargetID).To(Equal(core.Int64Ptr(int64(5))))
				Expect(archivalTargetConfigurationModel.TierSettings).To(Equal(tierLevelSettingsModel))
				Expect(archivalTargetConfigurationModel.ExtendedRetention).To(Equal([]backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}))

				// Construct an instance of the CustomTagParams model
				customTagParamsModel := new(backuprecoveryv1.CustomTagParams)
				Expect(customTagParamsModel).ToNot(BeNil())
				customTagParamsModel.Key = core.StringPtr("custom-tag-key")
				customTagParamsModel.Value = core.StringPtr("custom-tag-value")
				Expect(customTagParamsModel.Key).To(Equal(core.StringPtr("custom-tag-key")))
				Expect(customTagParamsModel.Value).To(Equal(core.StringPtr("custom-tag-value")))

				// Construct an instance of the AwsCloudSpinParams model
				awsCloudSpinParamsModel := new(backuprecoveryv1.AwsCloudSpinParams)
				Expect(awsCloudSpinParamsModel).ToNot(BeNil())
				awsCloudSpinParamsModel.CustomTagList = []backuprecoveryv1.CustomTagParams{*customTagParamsModel}
				awsCloudSpinParamsModel.Region = core.Int64Ptr(int64(3))
				awsCloudSpinParamsModel.SubnetID = core.Int64Ptr(int64(26))
				awsCloudSpinParamsModel.VpcID = core.Int64Ptr(int64(26))
				Expect(awsCloudSpinParamsModel.CustomTagList).To(Equal([]backuprecoveryv1.CustomTagParams{*customTagParamsModel}))
				Expect(awsCloudSpinParamsModel.Region).To(Equal(core.Int64Ptr(int64(3))))
				Expect(awsCloudSpinParamsModel.SubnetID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(awsCloudSpinParamsModel.VpcID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the AzureCloudSpinParams model
				azureCloudSpinParamsModel := new(backuprecoveryv1.AzureCloudSpinParams)
				Expect(azureCloudSpinParamsModel).ToNot(BeNil())
				azureCloudSpinParamsModel.AvailabilitySetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.NetworkResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.ResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.StorageResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmResourceGroupID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageAccountID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmStorageContainerID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmSubnetID = core.Int64Ptr(int64(26))
				azureCloudSpinParamsModel.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))
				Expect(azureCloudSpinParamsModel.AvailabilitySetID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.NetworkResourceGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.ResourceGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.StorageAccountID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.StorageContainerID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.StorageResourceGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmResourceGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmStorageAccountID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmStorageContainerID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmSubnetID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(azureCloudSpinParamsModel.TempVmVirtualNetworkID).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the CloudSpinTarget model
				cloudSpinTargetModel := new(backuprecoveryv1.CloudSpinTarget)
				Expect(cloudSpinTargetModel).ToNot(BeNil())
				cloudSpinTargetModel.AwsParams = awsCloudSpinParamsModel
				cloudSpinTargetModel.AzureParams = azureCloudSpinParamsModel
				cloudSpinTargetModel.ID = core.Int64Ptr(int64(2))
				Expect(cloudSpinTargetModel.AwsParams).To(Equal(awsCloudSpinParamsModel))
				Expect(cloudSpinTargetModel.AzureParams).To(Equal(azureCloudSpinParamsModel))
				Expect(cloudSpinTargetModel.ID).To(Equal(core.Int64Ptr(int64(2))))

				// Construct an instance of the CloudSpinTargetConfiguration model
				cloudSpinTargetConfigurationModel := new(backuprecoveryv1.CloudSpinTargetConfiguration)
				Expect(cloudSpinTargetConfigurationModel).ToNot(BeNil())
				cloudSpinTargetConfigurationModel.Schedule = targetScheduleModel
				cloudSpinTargetConfigurationModel.Retention = retentionModel
				cloudSpinTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				cloudSpinTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				cloudSpinTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				cloudSpinTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				cloudSpinTargetConfigurationModel.LogRetention = logRetentionModel
				cloudSpinTargetConfigurationModel.Target = cloudSpinTargetModel
				Expect(cloudSpinTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(cloudSpinTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(cloudSpinTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(cloudSpinTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(cloudSpinTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(cloudSpinTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(cloudSpinTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(cloudSpinTargetConfigurationModel.Target).To(Equal(cloudSpinTargetModel))

				// Construct an instance of the OnpremDeployParams model
				onpremDeployParamsModel := new(backuprecoveryv1.OnpremDeployParams)
				Expect(onpremDeployParamsModel).ToNot(BeNil())
				onpremDeployParamsModel.ID = core.Int64Ptr(int64(4))
				Expect(onpremDeployParamsModel.ID).To(Equal(core.Int64Ptr(int64(4))))

				// Construct an instance of the OnpremDeployTargetConfiguration model
				onpremDeployTargetConfigurationModel := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
				Expect(onpremDeployTargetConfigurationModel).ToNot(BeNil())
				onpremDeployTargetConfigurationModel.Schedule = targetScheduleModel
				onpremDeployTargetConfigurationModel.Retention = retentionModel
				onpremDeployTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				onpremDeployTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				onpremDeployTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				onpremDeployTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				onpremDeployTargetConfigurationModel.LogRetention = logRetentionModel
				onpremDeployTargetConfigurationModel.Params = onpremDeployParamsModel
				Expect(onpremDeployTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(onpremDeployTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(onpremDeployTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(onpremDeployTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(onpremDeployTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(onpremDeployTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(onpremDeployTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(onpremDeployTargetConfigurationModel.Params).To(Equal(onpremDeployParamsModel))

				// Construct an instance of the RpaasTargetConfiguration model
				rpaasTargetConfigurationModel := new(backuprecoveryv1.RpaasTargetConfiguration)
				Expect(rpaasTargetConfigurationModel).ToNot(BeNil())
				rpaasTargetConfigurationModel.Schedule = targetScheduleModel
				rpaasTargetConfigurationModel.Retention = retentionModel
				rpaasTargetConfigurationModel.CopyOnRunSuccess = core.BoolPtr(true)
				rpaasTargetConfigurationModel.ConfigID = core.StringPtr("Config-Id")
				rpaasTargetConfigurationModel.BackupRunType = core.StringPtr("Regular")
				rpaasTargetConfigurationModel.RunTimeouts = []backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}
				rpaasTargetConfigurationModel.LogRetention = logRetentionModel
				rpaasTargetConfigurationModel.TargetID = core.Int64Ptr(int64(5))
				rpaasTargetConfigurationModel.TargetType = core.StringPtr("Tape")
				Expect(rpaasTargetConfigurationModel.Schedule).To(Equal(targetScheduleModel))
				Expect(rpaasTargetConfigurationModel.Retention).To(Equal(retentionModel))
				Expect(rpaasTargetConfigurationModel.CopyOnRunSuccess).To(Equal(core.BoolPtr(true)))
				Expect(rpaasTargetConfigurationModel.ConfigID).To(Equal(core.StringPtr("Config-Id")))
				Expect(rpaasTargetConfigurationModel.BackupRunType).To(Equal(core.StringPtr("Regular")))
				Expect(rpaasTargetConfigurationModel.RunTimeouts).To(Equal([]backuprecoveryv1.CancellationTimeoutParams{*cancellationTimeoutParamsModel}))
				Expect(rpaasTargetConfigurationModel.LogRetention).To(Equal(logRetentionModel))
				Expect(rpaasTargetConfigurationModel.TargetID).To(Equal(core.Int64Ptr(int64(5))))
				Expect(rpaasTargetConfigurationModel.TargetType).To(Equal(core.StringPtr("Tape")))

				// Construct an instance of the TargetsConfiguration model
				targetsConfigurationModel := new(backuprecoveryv1.TargetsConfiguration)
				Expect(targetsConfigurationModel).ToNot(BeNil())
				targetsConfigurationModel.ReplicationTargets = []backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}
				targetsConfigurationModel.ArchivalTargets = []backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}
				targetsConfigurationModel.CloudSpinTargets = []backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}
				targetsConfigurationModel.OnpremDeployTargets = []backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}
				targetsConfigurationModel.RpaasTargets = []backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}
				Expect(targetsConfigurationModel.ReplicationTargets).To(Equal([]backuprecoveryv1.ReplicationTargetConfiguration{*replicationTargetConfigurationModel}))
				Expect(targetsConfigurationModel.ArchivalTargets).To(Equal([]backuprecoveryv1.ArchivalTargetConfiguration{*archivalTargetConfigurationModel}))
				Expect(targetsConfigurationModel.CloudSpinTargets).To(Equal([]backuprecoveryv1.CloudSpinTargetConfiguration{*cloudSpinTargetConfigurationModel}))
				Expect(targetsConfigurationModel.OnpremDeployTargets).To(Equal([]backuprecoveryv1.OnpremDeployTargetConfiguration{*onpremDeployTargetConfigurationModel}))
				Expect(targetsConfigurationModel.RpaasTargets).To(Equal([]backuprecoveryv1.RpaasTargetConfiguration{*rpaasTargetConfigurationModel}))

				// Construct an instance of the CascadedTargetConfiguration model
				cascadedTargetConfigurationModel := new(backuprecoveryv1.CascadedTargetConfiguration)
				Expect(cascadedTargetConfigurationModel).ToNot(BeNil())
				cascadedTargetConfigurationModel.SourceClusterID = core.Int64Ptr(int64(26))
				cascadedTargetConfigurationModel.RemoteTargets = targetsConfigurationModel
				Expect(cascadedTargetConfigurationModel.SourceClusterID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(cascadedTargetConfigurationModel.RemoteTargets).To(Equal(targetsConfigurationModel))

				// Construct an instance of the RetryOptions model
				retryOptionsModel := new(backuprecoveryv1.RetryOptions)
				Expect(retryOptionsModel).ToNot(BeNil())
				retryOptionsModel.Retries = core.Int64Ptr(int64(0))
				retryOptionsModel.RetryIntervalMins = core.Int64Ptr(int64(1))
				Expect(retryOptionsModel.Retries).To(Equal(core.Int64Ptr(int64(0))))
				Expect(retryOptionsModel.RetryIntervalMins).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the UpdateProtectionPolicyOptions model
				id := "testString"
				xIbmTenantID := "tenantId"
				updateProtectionPolicyOptionsName := "update-protection-policy"
				var updateProtectionPolicyOptionsBackupPolicy *backuprecoveryv1.BackupPolicy = nil
				updateProtectionPolicyOptionsModel := backupRecoveryService.NewUpdateProtectionPolicyOptions(id, xIbmTenantID, updateProtectionPolicyOptionsName, updateProtectionPolicyOptionsBackupPolicy)
				updateProtectionPolicyOptionsModel.SetID("testString")
				updateProtectionPolicyOptionsModel.SetXIBMTenantID("tenantId")
				updateProtectionPolicyOptionsModel.SetName("update-protection-policy")
				updateProtectionPolicyOptionsModel.SetBackupPolicy(backupPolicyModel)
				updateProtectionPolicyOptionsModel.SetDescription("Protection Policy")
				updateProtectionPolicyOptionsModel.SetBlackoutWindow([]backuprecoveryv1.BlackoutWindow{*blackoutWindowModel})
				updateProtectionPolicyOptionsModel.SetExtendedRetention([]backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel})
				updateProtectionPolicyOptionsModel.SetRemoteTargetPolicy(targetsConfigurationModel)
				updateProtectionPolicyOptionsModel.SetCascadedTargetsConfig([]backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel})
				updateProtectionPolicyOptionsModel.SetRetryOptions(retryOptionsModel)
				updateProtectionPolicyOptionsModel.SetDataLock("Compliance")
				updateProtectionPolicyOptionsModel.SetVersion(int64(38))
				updateProtectionPolicyOptionsModel.SetIsCBSEnabled(true)
				updateProtectionPolicyOptionsModel.SetLastModificationTimeUsecs(int64(26))
				updateProtectionPolicyOptionsModel.SetTemplateID("protection-policy-template")
				updateProtectionPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateProtectionPolicyOptionsModel).ToNot(BeNil())
				Expect(updateProtectionPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateProtectionPolicyOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(updateProtectionPolicyOptionsModel.Name).To(Equal(core.StringPtr("update-protection-policy")))
				Expect(updateProtectionPolicyOptionsModel.BackupPolicy).To(Equal(backupPolicyModel))
				Expect(updateProtectionPolicyOptionsModel.Description).To(Equal(core.StringPtr("Protection Policy")))
				Expect(updateProtectionPolicyOptionsModel.BlackoutWindow).To(Equal([]backuprecoveryv1.BlackoutWindow{*blackoutWindowModel}))
				Expect(updateProtectionPolicyOptionsModel.ExtendedRetention).To(Equal([]backuprecoveryv1.ExtendedRetentionPolicy{*extendedRetentionPolicyModel}))
				Expect(updateProtectionPolicyOptionsModel.RemoteTargetPolicy).To(Equal(targetsConfigurationModel))
				Expect(updateProtectionPolicyOptionsModel.CascadedTargetsConfig).To(Equal([]backuprecoveryv1.CascadedTargetConfiguration{*cascadedTargetConfigurationModel}))
				Expect(updateProtectionPolicyOptionsModel.RetryOptions).To(Equal(retryOptionsModel))
				Expect(updateProtectionPolicyOptionsModel.DataLock).To(Equal(core.StringPtr("Compliance")))
				Expect(updateProtectionPolicyOptionsModel.Version).To(Equal(core.Int64Ptr(int64(38))))
				Expect(updateProtectionPolicyOptionsModel.IsCBSEnabled).To(Equal(core.BoolPtr(true)))
				Expect(updateProtectionPolicyOptionsModel.LastModificationTimeUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(updateProtectionPolicyOptionsModel.TemplateID).To(Equal(core.StringPtr("protection-policy-template")))
				Expect(updateProtectionPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateProtectionSourceRegistrationOptions successfully`, func() {
				// Construct an instance of the ConnectionConfig model
				connectionConfigModel := new(backuprecoveryv1.ConnectionConfig)
				Expect(connectionConfigModel).ToNot(BeNil())
				connectionConfigModel.ConnectionID = core.Int64Ptr(int64(26))
				connectionConfigModel.EntityID = core.Int64Ptr(int64(26))
				connectionConfigModel.ConnectorGroupID = core.Int64Ptr(int64(26))
				connectionConfigModel.DataSourceConnectionID = core.StringPtr("DatasourceConnectionId")
				Expect(connectionConfigModel.ConnectionID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(connectionConfigModel.EntityID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(connectionConfigModel.ConnectorGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(connectionConfigModel.DataSourceConnectionID).To(Equal(core.StringPtr("DatasourceConnectionId")))

				// Construct an instance of the KeyValuePair model
				keyValuePairModel := new(backuprecoveryv1.KeyValuePair)
				Expect(keyValuePairModel).ToNot(BeNil())
				keyValuePairModel.Key = core.StringPtr("configKey")
				keyValuePairModel.Value = core.StringPtr("configValue")
				Expect(keyValuePairModel.Key).To(Equal(core.StringPtr("configKey")))
				Expect(keyValuePairModel.Value).To(Equal(core.StringPtr("configValue")))

				// Construct an instance of the PhysicalSourceRegistrationParams model
				physicalSourceRegistrationParamsModel := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
				Expect(physicalSourceRegistrationParamsModel).ToNot(BeNil())
				physicalSourceRegistrationParamsModel.Endpoint = core.StringPtr("xxx.xx.xx.xx")
				physicalSourceRegistrationParamsModel.ForceRegister = core.BoolPtr(true)
				physicalSourceRegistrationParamsModel.HostType = core.StringPtr("kLinux")
				physicalSourceRegistrationParamsModel.PhysicalType = core.StringPtr("kGroup")
				physicalSourceRegistrationParamsModel.Applications = []string{"kSQL"}
				Expect(physicalSourceRegistrationParamsModel.Endpoint).To(Equal(core.StringPtr("xxx.xx.xx.xx")))
				Expect(physicalSourceRegistrationParamsModel.ForceRegister).To(Equal(core.BoolPtr(true)))
				Expect(physicalSourceRegistrationParamsModel.HostType).To(Equal(core.StringPtr("kLinux")))
				Expect(physicalSourceRegistrationParamsModel.PhysicalType).To(Equal(core.StringPtr("kGroup")))
				Expect(physicalSourceRegistrationParamsModel.Applications).To(Equal([]string{"kSQL"}))

				// Construct an instance of the UpdateProtectionSourceRegistrationOptions model
				id := int64(26)
				xIbmTenantID := "tenantId"
				updateProtectionSourceRegistrationOptionsEnvironment := "kPhysical"
				updateProtectionSourceRegistrationOptionsModel := backupRecoveryService.NewUpdateProtectionSourceRegistrationOptions(id, xIbmTenantID, updateProtectionSourceRegistrationOptionsEnvironment)
				updateProtectionSourceRegistrationOptionsModel.SetID(int64(26))
				updateProtectionSourceRegistrationOptionsModel.SetXIBMTenantID("tenantId")
				updateProtectionSourceRegistrationOptionsModel.SetEnvironment("kPhysical")
				updateProtectionSourceRegistrationOptionsModel.SetName("update-protection-source")
				updateProtectionSourceRegistrationOptionsModel.SetIsInternalEncrypted(true)
				updateProtectionSourceRegistrationOptionsModel.SetEncryptionKey("encryptionKey")
				updateProtectionSourceRegistrationOptionsModel.SetConnectionID(int64(26))
				updateProtectionSourceRegistrationOptionsModel.SetConnections([]backuprecoveryv1.ConnectionConfig{*connectionConfigModel})
				updateProtectionSourceRegistrationOptionsModel.SetConnectorGroupID(int64(26))
				updateProtectionSourceRegistrationOptionsModel.SetAdvancedConfigs([]backuprecoveryv1.KeyValuePair{*keyValuePairModel})
				updateProtectionSourceRegistrationOptionsModel.SetDataSourceConnectionID("DatasourceConnectionId")
				updateProtectionSourceRegistrationOptionsModel.SetLastModifiedTimestampUsecs(int64(26))
				updateProtectionSourceRegistrationOptionsModel.SetPhysicalParams(physicalSourceRegistrationParamsModel)
				updateProtectionSourceRegistrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateProtectionSourceRegistrationOptionsModel).ToNot(BeNil())
				Expect(updateProtectionSourceRegistrationOptionsModel.ID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(updateProtectionSourceRegistrationOptionsModel.XIBMTenantID).To(Equal(core.StringPtr("tenantId")))
				Expect(updateProtectionSourceRegistrationOptionsModel.Environment).To(Equal(core.StringPtr("kPhysical")))
				Expect(updateProtectionSourceRegistrationOptionsModel.Name).To(Equal(core.StringPtr("update-protection-source")))
				Expect(updateProtectionSourceRegistrationOptionsModel.IsInternalEncrypted).To(Equal(core.BoolPtr(true)))
				Expect(updateProtectionSourceRegistrationOptionsModel.EncryptionKey).To(Equal(core.StringPtr("encryptionKey")))
				Expect(updateProtectionSourceRegistrationOptionsModel.ConnectionID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(updateProtectionSourceRegistrationOptionsModel.Connections).To(Equal([]backuprecoveryv1.ConnectionConfig{*connectionConfigModel}))
				Expect(updateProtectionSourceRegistrationOptionsModel.ConnectorGroupID).To(Equal(core.Int64Ptr(int64(26))))
				Expect(updateProtectionSourceRegistrationOptionsModel.AdvancedConfigs).To(Equal([]backuprecoveryv1.KeyValuePair{*keyValuePairModel}))
				Expect(updateProtectionSourceRegistrationOptionsModel.DataSourceConnectionID).To(Equal(core.StringPtr("DatasourceConnectionId")))
				Expect(updateProtectionSourceRegistrationOptionsModel.LastModifiedTimestampUsecs).To(Equal(core.Int64Ptr(int64(26))))
				Expect(updateProtectionSourceRegistrationOptionsModel.PhysicalParams).To(Equal(physicalSourceRegistrationParamsModel))
				Expect(updateProtectionSourceRegistrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewWeekSchedule successfully`, func() {
				dayOfWeek := []string{"Sunday"}
				_model, err := backupRecoveryService.NewWeekSchedule(dayOfWeek)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewYearSchedule successfully`, func() {
				dayOfYear := "First"
				_model, err := backupRecoveryService.NewYearSchedule(dayOfYear)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
		})
	})
	Describe(`Model unmarshaling tests`, func() {
		It(`Invoke UnmarshalAAGInfo successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AAGInfo)
			model.Name = core.StringPtr("testString")
			model.ObjectID = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AAGInfo
			err = backuprecoveryv1.UnmarshalAAGInfo(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAWSTargetConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AWSTargetConfig)
			model.Name = core.StringPtr("testString")
			model.Region = core.Int64Ptr(int64(26))
			model.RegionName = core.StringPtr("testString")
			model.SourceID = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AWSTargetConfig
			err = backuprecoveryv1.UnmarshalAWSTargetConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAWSTier successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AWSTier)
			model.MoveAfterUnit = core.StringPtr("Days")
			model.MoveAfter = core.Int64Ptr(int64(26))
			model.TierType = core.StringPtr("kAmazonS3Standard")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AWSTier
			err = backuprecoveryv1.UnmarshalAWSTier(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAWSTiers successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AWSTiers)
			model.Tiers = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AWSTiers
			err = backuprecoveryv1.UnmarshalAWSTiers(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAdvancedSettings successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AdvancedSettings)
			model.ClonedDbBackupStatus = core.StringPtr("kError")
			model.DbBackupIfNotOnlineStatus = core.StringPtr("kError")
			model.MissingDbBackupStatus = core.StringPtr("kError")
			model.OfflineRestoringDbBackupStatus = core.StringPtr("kError")
			model.ReadOnlyDbBackupStatus = core.StringPtr("kError")
			model.ReportAllNonAutoprotectDbErrors = core.StringPtr("kError")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AdvancedSettings
			err = backuprecoveryv1.UnmarshalAdvancedSettings(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertTarget successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AlertTarget)
			model.EmailAddress = core.StringPtr("testString")
			model.Language = core.StringPtr("en-us")
			model.RecipientType = core.StringPtr("kTo")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AlertTarget
			err = backuprecoveryv1.UnmarshalAlertTarget(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalArchivalTargetConfiguration successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ArchivalTargetConfiguration)
			model.Schedule = nil
			model.Retention = nil
			model.CopyOnRunSuccess = core.BoolPtr(true)
			model.ConfigID = core.StringPtr("testString")
			model.BackupRunType = core.StringPtr("Regular")
			model.RunTimeouts = nil
			model.LogRetention = nil
			model.TargetID = core.Int64Ptr(int64(26))
			model.TargetName = core.StringPtr("testString")
			model.TargetType = core.StringPtr("Tape")
			model.TierSettings = nil
			model.ExtendedRetention = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ArchivalTargetConfiguration
			err = backuprecoveryv1.UnmarshalArchivalTargetConfiguration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalArchivalTargetTierInfo successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ArchivalTargetTierInfo)
			model.AwsTiering = nil
			model.AzureTiering = nil
			model.CloudPlatform = core.StringPtr("AWS")
			model.GoogleTiering = nil
			model.OracleTiering = nil
			model.CurrentTierType = core.StringPtr("kAmazonS3Standard")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ArchivalTargetTierInfo
			err = backuprecoveryv1.UnmarshalArchivalTargetTierInfo(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAwsCloudSpinParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AwsCloudSpinParams)
			model.CustomTagList = nil
			model.Region = core.Int64Ptr(int64(26))
			model.SubnetID = core.Int64Ptr(int64(26))
			model.VpcID = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AwsCloudSpinParams
			err = backuprecoveryv1.UnmarshalAwsCloudSpinParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAzureCloudSpinParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AzureCloudSpinParams)
			model.AvailabilitySetID = core.Int64Ptr(int64(26))
			model.NetworkResourceGroupID = core.Int64Ptr(int64(26))
			model.ResourceGroupID = core.Int64Ptr(int64(26))
			model.StorageAccountID = core.Int64Ptr(int64(26))
			model.StorageContainerID = core.Int64Ptr(int64(26))
			model.StorageResourceGroupID = core.Int64Ptr(int64(26))
			model.TempVmResourceGroupID = core.Int64Ptr(int64(26))
			model.TempVmStorageAccountID = core.Int64Ptr(int64(26))
			model.TempVmStorageContainerID = core.Int64Ptr(int64(26))
			model.TempVmSubnetID = core.Int64Ptr(int64(26))
			model.TempVmVirtualNetworkID = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AzureCloudSpinParams
			err = backuprecoveryv1.UnmarshalAzureCloudSpinParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAzureTargetConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AzureTargetConfig)
			model.Name = core.StringPtr("testString")
			model.ResourceGroup = core.Int64Ptr(int64(26))
			model.ResourceGroupName = core.StringPtr("testString")
			model.SourceID = core.Int64Ptr(int64(26))
			model.StorageAccount = core.Int64Ptr(int64(38))
			model.StorageAccountName = core.StringPtr("testString")
			model.StorageContainer = core.Int64Ptr(int64(38))
			model.StorageContainerName = core.StringPtr("testString")
			model.StorageResourceGroup = core.Int64Ptr(int64(38))
			model.StorageResourceGroupName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AzureTargetConfig
			err = backuprecoveryv1.UnmarshalAzureTargetConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAzureTier successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AzureTier)
			model.MoveAfterUnit = core.StringPtr("Days")
			model.MoveAfter = core.Int64Ptr(int64(26))
			model.TierType = core.StringPtr("kAzureTierHot")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AzureTier
			err = backuprecoveryv1.UnmarshalAzureTier(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAzureTiers successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.AzureTiers)
			model.Tiers = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.AzureTiers
			err = backuprecoveryv1.UnmarshalAzureTiers(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalBackupPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.BackupPolicy)
			model.Regular = nil
			model.Log = nil
			model.Bmr = nil
			model.Cdp = nil
			model.StorageArraySnapshot = nil
			model.RunTimeouts = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.BackupPolicy
			err = backuprecoveryv1.UnmarshalBackupPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalBlackoutWindow successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.BlackoutWindow)
			model.Day = core.StringPtr("Sunday")
			model.StartTime = nil
			model.EndTime = nil
			model.ConfigID = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.BlackoutWindow
			err = backuprecoveryv1.UnmarshalBlackoutWindow(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalBmrBackupPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.BmrBackupPolicy)
			model.Schedule = nil
			model.Retention = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.BmrBackupPolicy
			err = backuprecoveryv1.UnmarshalBmrBackupPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalBmrSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.BmrSchedule)
			model.Unit = core.StringPtr("Days")
			model.DaySchedule = nil
			model.WeekSchedule = nil
			model.MonthSchedule = nil
			model.YearSchedule = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.BmrSchedule
			err = backuprecoveryv1.UnmarshalBmrSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCancelProtectionGroupRunRequest successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CancelProtectionGroupRunRequest)
			model.RunID = core.StringPtr("testString")
			model.LocalTaskID = core.StringPtr("testString")
			model.ObjectIds = []int64{int64(26)}
			model.ReplicationTaskID = []string{"testString"}
			model.ArchivalTaskID = []string{"testString"}
			model.CloudSpinTaskID = []string{"testString"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CancelProtectionGroupRunRequest
			err = backuprecoveryv1.UnmarshalCancelProtectionGroupRunRequest(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCancellationTimeoutParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CancellationTimeoutParams)
			model.TimeoutMins = core.Int64Ptr(int64(26))
			model.BackupType = core.StringPtr("kRegular")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CancellationTimeoutParams
			err = backuprecoveryv1.UnmarshalCancellationTimeoutParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCascadedTargetConfiguration successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CascadedTargetConfiguration)
			model.SourceClusterID = core.Int64Ptr(int64(26))
			model.RemoteTargets = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CascadedTargetConfiguration
			err = backuprecoveryv1.UnmarshalCascadedTargetConfiguration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCassandraOnPremSearchParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CassandraOnPremSearchParams)
			model.CassandraObjectTypes = []string{"CassandraKeyspaces"}
			model.SearchString = core.StringPtr("testString")
			model.SourceIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CassandraOnPremSearchParams
			err = backuprecoveryv1.UnmarshalCassandraOnPremSearchParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCdpBackupPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CdpBackupPolicy)
			model.Retention = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CdpBackupPolicy
			err = backuprecoveryv1.UnmarshalCdpBackupPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCdpRetention successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CdpRetention)
			model.Unit = core.StringPtr("Minutes")
			model.Duration = core.Int64Ptr(int64(1))
			model.DataLockConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CdpRetention
			err = backuprecoveryv1.UnmarshalCdpRetention(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCloudSpinTarget successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CloudSpinTarget)
			model.AwsParams = nil
			model.AzureParams = nil
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CloudSpinTarget
			err = backuprecoveryv1.UnmarshalCloudSpinTarget(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCloudSpinTargetConfiguration successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CloudSpinTargetConfiguration)
			model.Schedule = nil
			model.Retention = nil
			model.CopyOnRunSuccess = core.BoolPtr(true)
			model.ConfigID = core.StringPtr("testString")
			model.BackupRunType = core.StringPtr("Regular")
			model.RunTimeouts = nil
			model.LogRetention = nil
			model.Target = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CloudSpinTargetConfiguration
			err = backuprecoveryv1.UnmarshalCloudSpinTargetConfiguration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCommonPostBackupScriptParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CommonPostBackupScriptParams)
			model.Path = core.StringPtr("testString")
			model.Params = core.StringPtr("testString")
			model.TimeoutSecs = core.Int64Ptr(int64(1))
			model.IsActive = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CommonPostBackupScriptParams
			err = backuprecoveryv1.UnmarshalCommonPostBackupScriptParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCommonPreBackupScriptParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CommonPreBackupScriptParams)
			model.Path = core.StringPtr("testString")
			model.Params = core.StringPtr("testString")
			model.TimeoutSecs = core.Int64Ptr(int64(1))
			model.IsActive = core.BoolPtr(true)
			model.ContinueOnError = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CommonPreBackupScriptParams
			err = backuprecoveryv1.UnmarshalCommonPreBackupScriptParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCommonRecoverFileAndFolderInfo successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CommonRecoverFileAndFolderInfo)
			model.AbsolutePath = core.StringPtr("testString")
			model.DestinationDir = core.StringPtr("testString")
			model.IsDirectory = core.BoolPtr(true)
			model.Status = core.StringPtr("NotStarted")
			model.Messages = []string{"testString"}
			model.IsViewFileRecovery = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CommonRecoverFileAndFolderInfo
			err = backuprecoveryv1.UnmarshalCommonRecoverFileAndFolderInfo(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCommonRecoverObjectSnapshotParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CommonRecoverObjectSnapshotParams)
			model.SnapshotID = core.StringPtr("testString")
			model.PointInTimeUsecs = core.Int64Ptr(int64(26))
			model.ProtectionGroupID = core.StringPtr("testString")
			model.ProtectionGroupName = core.StringPtr("testString")
			model.SnapshotCreationTimeUsecs = core.Int64Ptr(int64(26))
			model.ObjectInfo = nil
			model.SnapshotTargetType = core.StringPtr("Local")
			model.ArchivalTargetInfo = nil
			model.ProgressTaskID = core.StringPtr("testString")
			model.RecoverFromStandby = core.BoolPtr(true)
			model.Status = core.StringPtr("Accepted")
			model.StartTimeUsecs = core.Int64Ptr(int64(26))
			model.EndTimeUsecs = core.Int64Ptr(int64(26))
			model.Messages = []string{"testString"}
			model.BytesRestored = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CommonRecoverObjectSnapshotParams
			err = backuprecoveryv1.UnmarshalCommonRecoverObjectSnapshotParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCommonRecoverObjectSnapshotParamsArchivalTargetInfo successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CommonRecoverObjectSnapshotParamsArchivalTargetInfo)
			model.TargetID = core.Int64Ptr(int64(26))
			model.ArchivalTaskID = core.StringPtr("testString")
			model.TargetName = core.StringPtr("testString")
			model.TargetType = core.StringPtr("Tape")
			model.UsageType = core.StringPtr("Archival")
			model.OwnershipContext = core.StringPtr("Local")
			model.TierSettings = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CommonRecoverObjectSnapshotParamsArchivalTargetInfo
			err = backuprecoveryv1.UnmarshalCommonRecoverObjectSnapshotParamsArchivalTargetInfo(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCommonRecoverObjectSnapshotParamsObjectInfo successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CommonRecoverObjectSnapshotParamsObjectInfo)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.SourceID = core.Int64Ptr(int64(26))
			model.SourceName = core.StringPtr("testString")
			model.Environment = core.StringPtr("kPhysical")
			model.ObjectHash = core.StringPtr("testString")
			model.ObjectType = core.StringPtr("kCluster")
			model.LogicalSizeBytes = core.Int64Ptr(int64(26))
			model.UUID = core.StringPtr("testString")
			model.GlobalID = core.StringPtr("testString")
			model.ProtectionType = core.StringPtr("kAgent")
			model.SharepointSiteSummary = nil
			model.OsType = core.StringPtr("kLinux")
			model.ChildObjects = nil
			model.VCenterSummary = nil
			model.WindowsClusterSummary = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CommonRecoverObjectSnapshotParamsObjectInfo
			err = backuprecoveryv1.UnmarshalCommonRecoverObjectSnapshotParamsObjectInfo(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalConnectionConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ConnectionConfig)
			model.ConnectionID = core.Int64Ptr(int64(26))
			model.EntityID = core.Int64Ptr(int64(26))
			model.ConnectorGroupID = core.Int64Ptr(int64(26))
			model.DataSourceConnectionID = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ConnectionConfig
			err = backuprecoveryv1.UnmarshalConnectionConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCouchBaseOnPremSearchParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CouchBaseOnPremSearchParams)
			model.CouchbaseObjectTypes = []string{"CouchbaseBuckets"}
			model.SearchString = core.StringPtr("testString")
			model.SourceIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CouchBaseOnPremSearchParams
			err = backuprecoveryv1.UnmarshalCouchBaseOnPremSearchParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalCustomTagParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.CustomTagParams)
			model.Key = core.StringPtr("testString")
			model.Value = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.CustomTagParams
			err = backuprecoveryv1.UnmarshalCustomTagParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDataLockConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.DataLockConfig)
			model.Mode = core.StringPtr("Compliance")
			model.Unit = core.StringPtr("Days")
			model.Duration = core.Int64Ptr(int64(1))
			model.EnableWormOnExternalTarget = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.DataLockConfig
			err = backuprecoveryv1.UnmarshalDataLockConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDaySchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.DaySchedule)
			model.Frequency = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.DaySchedule
			err = backuprecoveryv1.UnmarshalDaySchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDocumentObject successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.DocumentObject)
			model.IsDirectory = core.BoolPtr(true)
			model.ItemID = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.DocumentObject
			err = backuprecoveryv1.UnmarshalDocumentObject(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalExtendedRetentionPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ExtendedRetentionPolicy)
			model.Schedule = nil
			model.Retention = nil
			model.RunType = core.StringPtr("Regular")
			model.ConfigID = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ExtendedRetentionPolicy
			err = backuprecoveryv1.UnmarshalExtendedRetentionPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalExtendedRetentionSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ExtendedRetentionSchedule)
			model.Unit = core.StringPtr("Runs")
			model.Frequency = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ExtendedRetentionSchedule
			err = backuprecoveryv1.UnmarshalExtendedRetentionSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalFilenamePatternToDirectory successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.FilenamePatternToDirectory)
			model.Directory = core.StringPtr("testString")
			model.FilenamePattern = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.FilenamePatternToDirectory
			err = backuprecoveryv1.UnmarshalFilenamePatternToDirectory(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalFilesAndFoldersObject successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.FilesAndFoldersObject)
			model.AbsolutePath = core.StringPtr("testString")
			model.IsDirectory = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.FilesAndFoldersObject
			err = backuprecoveryv1.UnmarshalFilesAndFoldersObject(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalFilter successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.Filter)
			model.FilterString = core.StringPtr("testString")
			model.IsRegularExpression = core.BoolPtr(false)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.Filter
			err = backuprecoveryv1.UnmarshalFilter(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalFullBackupPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.FullBackupPolicy)
			model.Schedule = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.FullBackupPolicy
			err = backuprecoveryv1.UnmarshalFullBackupPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalFullSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.FullSchedule)
			model.Unit = core.StringPtr("Days")
			model.DaySchedule = nil
			model.WeekSchedule = nil
			model.MonthSchedule = nil
			model.YearSchedule = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.FullSchedule
			err = backuprecoveryv1.UnmarshalFullSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalFullScheduleAndRetention successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.FullScheduleAndRetention)
			model.Schedule = nil
			model.Retention = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.FullScheduleAndRetention
			err = backuprecoveryv1.UnmarshalFullScheduleAndRetention(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalGoogleTier successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.GoogleTier)
			model.MoveAfterUnit = core.StringPtr("Days")
			model.MoveAfter = core.Int64Ptr(int64(26))
			model.TierType = core.StringPtr("kGoogleStandard")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.GoogleTier
			err = backuprecoveryv1.UnmarshalGoogleTier(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalGoogleTiers successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.GoogleTiers)
			model.Tiers = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.GoogleTiers
			err = backuprecoveryv1.UnmarshalGoogleTiers(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalHDFSOnPremSearchParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.HDFSOnPremSearchParams)
			model.HdfsTypes = []string{"HDFSFolders"}
			model.SearchString = core.StringPtr("testString")
			model.SourceIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.HDFSOnPremSearchParams
			err = backuprecoveryv1.UnmarshalHDFSOnPremSearchParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalHbaseOnPremSearchParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.HbaseOnPremSearchParams)
			model.HbaseObjectTypes = []string{"HbaseNamespaces"}
			model.SearchString = core.StringPtr("testString")
			model.SourceIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.HbaseOnPremSearchParams
			err = backuprecoveryv1.UnmarshalHbaseOnPremSearchParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalHiveOnPremSearchParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.HiveOnPremSearchParams)
			model.HiveObjectTypes = []string{"HiveDatabases"}
			model.SearchString = core.StringPtr("testString")
			model.SourceIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.HiveOnPremSearchParams
			err = backuprecoveryv1.UnmarshalHiveOnPremSearchParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalHostInformation successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.HostInformation)
			model.ID = core.StringPtr("testString")
			model.Name = core.StringPtr("testString")
			model.Environment = core.StringPtr("kPhysical")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.HostInformation
			err = backuprecoveryv1.UnmarshalHostInformation(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalHourSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.HourSchedule)
			model.Frequency = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.HourSchedule
			err = backuprecoveryv1.UnmarshalHourSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalIncrementalBackupPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.IncrementalBackupPolicy)
			model.Schedule = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.IncrementalBackupPolicy
			err = backuprecoveryv1.UnmarshalIncrementalBackupPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalIncrementalSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.IncrementalSchedule)
			model.Unit = core.StringPtr("Minutes")
			model.MinuteSchedule = nil
			model.HourSchedule = nil
			model.DaySchedule = nil
			model.WeekSchedule = nil
			model.MonthSchedule = nil
			model.YearSchedule = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.IncrementalSchedule
			err = backuprecoveryv1.UnmarshalIncrementalSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalIndexingPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.IndexingPolicy)
			model.EnableIndexing = core.BoolPtr(true)
			model.IncludePaths = []string{"testString"}
			model.ExcludePaths = []string{"testString"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.IndexingPolicy
			err = backuprecoveryv1.UnmarshalIndexingPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalKeyValuePair successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.KeyValuePair)
			model.Key = core.StringPtr("testString")
			model.Value = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.KeyValuePair
			err = backuprecoveryv1.UnmarshalKeyValuePair(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalLinuxAgentParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.LinuxAgentParams)
			model.PackageType = core.StringPtr("kScript")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.LinuxAgentParams
			err = backuprecoveryv1.UnmarshalLinuxAgentParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalLogBackupPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.LogBackupPolicy)
			model.Schedule = nil
			model.Retention = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.LogBackupPolicy
			err = backuprecoveryv1.UnmarshalLogBackupPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalLogRetention successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.LogRetention)
			model.Unit = core.StringPtr("Days")
			model.Duration = core.Int64Ptr(int64(0))
			model.DataLockConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.LogRetention
			err = backuprecoveryv1.UnmarshalLogRetention(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalLogSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.LogSchedule)
			model.Unit = core.StringPtr("Minutes")
			model.MinuteSchedule = nil
			model.HourSchedule = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.LogSchedule
			err = backuprecoveryv1.UnmarshalLogSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLFileProtectionGroupHostParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLFileProtectionGroupHostParams)
			model.DisableSourceSideDeduplication = core.BoolPtr(true)
			model.HostID = core.Int64Ptr(int64(26))
			model.HostName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLFileProtectionGroupHostParams
			err = backuprecoveryv1.UnmarshalMSSQLFileProtectionGroupHostParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLFileProtectionGroupObjectParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLFileProtectionGroupObjectParams)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.SourceType = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLFileProtectionGroupObjectParams
			err = backuprecoveryv1.UnmarshalMSSQLFileProtectionGroupObjectParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLFileProtectionGroupParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLFileProtectionGroupParams)
			model.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
			model.AdvancedSettings = nil
			model.BackupSystemDbs = core.BoolPtr(true)
			model.ExcludeFilters = nil
			model.FullBackupsCopyOnly = core.BoolPtr(true)
			model.LogBackupNumStreams = core.Int64Ptr(int64(38))
			model.LogBackupWithClause = core.StringPtr("testString")
			model.PrePostScript = nil
			model.UseAagPreferencesFromServer = core.BoolPtr(true)
			model.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
			model.AdditionalHostParams = nil
			model.Objects = nil
			model.PerformSourceSideDeduplication = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLFileProtectionGroupParams
			err = backuprecoveryv1.UnmarshalMSSQLFileProtectionGroupParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLNativeProtectionGroupObjectParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.SourceType = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLNativeProtectionGroupObjectParams
			err = backuprecoveryv1.UnmarshalMSSQLNativeProtectionGroupObjectParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLNativeProtectionGroupParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLNativeProtectionGroupParams)
			model.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
			model.AdvancedSettings = nil
			model.BackupSystemDbs = core.BoolPtr(true)
			model.ExcludeFilters = nil
			model.FullBackupsCopyOnly = core.BoolPtr(true)
			model.LogBackupNumStreams = core.Int64Ptr(int64(38))
			model.LogBackupWithClause = core.StringPtr("testString")
			model.PrePostScript = nil
			model.UseAagPreferencesFromServer = core.BoolPtr(true)
			model.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
			model.NumStreams = core.Int64Ptr(int64(38))
			model.Objects = nil
			model.WithClause = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLNativeProtectionGroupParams
			err = backuprecoveryv1.UnmarshalMSSQLNativeProtectionGroupParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLProtectionGroupParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLProtectionGroupParams)
			model.FileProtectionTypeParams = nil
			model.NativeProtectionTypeParams = nil
			model.ProtectionType = core.StringPtr("kFile")
			model.VolumeProtectionTypeParams = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLProtectionGroupParams
			err = backuprecoveryv1.UnmarshalMSSQLProtectionGroupParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLVolumeProtectionGroupHostParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams)
			model.EnableSystemBackup = core.BoolPtr(true)
			model.HostID = core.Int64Ptr(int64(26))
			model.HostName = core.StringPtr("testString")
			model.VolumeGuids = []string{"testString"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLVolumeProtectionGroupHostParams
			err = backuprecoveryv1.UnmarshalMSSQLVolumeProtectionGroupHostParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLVolumeProtectionGroupObjectParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.SourceType = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLVolumeProtectionGroupObjectParams
			err = backuprecoveryv1.UnmarshalMSSQLVolumeProtectionGroupObjectParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMSSQLVolumeProtectionGroupParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MSSQLVolumeProtectionGroupParams)
			model.AagBackupPreferenceType = core.StringPtr("kPrimaryReplicaOnly")
			model.AdvancedSettings = nil
			model.BackupSystemDbs = core.BoolPtr(true)
			model.ExcludeFilters = nil
			model.FullBackupsCopyOnly = core.BoolPtr(true)
			model.LogBackupNumStreams = core.Int64Ptr(int64(38))
			model.LogBackupWithClause = core.StringPtr("testString")
			model.PrePostScript = nil
			model.UseAagPreferencesFromServer = core.BoolPtr(true)
			model.UserDbBackupPreferenceType = core.StringPtr("kBackupAllDatabases")
			model.AdditionalHostParams = nil
			model.BackupDbVolumesOnly = core.BoolPtr(true)
			model.IncrementalBackupAfterRestart = core.BoolPtr(true)
			model.IndexingPolicy = nil
			model.Objects = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MSSQLVolumeProtectionGroupParams
			err = backuprecoveryv1.UnmarshalMSSQLVolumeProtectionGroupParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMinuteSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MinuteSchedule)
			model.Frequency = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MinuteSchedule
			err = backuprecoveryv1.UnmarshalMinuteSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMongoDbOnPremSearchParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MongoDbOnPremSearchParams)
			model.MongoDBObjectTypes = []string{"MongoDatabases"}
			model.SearchString = core.StringPtr("testString")
			model.SourceIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MongoDbOnPremSearchParams
			err = backuprecoveryv1.UnmarshalMongoDbOnPremSearchParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMonthSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MonthSchedule)
			model.DayOfWeek = []string{"Sunday"}
			model.WeekOfMonth = core.StringPtr("First")
			model.DayOfMonth = core.Int64Ptr(int64(38))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MonthSchedule
			err = backuprecoveryv1.UnmarshalMonthSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMountPhysicalVolumeParamsPhysicalTargetParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MountPhysicalVolumeParamsPhysicalTargetParams)
			model.MountToOriginalTarget = core.BoolPtr(true)
			model.OriginalTargetConfig = nil
			model.NewTargetConfig = nil
			model.ReadOnlyMount = core.BoolPtr(true)
			model.VolumeNames = []string{"testString"}
			model.MountedVolumeMapping = nil
			model.VlanConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MountPhysicalVolumeParamsPhysicalTargetParams
			err = backuprecoveryv1.UnmarshalMountPhysicalVolumeParamsPhysicalTargetParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMountedVolumeMapping successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MountedVolumeMapping)
			model.OriginalVolume = core.StringPtr("testString")
			model.MountedVolume = core.StringPtr("testString")
			model.FileSystemType = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MountedVolumeMapping
			err = backuprecoveryv1.UnmarshalMountedVolumeMapping(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalMultiStageRestoreOptions successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.MultiStageRestoreOptions)
			model.EnableAutoSync = core.BoolPtr(true)
			model.EnableMultiStageRestore = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.MultiStageRestoreOptions
			err = backuprecoveryv1.UnmarshalMultiStageRestoreOptions(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalO365SearchEmailsRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.O365SearchEmailsRequestParams)
			model.DomainIds = []int64{int64(26)}
			model.MailboxIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.O365SearchEmailsRequestParams
			err = backuprecoveryv1.UnmarshalO365SearchEmailsRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalO365SearchRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.O365SearchRequestParams)
			model.DomainIds = []int64{int64(26)}
			model.GroupIds = []int64{int64(26)}
			model.SiteIds = []int64{int64(26)}
			model.TeamsIds = []int64{int64(26)}
			model.UserIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.O365SearchRequestParams
			err = backuprecoveryv1.UnmarshalO365SearchRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalO365TeamsChannelsSearchRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.O365TeamsChannelsSearchRequestParams)
			model.ChannelEmail = core.StringPtr("testString")
			model.ChannelID = core.StringPtr("testString")
			model.ChannelName = core.StringPtr("testString")
			model.IncludePrivateChannels = core.BoolPtr(true)
			model.IncludePublicChannels = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.O365TeamsChannelsSearchRequestParams
			err = backuprecoveryv1.UnmarshalO365TeamsChannelsSearchRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalObjectSummary successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ObjectSummary)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.SourceID = core.Int64Ptr(int64(26))
			model.SourceName = core.StringPtr("testString")
			model.Environment = core.StringPtr("kPhysical")
			model.ObjectHash = core.StringPtr("testString")
			model.ObjectType = core.StringPtr("kCluster")
			model.LogicalSizeBytes = core.Int64Ptr(int64(26))
			model.UUID = core.StringPtr("testString")
			model.GlobalID = core.StringPtr("testString")
			model.ProtectionType = core.StringPtr("kAgent")
			model.SharepointSiteSummary = nil
			model.OsType = core.StringPtr("kLinux")
			model.VCenterSummary = nil
			model.WindowsClusterSummary = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ObjectSummary
			err = backuprecoveryv1.UnmarshalObjectSummary(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalObjectTypeVCenterParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ObjectTypeVCenterParams)
			model.IsCloudEnv = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ObjectTypeVCenterParams
			err = backuprecoveryv1.UnmarshalObjectTypeVCenterParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalObjectTypeWindowsClusterParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ObjectTypeWindowsClusterParams)
			model.ClusterSourceType = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ObjectTypeWindowsClusterParams
			err = backuprecoveryv1.UnmarshalObjectTypeWindowsClusterParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalOnpremDeployParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.OnpremDeployParams)
			model.ID = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.OnpremDeployParams
			err = backuprecoveryv1.UnmarshalOnpremDeployParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalOnpremDeployTargetConfiguration successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.OnpremDeployTargetConfiguration)
			model.Schedule = nil
			model.Retention = nil
			model.CopyOnRunSuccess = core.BoolPtr(true)
			model.ConfigID = core.StringPtr("testString")
			model.BackupRunType = core.StringPtr("Regular")
			model.RunTimeouts = nil
			model.LogRetention = nil
			model.Params = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.OnpremDeployTargetConfiguration
			err = backuprecoveryv1.UnmarshalOnpremDeployTargetConfiguration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalOracleTier successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.OracleTier)
			model.MoveAfterUnit = core.StringPtr("Days")
			model.MoveAfter = core.Int64Ptr(int64(26))
			model.TierType = core.StringPtr("kOracleTierStandard")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.OracleTier
			err = backuprecoveryv1.UnmarshalOracleTier(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalOracleTiers successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.OracleTiers)
			model.Tiers = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.OracleTiers
			err = backuprecoveryv1.UnmarshalOracleTiers(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPauseProtectionRunActionParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PauseProtectionRunActionParams)
			model.RunID = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PauseProtectionRunActionParams
			err = backuprecoveryv1.UnmarshalPauseProtectionRunActionParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalFileBackupPathParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalFileBackupPathParams)
			model.IncludedPath = core.StringPtr("testString")
			model.ExcludedPaths = []string{"testString"}
			model.SkipNestedVolumes = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalFileBackupPathParams
			err = backuprecoveryv1.UnmarshalPhysicalFileBackupPathParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalFileProtectionGroupObjectParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalFileProtectionGroupObjectParams)
			model.ExcludedVssWriters = []string{"testString"}
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.FilePaths = nil
			model.UsesPathLevelSkipNestedVolumeSetting = core.BoolPtr(true)
			model.NestedVolumeTypesToSkip = []string{"testString"}
			model.FollowNasSymlinkTarget = core.BoolPtr(true)
			model.MetadataFilePath = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalFileProtectionGroupObjectParams
			err = backuprecoveryv1.UnmarshalPhysicalFileProtectionGroupObjectParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalFileProtectionGroupParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalFileProtectionGroupParams)
			model.ExcludedVssWriters = []string{"testString"}
			model.Objects = nil
			model.IndexingPolicy = nil
			model.PerformSourceSideDeduplication = core.BoolPtr(true)
			model.PerformBrickBasedDeduplication = core.BoolPtr(true)
			model.TaskTimeouts = nil
			model.Quiesce = core.BoolPtr(true)
			model.ContinueOnQuiesceFailure = core.BoolPtr(true)
			model.CobmrBackup = core.BoolPtr(true)
			model.PrePostScript = nil
			model.DedupExclusionSourceIds = []int64{int64(26)}
			model.GlobalExcludePaths = []string{"testString"}
			model.GlobalExcludeFS = []string{"testString"}
			model.IgnorableErrors = []string{"kEOF"}
			model.AllowParallelRuns = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalFileProtectionGroupParams
			err = backuprecoveryv1.UnmarshalPhysicalFileProtectionGroupParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalMountVolumesNewTargetConfigServerCredentials successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalMountVolumesNewTargetConfigServerCredentials)
			model.Username = core.StringPtr("testString")
			model.Password = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalMountVolumesNewTargetConfigServerCredentials
			err = backuprecoveryv1.UnmarshalPhysicalMountVolumesNewTargetConfigServerCredentials(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalMountVolumesOriginalTargetConfigServerCredentials successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalMountVolumesOriginalTargetConfigServerCredentials)
			model.Username = core.StringPtr("testString")
			model.Password = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalMountVolumesOriginalTargetConfigServerCredentials
			err = backuprecoveryv1.UnmarshalPhysicalMountVolumesOriginalTargetConfigServerCredentials(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalProtectionGroupParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalProtectionGroupParams)
			model.ProtectionType = core.StringPtr("kFile")
			model.VolumeProtectionTypeParams = nil
			model.FileProtectionTypeParams = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalProtectionGroupParams
			err = backuprecoveryv1.UnmarshalPhysicalProtectionGroupParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalSourceRegistrationParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalSourceRegistrationParams)
			model.Endpoint = core.StringPtr("testString")
			model.ForceRegister = core.BoolPtr(true)
			model.HostType = core.StringPtr("kLinux")
			model.PhysicalType = core.StringPtr("kGroup")
			model.Applications = []string{"kSQL"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalSourceRegistrationParams
			err = backuprecoveryv1.UnmarshalPhysicalSourceRegistrationParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalTargetParamsForMountVolumeNewTargetConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeNewTargetConfig)
			model.MountTarget = nil
			model.ServerCredentials = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalTargetParamsForMountVolumeNewTargetConfig
			err = backuprecoveryv1.UnmarshalPhysicalTargetParamsForMountVolumeNewTargetConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalTargetParamsForMountVolumeOriginalTargetConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeOriginalTargetConfig)
			model.ServerCredentials = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalTargetParamsForMountVolumeOriginalTargetConfig
			err = backuprecoveryv1.UnmarshalPhysicalTargetParamsForMountVolumeOriginalTargetConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalTargetParamsForMountVolumeVlanConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalTargetParamsForMountVolumeVlanConfig)
			model.ID = core.Int64Ptr(int64(38))
			model.DisableVlan = core.BoolPtr(true)
			model.InterfaceName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalTargetParamsForMountVolumeVlanConfig
			err = backuprecoveryv1.UnmarshalPhysicalTargetParamsForMountVolumeVlanConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalTargetParamsForRecoverFileAndFolderRecoverTarget successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.ParentSourceID = core.Int64Ptr(int64(26))
			model.ParentSourceName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderRecoverTarget
			err = backuprecoveryv1.UnmarshalPhysicalTargetParamsForRecoverFileAndFolderRecoverTarget(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalTargetParamsForRecoverFileAndFolderVlanConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderVlanConfig)
			model.ID = core.Int64Ptr(int64(38))
			model.DisableVlan = core.BoolPtr(true)
			model.InterfaceName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalTargetParamsForRecoverFileAndFolderVlanConfig
			err = backuprecoveryv1.UnmarshalPhysicalTargetParamsForRecoverFileAndFolderVlanConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalTargetParamsForRecoverVolumeMountTarget successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeMountTarget
			err = backuprecoveryv1.UnmarshalPhysicalTargetParamsForRecoverVolumeMountTarget(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalTargetParamsForRecoverVolumeVlanConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeVlanConfig)
			model.ID = core.Int64Ptr(int64(38))
			model.DisableVlan = core.BoolPtr(true)
			model.InterfaceName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalTargetParamsForRecoverVolumeVlanConfig
			err = backuprecoveryv1.UnmarshalPhysicalTargetParamsForRecoverVolumeVlanConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalVolumeProtectionGroupObjectParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.VolumeGuids = []string{"testString"}
			model.EnableSystemBackup = core.BoolPtr(true)
			model.ExcludedVssWriters = []string{"testString"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalVolumeProtectionGroupObjectParams
			err = backuprecoveryv1.UnmarshalPhysicalVolumeProtectionGroupObjectParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPhysicalVolumeProtectionGroupParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PhysicalVolumeProtectionGroupParams)
			model.Objects = nil
			model.IndexingPolicy = nil
			model.PerformSourceSideDeduplication = core.BoolPtr(true)
			model.Quiesce = core.BoolPtr(true)
			model.ContinueOnQuiesceFailure = core.BoolPtr(true)
			model.IncrementalBackupAfterRestart = core.BoolPtr(true)
			model.PrePostScript = nil
			model.DedupExclusionSourceIds = []int64{int64(26)}
			model.ExcludedVssWriters = []string{"testString"}
			model.CobmrBackup = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PhysicalVolumeProtectionGroupParams
			err = backuprecoveryv1.UnmarshalPhysicalVolumeProtectionGroupParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPrePostScriptParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PrePostScriptParams)
			model.PreScript = nil
			model.PostScript = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PrePostScriptParams
			err = backuprecoveryv1.UnmarshalPrePostScriptParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPrimaryArchivalTarget successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PrimaryArchivalTarget)
			model.TargetID = core.Int64Ptr(int64(26))
			model.TargetName = core.StringPtr("testString")
			model.TierSettings = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PrimaryArchivalTarget
			err = backuprecoveryv1.UnmarshalPrimaryArchivalTarget(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPrimaryBackupTarget successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.PrimaryBackupTarget)
			model.TargetType = core.StringPtr("Local")
			model.ArchivalTargetSettings = nil
			model.UseDefaultBackupTarget = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.PrimaryBackupTarget
			err = backuprecoveryv1.UnmarshalPrimaryBackupTarget(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalProtectionGroupAlertingPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ProtectionGroupAlertingPolicy)
			model.BackupRunStatus = []string{"kSuccess"}
			model.AlertTargets = nil
			model.RaiseObjectLevelFailureAlert = core.BoolPtr(true)
			model.RaiseObjectLevelFailureAlertAfterLastAttempt = core.BoolPtr(true)
			model.RaiseObjectLevelFailureAlertAfterEachAttempt = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ProtectionGroupAlertingPolicy
			err = backuprecoveryv1.UnmarshalProtectionGroupAlertingPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverPhysicalFileAndFolderParamsPhysicalTargetParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverPhysicalFileAndFolderParamsPhysicalTargetParams)
			model.RecoverTarget = nil
			model.RestoreToOriginalPaths = core.BoolPtr(true)
			model.OverwriteExisting = core.BoolPtr(true)
			model.AlternateRestoreDirectory = core.StringPtr("testString")
			model.PreserveAttributes = core.BoolPtr(true)
			model.PreserveTimestamps = core.BoolPtr(true)
			model.PreserveAcls = core.BoolPtr(true)
			model.ContinueOnError = core.BoolPtr(true)
			model.SaveSuccessFiles = core.BoolPtr(true)
			model.VlanConfig = nil
			model.RestoreEntityType = core.StringPtr("kRegular")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverPhysicalFileAndFolderParamsPhysicalTargetParams
			err = backuprecoveryv1.UnmarshalRecoverPhysicalFileAndFolderParamsPhysicalTargetParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverPhysicalParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverPhysicalParams)
			model.Objects = nil
			model.RecoveryAction = core.StringPtr("RecoverPhysicalVolumes")
			model.RecoverVolumeParams = nil
			model.MountVolumeParams = nil
			model.RecoverFileAndFolderParams = nil
			model.DownloadFileAndFolderParams = nil
			model.SystemRecoveryParams = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverPhysicalParams
			err = backuprecoveryv1.UnmarshalRecoverPhysicalParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverPhysicalParamsDownloadFileAndFolderParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverPhysicalParamsDownloadFileAndFolderParams)
			model.ExpiryTimeUsecs = core.Int64Ptr(int64(26))
			model.FilesAndFolders = nil
			model.DownloadFilePath = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverPhysicalParamsDownloadFileAndFolderParams
			err = backuprecoveryv1.UnmarshalRecoverPhysicalParamsDownloadFileAndFolderParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverPhysicalParamsMountVolumeParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverPhysicalParamsMountVolumeParams)
			model.TargetEnvironment = core.StringPtr("kPhysical")
			model.PhysicalTargetParams = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverPhysicalParamsMountVolumeParams
			err = backuprecoveryv1.UnmarshalRecoverPhysicalParamsMountVolumeParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverPhysicalParamsRecoverFileAndFolderParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverPhysicalParamsRecoverFileAndFolderParams)
			model.FilesAndFolders = nil
			model.TargetEnvironment = core.StringPtr("kPhysical")
			model.PhysicalTargetParams = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverPhysicalParamsRecoverFileAndFolderParams
			err = backuprecoveryv1.UnmarshalRecoverPhysicalParamsRecoverFileAndFolderParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverPhysicalParamsRecoverVolumeParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverPhysicalParamsRecoverVolumeParams)
			model.TargetEnvironment = core.StringPtr("kPhysical")
			model.PhysicalTargetParams = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverPhysicalParamsRecoverVolumeParams
			err = backuprecoveryv1.UnmarshalRecoverPhysicalParamsRecoverVolumeParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverPhysicalParamsSystemRecoveryParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverPhysicalParamsSystemRecoveryParams)
			model.FullNasPath = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverPhysicalParamsSystemRecoveryParams
			err = backuprecoveryv1.UnmarshalRecoverPhysicalParamsSystemRecoveryParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverPhysicalVolumeParamsPhysicalTargetParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverPhysicalVolumeParamsPhysicalTargetParams)
			model.MountTarget = nil
			model.VolumeMapping = nil
			model.ForceUnmountVolume = core.BoolPtr(true)
			model.VlanConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverPhysicalVolumeParamsPhysicalTargetParams
			err = backuprecoveryv1.UnmarshalRecoverPhysicalVolumeParamsPhysicalTargetParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverSqlAppNewSourceConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverSqlAppNewSourceConfig)
			model.KeepCdc = core.BoolPtr(true)
			model.MultiStageRestoreOptions = nil
			model.NativeLogRecoveryWithClause = core.StringPtr("testString")
			model.NativeRecoveryWithClause = core.StringPtr("testString")
			model.OverwritingPolicy = core.StringPtr("FailIfExists")
			model.ReplayEntireLastLog = core.BoolPtr(true)
			model.RestoreTimeUsecs = core.Int64Ptr(int64(26))
			model.SecondaryDataFilesDirList = nil
			model.WithNoRecovery = core.BoolPtr(true)
			model.DataFileDirectoryLocation = core.StringPtr("testString")
			model.DatabaseName = core.StringPtr("testString")
			model.Host = nil
			model.InstanceName = core.StringPtr("testString")
			model.LogFileDirectoryLocation = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverSqlAppNewSourceConfig
			err = backuprecoveryv1.UnmarshalRecoverSqlAppNewSourceConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverSqlAppOriginalSourceConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverSqlAppOriginalSourceConfig)
			model.KeepCdc = core.BoolPtr(true)
			model.MultiStageRestoreOptions = nil
			model.NativeLogRecoveryWithClause = core.StringPtr("testString")
			model.NativeRecoveryWithClause = core.StringPtr("testString")
			model.OverwritingPolicy = core.StringPtr("FailIfExists")
			model.ReplayEntireLastLog = core.BoolPtr(true)
			model.RestoreTimeUsecs = core.Int64Ptr(int64(26))
			model.SecondaryDataFilesDirList = nil
			model.WithNoRecovery = core.BoolPtr(true)
			model.CaptureTailLogs = core.BoolPtr(true)
			model.DataFileDirectoryLocation = core.StringPtr("testString")
			model.LogFileDirectoryLocation = core.StringPtr("testString")
			model.NewDatabaseName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverSqlAppOriginalSourceConfig
			err = backuprecoveryv1.UnmarshalRecoverSqlAppOriginalSourceConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverSqlAppParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverSqlAppParams)
			model.SnapshotID = core.StringPtr("testString")
			model.PointInTimeUsecs = core.Int64Ptr(int64(26))
			model.ProtectionGroupID = core.StringPtr("testString")
			model.ProtectionGroupName = core.StringPtr("testString")
			model.SnapshotCreationTimeUsecs = core.Int64Ptr(int64(26))
			model.ObjectInfo = nil
			model.SnapshotTargetType = core.StringPtr("Local")
			model.ArchivalTargetInfo = nil
			model.ProgressTaskID = core.StringPtr("testString")
			model.RecoverFromStandby = core.BoolPtr(true)
			model.Status = core.StringPtr("Accepted")
			model.StartTimeUsecs = core.Int64Ptr(int64(26))
			model.EndTimeUsecs = core.Int64Ptr(int64(26))
			model.Messages = []string{"testString"}
			model.BytesRestored = core.Int64Ptr(int64(26))
			model.AagInfo = nil
			model.HostInfo = nil
			model.IsEncrypted = core.BoolPtr(true)
			model.SqlTargetParams = nil
			model.TargetEnvironment = core.StringPtr("kSQL")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverSqlAppParams
			err = backuprecoveryv1.UnmarshalRecoverSqlAppParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverSqlParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverSqlParams)
			model.RecoverAppParams = nil
			model.RecoveryAction = core.StringPtr("RecoverApps")
			model.VlanConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverSqlParams
			err = backuprecoveryv1.UnmarshalRecoverSqlParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverTarget successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverTarget)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.ParentSourceID = core.Int64Ptr(int64(26))
			model.ParentSourceName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverTarget
			err = backuprecoveryv1.UnmarshalRecoverTarget(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoverVolumeMapping successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoverVolumeMapping)
			model.SourceVolumeGuid = core.StringPtr("testString")
			model.DestinationVolumeGuid = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoverVolumeMapping
			err = backuprecoveryv1.UnmarshalRecoverVolumeMapping(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoveryObjectIdentifier successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoveryObjectIdentifier)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoveryObjectIdentifier
			err = backuprecoveryv1.UnmarshalRecoveryObjectIdentifier(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRecoveryVlanConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RecoveryVlanConfig)
			model.ID = core.Int64Ptr(int64(38))
			model.DisableVlan = core.BoolPtr(true)
			model.InterfaceName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RecoveryVlanConfig
			err = backuprecoveryv1.UnmarshalRecoveryVlanConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRegularBackupPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RegularBackupPolicy)
			model.Incremental = nil
			model.Full = nil
			model.FullBackups = nil
			model.Retention = nil
			model.PrimaryBackupTarget = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RegularBackupPolicy
			err = backuprecoveryv1.UnmarshalRegularBackupPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRemoteTargetConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RemoteTargetConfig)
			model.ClusterID = core.Int64Ptr(int64(26))
			model.ClusterName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RemoteTargetConfig
			err = backuprecoveryv1.UnmarshalRemoteTargetConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalReplicationTargetConfiguration successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ReplicationTargetConfiguration)
			model.Schedule = nil
			model.Retention = nil
			model.CopyOnRunSuccess = core.BoolPtr(true)
			model.ConfigID = core.StringPtr("testString")
			model.BackupRunType = core.StringPtr("Regular")
			model.RunTimeouts = nil
			model.LogRetention = nil
			model.AwsTargetConfig = nil
			model.AzureTargetConfig = nil
			model.TargetType = core.StringPtr("RemoteCluster")
			model.RemoteTargetConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ReplicationTargetConfiguration
			err = backuprecoveryv1.UnmarshalReplicationTargetConfiguration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalResumeProtectionRunActionParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.ResumeProtectionRunActionParams)
			model.RunID = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.ResumeProtectionRunActionParams
			err = backuprecoveryv1.UnmarshalResumeProtectionRunActionParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRetention successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.Retention)
			model.Unit = core.StringPtr("Days")
			model.Duration = core.Int64Ptr(int64(1))
			model.DataLockConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.Retention
			err = backuprecoveryv1.UnmarshalRetention(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRetryOptions successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RetryOptions)
			model.Retries = core.Int64Ptr(int64(0))
			model.RetryIntervalMins = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RetryOptions
			err = backuprecoveryv1.UnmarshalRetryOptions(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRpaasTargetConfiguration successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RpaasTargetConfiguration)
			model.Schedule = nil
			model.Retention = nil
			model.CopyOnRunSuccess = core.BoolPtr(true)
			model.ConfigID = core.StringPtr("testString")
			model.BackupRunType = core.StringPtr("Regular")
			model.RunTimeouts = nil
			model.LogRetention = nil
			model.TargetID = core.Int64Ptr(int64(26))
			model.TargetName = core.StringPtr("testString")
			model.TargetType = core.StringPtr("Tape")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RpaasTargetConfiguration
			err = backuprecoveryv1.UnmarshalRpaasTargetConfiguration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRunArchivalConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RunArchivalConfig)
			model.ID = core.Int64Ptr(int64(26))
			model.ArchivalTargetType = core.StringPtr("Tape")
			model.Retention = nil
			model.CopyOnlyFullySuccessful = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RunArchivalConfig
			err = backuprecoveryv1.UnmarshalRunArchivalConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRunCloudReplicationConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RunCloudReplicationConfig)
			model.AwsTarget = nil
			model.AzureTarget = nil
			model.TargetType = core.StringPtr("AWS")
			model.Retention = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RunCloudReplicationConfig
			err = backuprecoveryv1.UnmarshalRunCloudReplicationConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRunObject successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RunObject)
			model.ID = core.Int64Ptr(int64(26))
			model.AppIds = []int64{int64(26)}
			model.PhysicalParams = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RunObject
			err = backuprecoveryv1.UnmarshalRunObject(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRunObjectPhysicalParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RunObjectPhysicalParams)
			model.MetadataFilePath = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RunObjectPhysicalParams
			err = backuprecoveryv1.UnmarshalRunObjectPhysicalParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRunReplicationConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RunReplicationConfig)
			model.ID = core.Int64Ptr(int64(26))
			model.Retention = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RunReplicationConfig
			err = backuprecoveryv1.UnmarshalRunReplicationConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRunTargetsConfiguration successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.RunTargetsConfiguration)
			model.UsePolicyDefaults = core.BoolPtr(false)
			model.Replications = nil
			model.Archivals = nil
			model.CloudReplications = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.RunTargetsConfiguration
			err = backuprecoveryv1.UnmarshalRunTargetsConfiguration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.Schedule)
			model.PeriodicTimeWindows = nil
			model.ScheduleType = core.StringPtr("PeriodicTimeWindows")
			model.TimeRanges = nil
			model.Timezone = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.Schedule
			err = backuprecoveryv1.UnmarshalSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchDocumentLibraryRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchDocumentLibraryRequestParams)
			model.CategoryTypes = []string{"Document"}
			model.CreationEndTimeSecs = core.Int64Ptr(int64(26))
			model.CreationStartTimeSecs = core.Int64Ptr(int64(26))
			model.IncludeFiles = core.BoolPtr(true)
			model.IncludeFolders = core.BoolPtr(true)
			model.O365Params = nil
			model.OwnerNames = []string{"testString"}
			model.SearchString = core.StringPtr("testString")
			model.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
			model.SizeBytesUpperLimit = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchDocumentLibraryRequestParams
			err = backuprecoveryv1.UnmarshalSearchDocumentLibraryRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchEmailRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchEmailRequestParams)
			model.AttendeesAddresses = []string{"testString"}
			model.BccRecipientAddresses = []string{"testString"}
			model.CcRecipientAddresses = []string{"testString"}
			model.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
			model.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
			model.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
			model.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
			model.EmailAddress = core.StringPtr("testString")
			model.EmailSubject = core.StringPtr("testString")
			model.FirstName = core.StringPtr("testString")
			model.FolderNames = []string{"testString"}
			model.HasAttachment = core.BoolPtr(true)
			model.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
			model.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
			model.LastName = core.StringPtr("testString")
			model.MiddleName = core.StringPtr("testString")
			model.OrganizerAddress = core.StringPtr("testString")
			model.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
			model.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
			model.RecipientAddresses = []string{"testString"}
			model.SenderAddress = core.StringPtr("testString")
			model.SourceEnvironment = core.StringPtr("kO365")
			model.TaskStatusTypes = []string{"NotStarted"}
			model.Types = []string{"Email"}
			model.O365Params = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchEmailRequestParams
			err = backuprecoveryv1.UnmarshalSearchEmailRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchEmailRequestParamsBase successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchEmailRequestParamsBase)
			model.AttendeesAddresses = []string{"testString"}
			model.BccRecipientAddresses = []string{"testString"}
			model.CcRecipientAddresses = []string{"testString"}
			model.CreatedEndTimeSecs = core.Int64Ptr(int64(26))
			model.CreatedStartTimeSecs = core.Int64Ptr(int64(26))
			model.DueDateEndTimeSecs = core.Int64Ptr(int64(26))
			model.DueDateStartTimeSecs = core.Int64Ptr(int64(26))
			model.EmailAddress = core.StringPtr("testString")
			model.EmailSubject = core.StringPtr("testString")
			model.FirstName = core.StringPtr("testString")
			model.FolderNames = []string{"testString"}
			model.HasAttachment = core.BoolPtr(true)
			model.LastModifiedEndTimeSecs = core.Int64Ptr(int64(26))
			model.LastModifiedStartTimeSecs = core.Int64Ptr(int64(26))
			model.LastName = core.StringPtr("testString")
			model.MiddleName = core.StringPtr("testString")
			model.OrganizerAddress = core.StringPtr("testString")
			model.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))
			model.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
			model.RecipientAddresses = []string{"testString"}
			model.SenderAddress = core.StringPtr("testString")
			model.SourceEnvironment = core.StringPtr("kO365")
			model.TaskStatusTypes = []string{"NotStarted"}
			model.Types = []string{"Email"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchEmailRequestParamsBase
			err = backuprecoveryv1.UnmarshalSearchEmailRequestParamsBase(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchExchangeObjectsRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchExchangeObjectsRequestParams)
			model.SearchString = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchExchangeObjectsRequestParams
			err = backuprecoveryv1.UnmarshalSearchExchangeObjectsRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchFileRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchFileRequestParams)
			model.SearchString = core.StringPtr("testString")
			model.Types = []string{"File"}
			model.SourceEnvironments = []string{"kVMware"}
			model.SourceIds = []int64{int64(26)}
			model.ObjectIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchFileRequestParams
			err = backuprecoveryv1.UnmarshalSearchFileRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchMsGroupsRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchMsGroupsRequestParams)
			model.MailboxParams = nil
			model.O365Params = nil
			model.SiteParams = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchMsGroupsRequestParams
			err = backuprecoveryv1.UnmarshalSearchMsGroupsRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchMsTeamsRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchMsTeamsRequestParams)
			model.CategoryTypes = []string{"Document"}
			model.ChannelNames = []string{"testString"}
			model.ChannelParams = nil
			model.CreationEndTimeSecs = core.Int64Ptr(int64(26))
			model.CreationStartTimeSecs = core.Int64Ptr(int64(26))
			model.O365Params = nil
			model.OwnerNames = []string{"testString"}
			model.SearchString = core.StringPtr("testString")
			model.SizeBytesLowerLimit = core.Int64Ptr(int64(26))
			model.SizeBytesUpperLimit = core.Int64Ptr(int64(26))
			model.Types = []string{"Channel"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchMsTeamsRequestParams
			err = backuprecoveryv1.UnmarshalSearchMsTeamsRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchPublicFolderRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchPublicFolderRequestParams)
			model.SearchString = core.StringPtr("testString")
			model.Types = []string{"Calendar"}
			model.HasAttachment = core.BoolPtr(true)
			model.SenderAddress = core.StringPtr("testString")
			model.RecipientAddresses = []string{"testString"}
			model.CcRecipientAddresses = []string{"testString"}
			model.BccRecipientAddresses = []string{"testString"}
			model.ReceivedStartTimeSecs = core.Int64Ptr(int64(26))
			model.ReceivedEndTimeSecs = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchPublicFolderRequestParams
			err = backuprecoveryv1.UnmarshalSearchPublicFolderRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSearchSfdcRecordsRequestParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SearchSfdcRecordsRequestParams)
			model.MutationTypes = []string{"All"}
			model.ObjectName = core.StringPtr("testString")
			model.QueryString = core.StringPtr("testString")
			model.SnapshotID = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SearchSfdcRecordsRequestParams
			err = backuprecoveryv1.UnmarshalSearchSfdcRecordsRequestParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSharepointObjectParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SharepointObjectParams)
			model.SiteWebURL = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SharepointObjectParams
			err = backuprecoveryv1.UnmarshalSharepointObjectParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSlaRule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SlaRule)
			model.BackupRunType = core.StringPtr("kIncremental")
			model.SlaMinutes = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SlaRule
			err = backuprecoveryv1.UnmarshalSlaRule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalSqlTargetParamsForRecoverSqlApp successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.SqlTargetParamsForRecoverSqlApp)
			model.NewSourceConfig = nil
			model.OriginalSourceConfig = nil
			model.RecoverToNewSource = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.SqlTargetParamsForRecoverSqlApp
			err = backuprecoveryv1.UnmarshalSqlTargetParamsForRecoverSqlApp(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalStorageArraySnapshotBackupPolicy successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.StorageArraySnapshotBackupPolicy)
			model.Schedule = nil
			model.Retention = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.StorageArraySnapshotBackupPolicy
			err = backuprecoveryv1.UnmarshalStorageArraySnapshotBackupPolicy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalStorageArraySnapshotSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.StorageArraySnapshotSchedule)
			model.Unit = core.StringPtr("Minutes")
			model.MinuteSchedule = nil
			model.HourSchedule = nil
			model.DaySchedule = nil
			model.WeekSchedule = nil
			model.MonthSchedule = nil
			model.YearSchedule = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.StorageArraySnapshotSchedule
			err = backuprecoveryv1.UnmarshalStorageArraySnapshotSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalTargetSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.TargetSchedule)
			model.Unit = core.StringPtr("Runs")
			model.Frequency = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.TargetSchedule
			err = backuprecoveryv1.UnmarshalTargetSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalTargetsConfiguration successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.TargetsConfiguration)
			model.ReplicationTargets = nil
			model.ArchivalTargets = nil
			model.CloudSpinTargets = nil
			model.OnpremDeployTargets = nil
			model.RpaasTargets = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.TargetsConfiguration
			err = backuprecoveryv1.UnmarshalTargetsConfiguration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalTierLevelSettings successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.TierLevelSettings)
			model.AwsTiering = nil
			model.AzureTiering = nil
			model.CloudPlatform = core.StringPtr("AWS")
			model.GoogleTiering = nil
			model.OracleTiering = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.TierLevelSettings
			err = backuprecoveryv1.UnmarshalTierLevelSettings(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalTimeOfDay successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.TimeOfDay)
			model.Hour = core.Int64Ptr(int64(0))
			model.Minute = core.Int64Ptr(int64(0))
			model.TimeZone = core.StringPtr("America/Los_Angeles")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.TimeOfDay
			err = backuprecoveryv1.UnmarshalTimeOfDay(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalUdaOnPremSearchParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.UdaOnPremSearchParams)
			model.SearchString = core.StringPtr("testString")
			model.SourceIds = []int64{int64(26)}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.UdaOnPremSearchParams
			err = backuprecoveryv1.UnmarshalUdaOnPremSearchParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalUpdateArchivalSnapshotConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.UpdateArchivalSnapshotConfig)
			model.NewSnapshotConfig = nil
			model.UpdateExistingSnapshotConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.UpdateArchivalSnapshotConfig
			err = backuprecoveryv1.UnmarshalUpdateArchivalSnapshotConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalUpdateExistingArchivalSnapshotConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.UpdateExistingArchivalSnapshotConfig)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.ArchivalTargetType = core.StringPtr("Tape")
			model.EnableLegalHold = core.BoolPtr(true)
			model.DeleteSnapshot = core.BoolPtr(true)
			model.Resync = core.BoolPtr(true)
			model.DataLock = core.StringPtr("Compliance")
			model.DaysToKeep = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.UpdateExistingArchivalSnapshotConfig
			err = backuprecoveryv1.UnmarshalUpdateExistingArchivalSnapshotConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalUpdateExistingReplicationSnapshotConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.UpdateExistingReplicationSnapshotConfig)
			model.ID = core.Int64Ptr(int64(26))
			model.Name = core.StringPtr("testString")
			model.EnableLegalHold = core.BoolPtr(true)
			model.DeleteSnapshot = core.BoolPtr(true)
			model.Resync = core.BoolPtr(true)
			model.DataLock = core.StringPtr("Compliance")
			model.DaysToKeep = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.UpdateExistingReplicationSnapshotConfig
			err = backuprecoveryv1.UnmarshalUpdateExistingReplicationSnapshotConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalUpdateLocalSnapshotConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.UpdateLocalSnapshotConfig)
			model.EnableLegalHold = core.BoolPtr(true)
			model.DeleteSnapshot = core.BoolPtr(true)
			model.DataLock = core.StringPtr("Compliance")
			model.DaysToKeep = core.Int64Ptr(int64(26))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.UpdateLocalSnapshotConfig
			err = backuprecoveryv1.UnmarshalUpdateLocalSnapshotConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalUpdateProtectionGroupRunParams successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.UpdateProtectionGroupRunParams)
			model.RunID = core.StringPtr("testString")
			model.LocalSnapshotConfig = nil
			model.ReplicationSnapshotConfig = nil
			model.ArchivalSnapshotConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.UpdateProtectionGroupRunParams
			err = backuprecoveryv1.UnmarshalUpdateProtectionGroupRunParams(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalUpdateReplicationSnapshotConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.UpdateReplicationSnapshotConfig)
			model.NewSnapshotConfig = nil
			model.UpdateExistingSnapshotConfig = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.UpdateReplicationSnapshotConfig
			err = backuprecoveryv1.UnmarshalUpdateReplicationSnapshotConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalWeekSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.WeekSchedule)
			model.DayOfWeek = []string{"Sunday"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.WeekSchedule
			err = backuprecoveryv1.UnmarshalWeekSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalYearSchedule successfully`, func() {
			// Construct an instance of the model.
			model := new(backuprecoveryv1.YearSchedule)
			model.DayOfYear = core.StringPtr("First")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *backuprecoveryv1.YearSchedule
			err = backuprecoveryv1.UnmarshalYearSchedule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate("2019-01-01")
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime("2019-01-01T12:00:00.000Z")
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := []byte(mockData)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return io.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate(mockData string) *strfmt.Date {
	d, err := core.ParseDate(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func CreateMockDateTime(mockData string) *strfmt.DateTime {
	d, err := core.ParseDateTime(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
